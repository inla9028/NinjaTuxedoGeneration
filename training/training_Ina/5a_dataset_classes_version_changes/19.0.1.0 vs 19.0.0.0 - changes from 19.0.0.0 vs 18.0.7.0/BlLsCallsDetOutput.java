package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class BlLsCallsDetOutput extends ServiceOutput {

    /**
     * Creates a new instance of BlLsCallsDetOutput.
     *
     * @throws FMLManipulationException
     */
    public BlLsCallsDetOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public BlLsCallsDetOutput() {
    }

    /**
     * Creates a new instance of BlLsCallsDetOutput.
     *
     * @param ds Output dataset from BlLsCallsDet service.
     * @throws FMLManipulationException
     */
    public BlLsCallsDetOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        if ("19.0.1.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[57];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
            this.fmlBuffer[4] = new FmlField("FEATURE_DESC", FmlField.TYPE_STRING, 101, null, 4, 600);
            this.fmlBuffer[5] = new FmlField("RATE_SCENARIO_DESC", FmlField.TYPE_STRING, 31, null, 5, 600);
            this.fmlBuffer[6] = new FmlField("START_PERIOD", FmlField.TYPE_STRING, 3, null, 6, 600);
            this.fmlBuffer[7] = new FmlField("CHARGED_DURATION", FmlField.TYPE_DOUBLE, -1, null, 7, 600);
            this.fmlBuffer[8] = new FmlField("IM_GRANTED", FmlField.TYPE_DOUBLE, -1, null, 8, 600);
            this.fmlBuffer[9] = new FmlField("ADDITIONAL_CHARGE", FmlField.TYPE_DOUBLE, -1, null, 9, 600);
            this.fmlBuffer[10] = new FmlField("ON_GOING_ADDITIONAL_CHARGE", FmlField.TYPE_DOUBLE, -1, null, 10, 600);
            this.fmlBuffer[11] = new FmlField("GROSS_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 11, 600);
            this.fmlBuffer[12] = new FmlField("NET_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 12, 600);
            this.fmlBuffer[13] = new FmlField("STEP_TIER_LEVEL", FmlField.TYPE_STRING, 3, null, 13, 600);
            this.fmlBuffer[14] = new FmlField("CALLSLSTGENRECROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 14, 1);
            this.fmlBuffer[15] = new FmlField("CALL_DATE", FmlField.TYPE_STRING, 15, null, 15, 600);
            this.fmlBuffer[16] = new FmlField("START_TIME", FmlField.TYPE_STRING, 15, null, 16, 600);
            this.fmlBuffer[17] = new FmlField("CALL_DUR_SEC", FmlField.TYPE_DOUBLE, -1, null, 17, 600);
            this.fmlBuffer[18] = new FmlField("CALLED_NUMBER", FmlField.TYPE_STRING, 25, null, 18, 600);
            this.fmlBuffer[19] = new FmlField("DESTINATION_DESC", FmlField.TYPE_STRING, 101, null, 19, 600);
            this.fmlBuffer[20] = new FmlField("CALL_TYPE", FmlField.TYPE_BYTE, -1, null, 20, 600);
            this.fmlBuffer[21] = new FmlField("FF_IND", FmlField.TYPE_BYTE, -1, null, 21, 600);
            this.fmlBuffer[22] = new FmlField("FEATURE_CODE", FmlField.TYPE_STRING, 7, null, 22, 600);
            this.fmlBuffer[23] = new FmlField("CLLSTGENBUFFEATURE_DESC", FmlField.TYPE_STRING, 101, null, 23, 600);
            this.fmlBuffer[24] = new FmlField("ADDITIONAL_AMOUNTS", FmlField.TYPE_DOUBLE, -1, null, 24, 600);
            this.fmlBuffer[25] = new FmlField("FEATURE_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 25, 600);
            this.fmlBuffer[26] = new FmlField("TOLL_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 26, 600);
            this.fmlBuffer[27] = new FmlField("ADJUSTMENTS_GIVEN", FmlField.TYPE_DOUBLE, -1, null, 27, 600);
            this.fmlBuffer[28] = new FmlField("TOTAL_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 28, 600);
            this.fmlBuffer[29] = new FmlField("TIER_IND", FmlField.TYPE_BYTE, -1, null, 29, 600);
            this.fmlBuffer[30] = new FmlField("MESSAGE_SWITCH_ID", FmlField.TYPE_STRING, 8, null, 30, 600);
            this.fmlBuffer[31] = new FmlField("MESSAGE_IDENTIFIER", FmlField.TYPE_STRING, 25, null, 31, 600);
            this.fmlBuffer[32] = new FmlField("CALL_TYPE_DESC", FmlField.TYPE_STRING, 16, null, 32, 600);
            this.fmlBuffer[33] = new FmlField("CELL_ID", FmlField.TYPE_STRING, 6, null, 33, 600);
            this.fmlBuffer[34] = new FmlField("CLLSTGENBUFRATE_SCENARIO_DESC", FmlField.TYPE_STRING, 31, null, 34, 600);
            this.fmlBuffer[35] = new FmlField("CALL_CHAR_CD", FmlField.TYPE_STRING, 8, null, 35, 600);
            this.fmlBuffer[36] = new FmlField("CALL_CHAR_PART1_CD", FmlField.TYPE_STRING, 8, null, 36, 600);
            this.fmlBuffer[37] = new FmlField("CALL_CHAR_PART1_DESC", FmlField.TYPE_STRING, 31, null, 37, 600);
            this.fmlBuffer[38] = new FmlField("CALL_CHAR_PART2_CD", FmlField.TYPE_STRING, 8, null, 38, 600);
            this.fmlBuffer[39] = new FmlField("CALL_CHAR_PART2_DESC", FmlField.TYPE_STRING, 31, null, 39, 600);
            this.fmlBuffer[40] = new FmlField("CALL_CHAR_PART3_CD", FmlField.TYPE_STRING, 8, null, 40, 600);
            this.fmlBuffer[41] = new FmlField("CALL_CHAR_PART3_DESC", FmlField.TYPE_STRING, 31, null, 41, 600);
            this.fmlBuffer[42] = new FmlField("AT_CALL_DUR_ROUND_MIN", FmlField.TYPE_DOUBLE, -1, null, 42, 600);
            this.fmlBuffer[43] = new FmlField("UNIT_MEASURE_CODE", FmlField.TYPE_BYTE, -1, null, 43, 600);
            this.fmlBuffer[44] = new FmlField("RI_CARRIER", FmlField.TYPE_STRING, 6, null, 44, 600);
            this.fmlBuffer[45] = new FmlField("A_IMEI", FmlField.TYPE_STRING, 16, null, 45, 600);
            this.fmlBuffer[46] = new FmlField("PLAN_CD", FmlField.TYPE_STRING, 10, null, 46, 600);
            this.fmlBuffer[47] = new FmlField("DISCOUNT_TYPE", FmlField.TYPE_BYTE, -1, null, 47, 600);
            this.fmlBuffer[48] = new FmlField("TOT_AMT_BFR_DISC", FmlField.TYPE_DOUBLE, -1, null, 48, 600);
            this.fmlBuffer[49] = new FmlField("COUNTRY_NAME", FmlField.TYPE_STRING, 26, null, 49, 600);
            this.fmlBuffer[50] = new FmlField("RM_OPERATOR_DESC", FmlField.TYPE_STRING, 31, null, 50, 600);
            this.fmlBuffer[51] = new FmlField("CALLSLSTTOLLRECROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 51, 1);
            this.fmlBuffer[52] = new FmlField("CLLSTTOLBUFSTART_PERIOD", FmlField.TYPE_STRING, 3, null, 52, 600);
            this.fmlBuffer[53] = new FmlField("CLLSTTOLBUFCHARGED_DURATION", FmlField.TYPE_DOUBLE, -1, null, 53, 600);
            this.fmlBuffer[54] = new FmlField("CLLSTTOLBUFIM_GRANTED", FmlField.TYPE_DOUBLE, -1, null, 54, 600);
            this.fmlBuffer[55] = new FmlField("CLLSTTOLBUFGROSS_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 55, 600);
            this.fmlBuffer[56] = new FmlField("CLLSTTOLBUFNET_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 56, 600);
        } else if ("19.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[57];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
            this.fmlBuffer[4] = new FmlField("FEATURE_DESC", FmlField.TYPE_STRING, 101, null, 4, 600);
            this.fmlBuffer[5] = new FmlField("RATE_SCENARIO_DESC", FmlField.TYPE_STRING, 31, null, 5, 600);
            this.fmlBuffer[6] = new FmlField("START_PERIOD", FmlField.TYPE_STRING, 3, null, 6, 600);
            this.fmlBuffer[7] = new FmlField("CHARGED_DURATION", FmlField.TYPE_DOUBLE, -1, null, 7, 600);
            this.fmlBuffer[8] = new FmlField("IM_GRANTED", FmlField.TYPE_DOUBLE, -1, null, 8, 600);
            this.fmlBuffer[9] = new FmlField("ADDITIONAL_CHARGE", FmlField.TYPE_DOUBLE, -1, null, 9, 600);
            this.fmlBuffer[10] = new FmlField("ON_GOING_ADDITIONAL_CHARGE", FmlField.TYPE_DOUBLE, -1, null, 10, 600);
            this.fmlBuffer[11] = new FmlField("GROSS_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 11, 600);
            this.fmlBuffer[12] = new FmlField("NET_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 12, 600);
            this.fmlBuffer[13] = new FmlField("STEP_TIER_LEVEL", FmlField.TYPE_STRING, 3, null, 13, 600);
            this.fmlBuffer[14] = new FmlField("CALLSLSTGENRECROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 14, 1);
            this.fmlBuffer[15] = new FmlField("CALL_DATE", FmlField.TYPE_STRING, 15, null, 15, 600);
            this.fmlBuffer[16] = new FmlField("START_TIME", FmlField.TYPE_STRING, 15, null, 16, 600);
            this.fmlBuffer[17] = new FmlField("CALL_DUR_SEC", FmlField.TYPE_DOUBLE, -1, null, 17, 600);
            this.fmlBuffer[18] = new FmlField("CALLED_NUMBER", FmlField.TYPE_STRING, 25, null, 18, 600);
            this.fmlBuffer[19] = new FmlField("DESTINATION_DESC", FmlField.TYPE_STRING, 31, null, 19, 600);
            this.fmlBuffer[20] = new FmlField("CALL_TYPE", FmlField.TYPE_BYTE, -1, null, 20, 600);
            this.fmlBuffer[21] = new FmlField("FF_IND", FmlField.TYPE_BYTE, -1, null, 21, 600);
            this.fmlBuffer[22] = new FmlField("FEATURE_CODE", FmlField.TYPE_STRING, 7, null, 22, 600);
            this.fmlBuffer[23] = new FmlField("CLLSTGENBUFFEATURE_DESC", FmlField.TYPE_STRING, 101, null, 23, 600);
            this.fmlBuffer[24] = new FmlField("ADDITIONAL_AMOUNTS", FmlField.TYPE_DOUBLE, -1, null, 24, 600);
            this.fmlBuffer[25] = new FmlField("FEATURE_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 25, 600);
            this.fmlBuffer[26] = new FmlField("TOLL_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 26, 600);
            this.fmlBuffer[27] = new FmlField("ADJUSTMENTS_GIVEN", FmlField.TYPE_DOUBLE, -1, null, 27, 600);
            this.fmlBuffer[28] = new FmlField("TOTAL_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 28, 600);
            this.fmlBuffer[29] = new FmlField("TIER_IND", FmlField.TYPE_BYTE, -1, null, 29, 600);
            this.fmlBuffer[30] = new FmlField("MESSAGE_SWITCH_ID", FmlField.TYPE_STRING, 8, null, 30, 600);
            this.fmlBuffer[31] = new FmlField("MESSAGE_IDENTIFIER", FmlField.TYPE_STRING, 25, null, 31, 600);
            this.fmlBuffer[32] = new FmlField("CALL_TYPE_DESC", FmlField.TYPE_STRING, 16, null, 32, 600);
            this.fmlBuffer[33] = new FmlField("CELL_ID", FmlField.TYPE_STRING, 6, null, 33, 600);
            this.fmlBuffer[34] = new FmlField("CLLSTGENBUFRATE_SCENARIO_DESC", FmlField.TYPE_STRING, 31, null, 34, 600);
            this.fmlBuffer[35] = new FmlField("CALL_CHAR_CD", FmlField.TYPE_STRING, 8, null, 35, 600);
            this.fmlBuffer[36] = new FmlField("CALL_CHAR_PART1_CD", FmlField.TYPE_STRING, 8, null, 36, 600);
            this.fmlBuffer[37] = new FmlField("CALL_CHAR_PART1_DESC", FmlField.TYPE_STRING, 31, null, 37, 600);
            this.fmlBuffer[38] = new FmlField("CALL_CHAR_PART2_CD", FmlField.TYPE_STRING, 8, null, 38, 600);
            this.fmlBuffer[39] = new FmlField("CALL_CHAR_PART2_DESC", FmlField.TYPE_STRING, 31, null, 39, 600);
            this.fmlBuffer[40] = new FmlField("CALL_CHAR_PART3_CD", FmlField.TYPE_STRING, 8, null, 40, 600);
            this.fmlBuffer[41] = new FmlField("CALL_CHAR_PART3_DESC", FmlField.TYPE_STRING, 31, null, 41, 600);
            this.fmlBuffer[42] = new FmlField("AT_CALL_DUR_ROUND_MIN", FmlField.TYPE_DOUBLE, -1, null, 42, 600);
            this.fmlBuffer[43] = new FmlField("UNIT_MEASURE_CODE", FmlField.TYPE_BYTE, -1, null, 43, 600);
            this.fmlBuffer[44] = new FmlField("RI_CARRIER", FmlField.TYPE_STRING, 6, null, 44, 600);
            this.fmlBuffer[45] = new FmlField("A_IMEI", FmlField.TYPE_STRING, 16, null, 45, 600);
            this.fmlBuffer[46] = new FmlField("PLAN_CD", FmlField.TYPE_STRING, 10, null, 46, 600);
            this.fmlBuffer[47] = new FmlField("DISCOUNT_TYPE", FmlField.TYPE_BYTE, -1, null, 47, 600);
            this.fmlBuffer[48] = new FmlField("TOT_AMT_BFR_DISC", FmlField.TYPE_DOUBLE, -1, null, 48, 600);
            this.fmlBuffer[49] = new FmlField("COUNTRY_NAME", FmlField.TYPE_STRING, 26, null, 49, 600);
            this.fmlBuffer[50] = new FmlField("RM_OPERATOR_DESC", FmlField.TYPE_STRING, 31, null, 50, 600);
            this.fmlBuffer[51] = new FmlField("CALLSLSTTOLLRECROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 51, 1);
            this.fmlBuffer[52] = new FmlField("CLLSTTOLBUFSTART_PERIOD", FmlField.TYPE_STRING, 3, null, 52, 600);
            this.fmlBuffer[53] = new FmlField("CLLSTTOLBUFCHARGED_DURATION", FmlField.TYPE_DOUBLE, -1, null, 53, 600);
            this.fmlBuffer[54] = new FmlField("CLLSTTOLBUFIM_GRANTED", FmlField.TYPE_DOUBLE, -1, null, 54, 600);
            this.fmlBuffer[55] = new FmlField("CLLSTTOLBUFGROSS_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 55, 600);
            this.fmlBuffer[56] = new FmlField("CLLSTTOLBUFNET_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 56, 600);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by BlLsCallsDetOutput class");
        }
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTALCOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTALCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTALCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[2].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'FEATURE_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'RATE_SCENARIO_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RATE_SCENARIO_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RATE_SCENARIO_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RATE_SCENARIO_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'RATE_SCENARIO_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RATE_SCENARIO_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'START_PERIOD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'START_PERIOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_START_PERIOD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'START_PERIOD' field in the FML buffer.
     *
     * @return Number of values defined for 'START_PERIOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_START_PERIOD_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'CHARGED_DURATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CHARGED_DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CHARGED_DURATION(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHARGED_DURATION' field in the FML buffer.
     *
     * @return Number of values defined for 'CHARGED_DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHARGED_DURATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'IM_GRANTED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_GRANTED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_GRANTED(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_GRANTED' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_GRANTED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_GRANTED_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_CHARGE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ADDITIONAL_CHARGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ADDITIONAL_CHARGE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_CHARGE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_CHARGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_CHARGE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'ON_GOING_ADDITIONAL_CHARGE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ON_GOING_ADDITIONAL_CHARGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ON_GOING_ADDITIONAL_CHARGE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ON_GOING_ADDITIONAL_CHARGE' field in the FML buffer.
     *
     * @return Number of values defined for 'ON_GOING_ADDITIONAL_CHARGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ON_GOING_ADDITIONAL_CHARGE_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'GROSS_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'GROSS_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_GROSS_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'GROSS_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'GROSS_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_GROSS_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'NET_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'NET_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_NET_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NET_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'NET_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NET_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'STEP_TIER_LEVEL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'STEP_TIER_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_STEP_TIER_LEVEL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'STEP_TIER_LEVEL' field in the FML buffer.
     *
     * @return Number of values defined for 'STEP_TIER_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_STEP_TIER_LEVEL_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'CALLSLSTGENRECROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'CALLSLSTGENRECROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CALLSLSTGENRECROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[14].getValue(0));
    }

    /**
     * Retrieves the value of the 'CALL_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'START_TIME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'START_TIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_START_TIME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'START_TIME' field in the FML buffer.
     *
     * @return Number of values defined for 'START_TIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_START_TIME_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_DUR_SEC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_DUR_SEC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CALL_DUR_SEC(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_DUR_SEC' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_DUR_SEC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_DUR_SEC_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'CALLED_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALLED_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALLED_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALLED_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'CALLED_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALLED_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'DESTINATION_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DESTINATION_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DESTINATION_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DESTINATION_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'DESTINATION_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DESTINATION_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[20].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CALL_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'FF_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FF_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FF_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[21].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'FF_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'FF_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FF_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'CLLSTGENBUFFEATURE_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTGENBUFFEATURE_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CLLSTGENBUFFEATURE_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTGENBUFFEATURE_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTGENBUFFEATURE_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTGENBUFFEATURE_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_AMOUNTS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ADDITIONAL_AMOUNTS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ADDITIONAL_AMOUNTS(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_AMOUNTS' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_AMOUNTS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_AMOUNTS_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FEATURE_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'TOLL_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TOLL_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_TOLL_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TOLL_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'TOLL_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TOLL_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'ADJUSTMENTS_GIVEN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ADJUSTMENTS_GIVEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ADJUSTMENTS_GIVEN(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADJUSTMENTS_GIVEN' field in the FML buffer.
     *
     * @return Number of values defined for 'ADJUSTMENTS_GIVEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADJUSTMENTS_GIVEN_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'TOTAL_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TOTAL_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_TOTAL_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TOTAL_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'TOTAL_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TOTAL_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'TIER_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TIER_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TIER_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[29].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TIER_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'TIER_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TIER_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'MESSAGE_SWITCH_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MESSAGE_SWITCH_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MESSAGE_SWITCH_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MESSAGE_SWITCH_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'MESSAGE_SWITCH_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MESSAGE_SWITCH_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'MESSAGE_IDENTIFIER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MESSAGE_IDENTIFIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MESSAGE_IDENTIFIER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MESSAGE_IDENTIFIER' field in the FML buffer.
     *
     * @return Number of values defined for 'MESSAGE_IDENTIFIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MESSAGE_IDENTIFIER_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_TYPE_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_TYPE_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_TYPE_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_TYPE_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_TYPE_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_TYPE_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'CELL_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CELL_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CELL_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[33].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CELL_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'CELL_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CELL_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'CLLSTGENBUFRATE_SCENARIO_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTGENBUFRATE_SCENARIO_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CLLSTGENBUFRATE_SCENARIO_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTGENBUFRATE_SCENARIO_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTGENBUFRATE_SCENARIO_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTGENBUFRATE_SCENARIO_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_PART1_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_PART1_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_PART1_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[36].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_PART1_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_PART1_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_PART1_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_PART1_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_PART1_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_PART1_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[37].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_PART1_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_PART1_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_PART1_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_PART2_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_PART2_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_PART2_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[38].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_PART2_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_PART2_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_PART2_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_PART2_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_PART2_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_PART2_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[39].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_PART2_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_PART2_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_PART2_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_PART3_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_PART3_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_PART3_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[40].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_PART3_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_PART3_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_PART3_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'CALL_CHAR_PART3_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_CHAR_PART3_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_CHAR_PART3_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[41].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CALL_CHAR_PART3_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_CHAR_PART3_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_CHAR_PART3_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'AT_CALL_DUR_ROUND_MIN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'AT_CALL_DUR_ROUND_MIN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_AT_CALL_DUR_ROUND_MIN(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[42].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'AT_CALL_DUR_ROUND_MIN' field in the FML buffer.
     *
     * @return Number of values defined for 'AT_CALL_DUR_ROUND_MIN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_AT_CALL_DUR_ROUND_MIN_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'UNIT_MEASURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'UNIT_MEASURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_UNIT_MEASURE_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[43].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'UNIT_MEASURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'UNIT_MEASURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_UNIT_MEASURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'RI_CARRIER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RI_CARRIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RI_CARRIER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[44].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RI_CARRIER' field in the FML buffer.
     *
     * @return Number of values defined for 'RI_CARRIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RI_CARRIER_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'A_IMEI' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'A_IMEI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_A_IMEI(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'A_IMEI' field in the FML buffer.
     *
     * @return Number of values defined for 'A_IMEI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_A_IMEI_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'PLAN_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PLAN_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PLAN_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PLAN_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'PLAN_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PLAN_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'DISCOUNT_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DISCOUNT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DISCOUNT_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[47].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DISCOUNT_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'DISCOUNT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISCOUNT_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[47].getCount());
    }

    /**
     * Retrieves the value of the 'TOT_AMT_BFR_DISC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TOT_AMT_BFR_DISC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_TOT_AMT_BFR_DISC(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[48].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TOT_AMT_BFR_DISC' field in the FML buffer.
     *
     * @return Number of values defined for 'TOT_AMT_BFR_DISC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TOT_AMT_BFR_DISC_size() throws FMLManipulationException {
        return (this.fmlBuffer[48].getCount());
    }

    /**
     * Retrieves the value of the 'COUNTRY_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'COUNTRY_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COUNTRY_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[49].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'COUNTRY_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'COUNTRY_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COUNTRY_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[49].getCount());
    }

    /**
     * Retrieves the value of the 'RM_OPERATOR_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RM_OPERATOR_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RM_OPERATOR_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[50].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RM_OPERATOR_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'RM_OPERATOR_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RM_OPERATOR_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[50].getCount());
    }

    /**
     * Retrieves the value of the 'CALLSLSTTOLLRECROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'CALLSLSTTOLLRECROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CALLSLSTTOLLRECROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[51].getValue(0));
    }

    /**
     * Retrieves the value of the 'CLLSTTOLBUFSTART_PERIOD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTTOLBUFSTART_PERIOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CLLSTTOLBUFSTART_PERIOD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[52].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTTOLBUFSTART_PERIOD' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTTOLBUFSTART_PERIOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTTOLBUFSTART_PERIOD_size() throws FMLManipulationException {
        return (this.fmlBuffer[52].getCount());
    }

    /**
     * Retrieves the value of the 'CLLSTTOLBUFCHARGED_DURATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTTOLBUFCHARGED_DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CLLSTTOLBUFCHARGED_DURATION(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[53].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTTOLBUFCHARGED_DURATION' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTTOLBUFCHARGED_DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTTOLBUFCHARGED_DURATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[53].getCount());
    }

    /**
     * Retrieves the value of the 'CLLSTTOLBUFIM_GRANTED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTTOLBUFIM_GRANTED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CLLSTTOLBUFIM_GRANTED(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[54].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTTOLBUFIM_GRANTED' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTTOLBUFIM_GRANTED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTTOLBUFIM_GRANTED_size() throws FMLManipulationException {
        return (this.fmlBuffer[54].getCount());
    }

    /**
     * Retrieves the value of the 'CLLSTTOLBUFGROSS_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTTOLBUFGROSS_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CLLSTTOLBUFGROSS_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[55].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTTOLBUFGROSS_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTTOLBUFGROSS_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTTOLBUFGROSS_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[55].getCount());
    }

    /**
     * Retrieves the value of the 'CLLSTTOLBUFNET_AMOUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CLLSTTOLBUFNET_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CLLSTTOLBUFNET_AMOUNT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[56].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CLLSTTOLBUFNET_AMOUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'CLLSTTOLBUFNET_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CLLSTTOLBUFNET_AMOUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[56].getCount());
    }
}