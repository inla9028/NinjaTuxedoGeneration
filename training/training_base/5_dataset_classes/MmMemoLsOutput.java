package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class MmMemoLsOutput extends ServiceOutput {

    /**
     * Creates a new instance of MmMemoLsOutput.
     *
     * @throws FMLManipulationException
     */
    public MmMemoLsOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public MmMemoLsOutput() {
    }

    /**
     * Creates a new instance of MmMemoLsOutput.
     *
     * @param ds Output dataset from MmMemoLs service.
     * @throws FMLManipulationException
     */
    public MmMemoLsOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[28];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("MAX_RET_TXT_LEN", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 4, 1);
        this.fmlBuffer[5] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 5, 600);
        this.fmlBuffer[6] = new FmlField("MEMO_BAN", FmlField.TYPE_INTEGER, -1, null, 6, 600);
        this.fmlBuffer[7] = new FmlField("MEMO_ID", FmlField.TYPE_INTEGER, -1, null, 7, 600);
        this.fmlBuffer[8] = new FmlField("SYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 8, 600);
        this.fmlBuffer[9] = new FmlField("MEMO_DATE", FmlField.TYPE_STRING, 15, null, 9, 600);
        this.fmlBuffer[10] = new FmlField("MEMO_TYPE", FmlField.TYPE_STRING, 5, null, 10, 600);
        this.fmlBuffer[11] = new FmlField("MEMO_SUBSCRIBER", FmlField.TYPE_STRING, 21, null, 11, 600);
        this.fmlBuffer[12] = new FmlField("MEMO_SYSTEM_TXT", FmlField.TYPE_STRING, 181, null, 12, 600);
        this.fmlBuffer[13] = new FmlField("MEMO_SOURCE", FmlField.TYPE_BYTE, -1, null, 13, 600);
        this.fmlBuffer[14] = new FmlField("MEMO_AMT", FmlField.TYPE_DOUBLE, -1, null, 14, 600);
        this.fmlBuffer[15] = new FmlField("MEMO_MANUAL_TXT_TRUNC", FmlField.TYPE_STRING, 241, null, 15, 600);
        this.fmlBuffer[16] = new FmlField("MEMO_SYS_DATE", FmlField.TYPE_STRING, 15, null, 16, 600);
        this.fmlBuffer[17] = new FmlField("USER_ID", FmlField.TYPE_INTEGER, -1, null, 17, 600);
        this.fmlBuffer[18] = new FmlField("USER_SHORT_NAME", FmlField.TYPE_STRING, 21, null, 18, 600);
        this.fmlBuffer[19] = new FmlField("XX_ROWID", FmlField.TYPE_STRING, 19, null, 19, 600);
        this.fmlBuffer[20] = new FmlField("MEMTP_MEMO_CATEGORY", FmlField.TYPE_STRING, 5, null, 20, 600);
        this.fmlBuffer[21] = new FmlField("MEMTP_MEMO_DESCRIPTION", FmlField.TYPE_STRING, 21, null, 21, 600);
        this.fmlBuffer[22] = new FmlField("USER_TEXT_LEN", FmlField.TYPE_INTEGER, -1, null, 22, 600);
        this.fmlBuffer[23] = new FmlField("DCI_ERROR_CODE", FmlField.TYPE_INTEGER, -1, null, 23, 1);
        this.fmlBuffer[24] = new FmlField("DCI_ERROR_TYPE", FmlField.TYPE_SHORT, -1, null, 24, 1);
        this.fmlBuffer[25] = new FmlField("DCI_ERROR_TEXT", FmlField.TYPE_STRING, 81, null, 25, 1);
        this.fmlBuffer[26] = new FmlField("DCI_ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 26, 1);
        this.fmlBuffer[27] = new FmlField("DCI_MORE_ROWS", FmlField.TYPE_SHORT, -1, null, 27, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'MAX_RET_TXT_LEN' field in the FML buffer.
     *
     * @return Value of 'MAX_RET_TXT_LEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MAX_RET_TXT_LEN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[2].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTALCOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTALCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTALCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MEMO_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MEMO_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_SUBSCRIBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_SUBSCRIBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_SUBSCRIBER' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_SUBSCRIBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_SYSTEM_TXT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_SYSTEM_TXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_SYSTEM_TXT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_SYSTEM_TXT' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_SYSTEM_TXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_SYSTEM_TXT_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_SOURCE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_SOURCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_SOURCE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[13].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MEMO_SOURCE' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_SOURCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_SOURCE_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_MEMO_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_MANUAL_TXT_TRUNC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_MANUAL_TXT_TRUNC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_MANUAL_TXT_TRUNC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_MANUAL_TXT_TRUNC' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_MANUAL_TXT_TRUNC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_MANUAL_TXT_TRUNC_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_SYS_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_SYS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMO_SYS_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_SYS_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_SYS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_SYS_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'USER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'USER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_USER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'USER_SHORT_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'USER_SHORT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_USER_SHORT_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_SHORT_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_SHORT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_SHORT_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'XX_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'XX_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_XX_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'XX_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'XX_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_XX_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'MEMTP_MEMO_CATEGORY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMTP_MEMO_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMTP_MEMO_CATEGORY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMTP_MEMO_CATEGORY' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMTP_MEMO_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMTP_MEMO_CATEGORY_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'MEMTP_MEMO_DESCRIPTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMTP_MEMO_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MEMTP_MEMO_DESCRIPTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMTP_MEMO_DESCRIPTION' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMTP_MEMO_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMTP_MEMO_DESCRIPTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'USER_TEXT_LEN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'USER_TEXT_LEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_USER_TEXT_LEN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_TEXT_LEN' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_TEXT_LEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_TEXT_LEN_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_CODE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_CODE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[23].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TYPE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[24].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TEXT' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DCI_ERROR_TEXT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[25].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'DCI_ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[26].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_MORE_ROWS' field in the FML buffer.
     *
     * @return Value of 'DCI_MORE_ROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_MORE_ROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[27].getValue(0)));
    }
}