package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsGtSplTlFtrOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsGtSplTlFtrOutput.
     *
     * @throws FMLManipulationException
     */
    public CsGtSplTlFtrOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsGtSplTlFtrOutput() {
    }

    /**
     * Creates a new instance of CsGtSplTlFtrOutput.
     *
     * @param ds Output dataset from CsGtSplTlFtr service.
     * @throws FMLManipulationException
     */
    public CsGtSplTlFtrOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[5];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("FTR_VALID", FmlField.TYPE_BYTE, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("SUB_OWNER", FmlField.TYPE_STRING, 21, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("OWNER_EFFDT", FmlField.TYPE_STRING, 9, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("OWNER_EXPDT", FmlField.TYPE_STRING, 9, null, 4, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'FTR_VALID' field in the FML buffer.
     *
     * @return Value of 'FTR_VALID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FTR_VALID() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[1].getValue(0)));
    }

    /**
     * Retrieves the value of the 'SUB_OWNER' field in the FML buffer.
     *
     * @return Value of 'SUB_OWNER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_OWNER() throws FMLManipulationException {
        return ((String) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'OWNER_EFFDT' field in the FML buffer.
     *
     * @return Value of 'OWNER_EFFDT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OWNER_EFFDT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'OWNER_EXPDT' field in the FML buffer.
     *
     * @return Value of 'OWNER_EXPDT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OWNER_EXPDT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(0));
    }
}