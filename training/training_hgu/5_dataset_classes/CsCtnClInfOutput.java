package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsCtnClInfOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsCtnClInfOutput.
     *
     * @throws FMLManipulationException
     */
    public CsCtnClInfOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsCtnClInfOutput() {
    }

    /**
     * Creates a new instance of CsCtnClInfOutput.
     *
     * @param ds Output dataset from CsCtnClInf service.
     * @throws FMLManipulationException
     */
    public CsCtnClInfOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[18];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("CTN", FmlField.TYPE_STRING, 21, null, 2, 100);
        this.fmlBuffer[3] = new FmlField("SUB_STATUS", FmlField.TYPE_BYTE, -1, null, 3, 100);
        this.fmlBuffer[4] = new FmlField("COMM_START_DATE", FmlField.TYPE_STRING, 9, null, 4, 100);
        this.fmlBuffer[5] = new FmlField("COMM_END_DATE", FmlField.TYPE_STRING, 9, null, 5, 100);
        this.fmlBuffer[6] = new FmlField("REMAINING_MONTHS", FmlField.TYPE_SHORT, -1, null, 6, 100);
        this.fmlBuffer[7] = new FmlField("DEPOSIT", FmlField.TYPE_DOUBLE, -1, null, 7, 100);
        this.fmlBuffer[8] = new FmlField("DEPOSIT_INTEREST", FmlField.TYPE_DOUBLE, -1, null, 8, 100);
        this.fmlBuffer[9] = new FmlField("PENALTY", FmlField.TYPE_DOUBLE, -1, null, 9, 100);
        this.fmlBuffer[10] = new FmlField("WAIVE_INDICATOR", FmlField.TYPE_BYTE, -1, null, 10, 100);
        this.fmlBuffer[11] = new FmlField("WAIVE_REASON", FmlField.TYPE_STRING, 7, null, 11, 100);
        this.fmlBuffer[12] = new FmlField("PENALTY_BASE_AMT", FmlField.TYPE_DOUBLE, -1, null, 12, 100);
        this.fmlBuffer[13] = new FmlField("MAIN_SIP_IND", FmlField.TYPE_BYTE, -1, null, 13, 100);
        this.fmlBuffer[14] = new FmlField("TOTAL_DEP_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 14, 1);
        this.fmlBuffer[15] = new FmlField("TOTAL_DEP_INTEREST", FmlField.TYPE_DOUBLE, -1, null, 15, 1);
        this.fmlBuffer[16] = new FmlField("TOTAL_PENALTY", FmlField.TYPE_DOUBLE, -1, null, 16, 1);
        this.fmlBuffer[17] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 17, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'CTN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CTN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[2].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_size() throws FMLManipulationException {
        return (this.fmlBuffer[2].getCount());
    }

    /**
     * Retrieves the value of the 'SUB_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'SUB_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[3].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SUB_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'SUB_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUB_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'COMM_START_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'COMM_START_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMM_START_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'COMM_START_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'COMM_START_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMM_START_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'COMM_END_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'COMM_END_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMM_END_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'COMM_END_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'COMM_END_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMM_END_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'REMAINING_MONTHS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'REMAINING_MONTHS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_REMAINING_MONTHS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[6].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'REMAINING_MONTHS' field in the FML buffer.
     *
     * @return Number of values defined for 'REMAINING_MONTHS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REMAINING_MONTHS_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'DEPOSIT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DEPOSIT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT_INTEREST' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'DEPOSIT_INTEREST' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DEPOSIT_INTEREST(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT_INTEREST' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT_INTEREST' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_INTEREST_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'PENALTY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'PENALTY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_PENALTY(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PENALTY' field in the FML buffer.
     *
     * @return Number of values defined for 'PENALTY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PENALTY_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'WAIVE_INDICATOR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'WAIVE_INDICATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_WAIVE_INDICATOR(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[10].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'WAIVE_INDICATOR' field in the FML buffer.
     *
     * @return Number of values defined for 'WAIVE_INDICATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_WAIVE_INDICATOR_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'WAIVE_REASON' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'WAIVE_REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_WAIVE_REASON(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'WAIVE_REASON' field in the FML buffer.
     *
     * @return Number of values defined for 'WAIVE_REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_WAIVE_REASON_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'PENALTY_BASE_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'PENALTY_BASE_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_PENALTY_BASE_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PENALTY_BASE_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'PENALTY_BASE_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PENALTY_BASE_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'MAIN_SIP_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'MAIN_SIP_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MAIN_SIP_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[13].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MAIN_SIP_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'MAIN_SIP_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAIN_SIP_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'TOTAL_DEP_AMOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTAL_DEP_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_TOTAL_DEP_AMOUNT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[14].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTAL_DEP_INTEREST' field in the FML buffer.
     *
     * @return Value of 'TOTAL_DEP_INTEREST' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_TOTAL_DEP_INTEREST() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[15].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTAL_PENALTY' field in the FML buffer.
     *
     * @return Value of 'TOTAL_PENALTY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_TOTAL_PENALTY() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[16].getValue(0));
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC() throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(0));
    }
}