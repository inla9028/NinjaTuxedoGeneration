package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class BlGetImUsageOutput extends ServiceOutput {

    /**
     * Creates a new instance of BlGetImUsageOutput.
     *
     * @throws FMLManipulationException
     */
    public BlGetImUsageOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public BlGetImUsageOutput() {
    }

    /**
     * Creates a new instance of BlGetImUsageOutput.
     *
     * @param ds Output dataset from BlGetImUsage service.
     * @throws FMLManipulationException
     */
    public BlGetImUsageOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[14];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("UNBILUSAGE", FmlField.TYPE_DOUBLE, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 3, 600);
        this.fmlBuffer[4] = new FmlField("FEATURE_CD", FmlField.TYPE_STRING, 7, null, 4, 600);
        this.fmlBuffer[5] = new FmlField("IM_ALLOWED", FmlField.TYPE_DOUBLE, -1, null, 5, 600);
        this.fmlBuffer[6] = new FmlField("CTN_IM_USED", FmlField.TYPE_DOUBLE, -1, null, 6, 600);
        this.fmlBuffer[7] = new FmlField("CHRG_AMT", FmlField.TYPE_DOUBLE, -1, null, 7, 600);
        this.fmlBuffer[8] = new FmlField("IM_LEFT", FmlField.TYPE_DOUBLE, -1, null, 8, 600);
        this.fmlBuffer[9] = new FmlField("LAST_IM_CALL_DT", FmlField.TYPE_STRING, 15, null, 9, 600);
        this.fmlBuffer[10] = new FmlField("SERVICE_FTR_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 10, 600);
        this.fmlBuffer[11] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 11, 600);
        this.fmlBuffer[12] = new FmlField("SOC_EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 12, 600);
        this.fmlBuffer[13] = new FmlField("RECORD_TYPE", FmlField.TYPE_BYTE, -1, null, 13, 600);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'UNBILUSAGE' field in the FML buffer.
     *
     * @return Value of 'UNBILUSAGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_UNBILUSAGE() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'CHRG_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CHRG_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CHRG_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHRG_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'CHRG_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHRG_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'IM_LEFT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_LEFT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_LEFT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_LEFT' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_LEFT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_LEFT_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_IM_CALL_DT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'LAST_IM_CALL_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_IM_CALL_DT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_IM_CALL_DT' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_IM_CALL_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_IM_CALL_DT_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'SERVICE_FTR_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SERVICE_FTR_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SERVICE_FTR_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERVICE_FTR_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SERVICE_FTR_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERVICE_FTR_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'RECORD_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RECORD_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RECORD_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[13].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'RECORD_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'RECORD_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECORD_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }
}