package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class BlGetFMSumOutput extends ServiceOutput {

    /**
     * Creates a new instance of BlGetFMSumOutput.
     *
     * @throws FMLManipulationException
     */
    public BlGetFMSumOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public BlGetFMSumOutput() {
    }

    /**
     * Creates a new instance of BlGetFMSumOutput.
     *
     * @param ds Output dataset from BlGetFMSum service.
     * @throws FMLManipulationException
     */
    public BlGetFMSumOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[10];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("FM_DESCRIPTION", FmlField.TYPE_STRING, 101, null, 2, 600);
        this.fmlBuffer[3] = new FmlField("FM_BALANCE", FmlField.TYPE_DOUBLE, -1, null, 3, 600);
        this.fmlBuffer[4] = new FmlField("FM_ALLOWANCE", FmlField.TYPE_DOUBLE, -1, null, 4, 600);
        this.fmlBuffer[5] = new FmlField("FM_TYPE_S", FmlField.TYPE_STRING, 4, null, 5, 600);
        this.fmlBuffer[6] = new FmlField("FROM_DATE", FmlField.TYPE_STRING, 9, null, 6, 600);
        this.fmlBuffer[7] = new FmlField("TO_DATE", FmlField.TYPE_STRING, 9, null, 7, 600);
        this.fmlBuffer[8] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 8, 600);
        this.fmlBuffer[9] = new FmlField("FEATURE", FmlField.TYPE_STRING, 7, null, 9, 600);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'FM_DESCRIPTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FM_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FM_DESCRIPTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[2].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FM_DESCRIPTION' field in the FML buffer.
     *
     * @return Number of values defined for 'FM_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FM_DESCRIPTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[2].getCount());
    }

    /**
     * Retrieves the value of the 'FM_BALANCE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FM_BALANCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FM_BALANCE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FM_BALANCE' field in the FML buffer.
     *
     * @return Number of values defined for 'FM_BALANCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FM_BALANCE_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'FM_ALLOWANCE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FM_ALLOWANCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FM_ALLOWANCE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FM_ALLOWANCE' field in the FML buffer.
     *
     * @return Number of values defined for 'FM_ALLOWANCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FM_ALLOWANCE_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'FM_TYPE_S' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FM_TYPE_S' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FM_TYPE_S(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FM_TYPE_S' field in the FML buffer.
     *
     * @return Number of values defined for 'FM_TYPE_S' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FM_TYPE_S_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'FROM_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FROM_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FROM_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FROM_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'FROM_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FROM_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'TO_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TO_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TO_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TO_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'TO_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TO_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }
}