package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;
import no.netcom.ninja.core.subscription.SubscriptionPortOrderInfo;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsGtCtnOutput extends ServiceOutput implements SubscriptionPortOrderInfo {

    /**
     * Creates a new instance of CsGtCtnOutput.
     *
     * @throws FMLManipulationException
     */
    public CsGtCtnOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsGtCtnOutput() {
    }

    /**
     * Creates a new instance of CsGtCtnOutput.
     *
     * @param ds Output dataset from CsGtCtn service.
     * @throws FMLManipulationException
     */
    public CsGtCtnOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[358];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("CUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("SYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 4, 1);
        this.fmlBuffer[5] = new FmlField("SYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 5, 1);
        this.fmlBuffer[6] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 6, 1);
        this.fmlBuffer[7] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 7, 1);
        this.fmlBuffer[8] = new FmlField("DL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 8, 1);
        this.fmlBuffer[9] = new FmlField("DL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 9, 1);
        this.fmlBuffer[10] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 15, null, 10, 1);
        this.fmlBuffer[11] = new FmlField("INIT_ACTIVATION_DATE", FmlField.TYPE_STRING, 9, null, 11, 1);
        this.fmlBuffer[12] = new FmlField("SUB_STATUS", FmlField.TYPE_BYTE, -1, null, 12, 1);
        this.fmlBuffer[13] = new FmlField("SUB_STATUS_DATE", FmlField.TYPE_STRING, 9, null, 13, 1);
        this.fmlBuffer[14] = new FmlField("ORIGINAL_INIT_DATE", FmlField.TYPE_STRING, 15, null, 14, 1);
        this.fmlBuffer[15] = new FmlField("SUB_STATUS_LAST_ACT", FmlField.TYPE_STRING, 4, null, 15, 1);
        this.fmlBuffer[16] = new FmlField("SUB_STATUS_RSN_CODE", FmlField.TYPE_STRING, 5, null, 16, 1);
        this.fmlBuffer[17] = new FmlField("PRODUCT_TYPE", FmlField.TYPE_STRING, 4, null, 17, 1);
        this.fmlBuffer[18] = new FmlField("CUSTOMER_BAN", FmlField.TYPE_INTEGER, -1, null, 18, 1);
        this.fmlBuffer[19] = new FmlField("CTN_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 19, 1);
        this.fmlBuffer[20] = new FmlField("REQ_ST_GRACE_PERIOD", FmlField.TYPE_STRING, 9, null, 20, 1);
        this.fmlBuffer[21] = new FmlField("REQ_END_GRACE_PERIOD", FmlField.TYPE_STRING, 9, null, 21, 1);
        this.fmlBuffer[22] = new FmlField("COMMIT_START_DATE", FmlField.TYPE_STRING, 9, null, 22, 1);
        this.fmlBuffer[23] = new FmlField("COMMIT_END_DATE", FmlField.TYPE_STRING, 9, null, 23, 1);
        this.fmlBuffer[24] = new FmlField("COMMIT_REASON_CODE", FmlField.TYPE_STRING, 4, null, 24, 1);
        this.fmlBuffer[25] = new FmlField("COMMIT_ORIG_NO_MONTH", FmlField.TYPE_SHORT, -1, null, 25, 1);
        this.fmlBuffer[26] = new FmlField("SUSP_RC_RATE_TYPE", FmlField.TYPE_BYTE, -1, null, 26, 1);
        this.fmlBuffer[27] = new FmlField("CONTRACT_NO", FmlField.TYPE_STRING, 11, null, 27, 1);
        this.fmlBuffer[28] = new FmlField("CNT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 28, 1);
        this.fmlBuffer[29] = new FmlField("DEALER_CODE", FmlField.TYPE_STRING, 6, null, 29, 1);
        this.fmlBuffer[30] = new FmlField("ORG_DEALER_CODE", FmlField.TYPE_STRING, 6, null, 30, 1);
        this.fmlBuffer[31] = new FmlField("SALES_AGENT", FmlField.TYPE_STRING, 6, null, 31, 1);
        this.fmlBuffer[32] = new FmlField("ORG_SALES_AGENT", FmlField.TYPE_STRING, 6, null, 32, 1);
        this.fmlBuffer[33] = new FmlField("REQ_DEPOSIT_AMT", FmlField.TYPE_DOUBLE, -1, null, 33, 1);
        this.fmlBuffer[34] = new FmlField("LEADING_NUMBER", FmlField.TYPE_STRING, 21, null, 34, 1);
        this.fmlBuffer[35] = new FmlField("PABX_IND", FmlField.TYPE_BYTE, -1, null, 35, 1);
        this.fmlBuffer[36] = new FmlField("NEXT_CTN", FmlField.TYPE_STRING, 21, null, 36, 1);
        this.fmlBuffer[37] = new FmlField("NEXT_CTN_CHG_DATE", FmlField.TYPE_STRING, 9, null, 37, 1);
        this.fmlBuffer[38] = new FmlField("PRV_CTN", FmlField.TYPE_STRING, 21, null, 38, 1);
        this.fmlBuffer[39] = new FmlField("PRV_CTN_CHG_DATE", FmlField.TYPE_STRING, 9, null, 39, 1);
        this.fmlBuffer[40] = new FmlField("NEXT_BAN", FmlField.TYPE_INTEGER, -1, null, 40, 1);
        this.fmlBuffer[41] = new FmlField("NEXT_BAN_MOVE_DATE", FmlField.TYPE_STRING, 9, null, 41, 1);
        this.fmlBuffer[42] = new FmlField("PRV_BAN", FmlField.TYPE_INTEGER, -1, null, 42, 1);
        this.fmlBuffer[43] = new FmlField("PRV_BAN_MOVE_DATE", FmlField.TYPE_STRING, 9, null, 43, 1);
        this.fmlBuffer[44] = new FmlField("SUB_STS_ISSUE_DATE", FmlField.TYPE_STRING, 9, null, 44, 1);
        this.fmlBuffer[45] = new FmlField("ACTIVATE_WAIVE_RSN", FmlField.TYPE_STRING, 7, null, 45, 1);
        this.fmlBuffer[46] = new FmlField("EARLIEST_ACTV_DATE", FmlField.TYPE_STRING, 9, null, 46, 1);
        this.fmlBuffer[47] = new FmlField("SUB_ACTV_LOCATION", FmlField.TYPE_STRING, 5, null, 47, 1);
        this.fmlBuffer[48] = new FmlField("CUST_WATCH_LMT", FmlField.TYPE_DOUBLE, -1, null, 48, 1);
        this.fmlBuffer[49] = new FmlField("CUST_WATCH_DATE", FmlField.TYPE_STRING, 9, null, 49, 1);
        this.fmlBuffer[50] = new FmlField("BASIC_WATCH_LMT", FmlField.TYPE_DOUBLE, -1, null, 50, 1);
        this.fmlBuffer[51] = new FmlField("CREDIT_WATCH_PIN_CD", FmlField.TYPE_SHORT, -1, null, 51, 1);
        this.fmlBuffer[52] = new FmlField("SUB_MARKET_CODE", FmlField.TYPE_STRING, 4, null, 52, 1);
        this.fmlBuffer[53] = new FmlField("LIMIT_RESERVED_DAYS", FmlField.TYPE_SHORT, -1, null, 53, 1);
        this.fmlBuffer[54] = new FmlField("FF_EXPIRATION_DATE", FmlField.TYPE_STRING, 15, null, 54, 1);
        this.fmlBuffer[55] = new FmlField("FLEX_IND", FmlField.TYPE_BYTE, -1, null, 55, 1);
        this.fmlBuffer[56] = new FmlField("DUO_IND", FmlField.TYPE_BYTE, -1, null, 56, 1);
        this.fmlBuffer[57] = new FmlField("LISTED_IND", FmlField.TYPE_BYTE, -1, null, 57, 1);
        this.fmlBuffer[58] = new FmlField("SUB_DEPARTMENT_CD", FmlField.TYPE_STRING, 5, null, 58, 1);
        this.fmlBuffer[59] = new FmlField("LAST_SUBS_DISC_DT", FmlField.TYPE_STRING, 9, null, 59, 1);
        this.fmlBuffer[60] = new FmlField("LAST_SUBS_DISC_DT_UD", FmlField.TYPE_STRING, 9, null, 60, 1);
        this.fmlBuffer[61] = new FmlField("LAST_SUBSCR_DISC_SN", FmlField.TYPE_SHORT, -1, null, 61, 1);
        this.fmlBuffer[62] = new FmlField("LAST_SUBSCR_DISC_SN_UD", FmlField.TYPE_SHORT, -1, null, 62, 1);
        this.fmlBuffer[63] = new FmlField("PNI", FmlField.TYPE_STRING, 11, null, 63, 1);
        this.fmlBuffer[64] = new FmlField("RMS_REF_STORE_ID", FmlField.TYPE_STRING, 5, null, 64, 1);
        this.fmlBuffer[65] = new FmlField("RMS_REF_TYPE", FmlField.TYPE_BYTE, -1, null, 65, 1);
        this.fmlBuffer[66] = new FmlField("RMS_REF_OD", FmlField.TYPE_INTEGER, -1, null, 66, 1);
        this.fmlBuffer[67] = new FmlField("DLR_ACT_FEE", FmlField.TYPE_DOUBLE, -1, null, 67, 1);
        this.fmlBuffer[68] = new FmlField("PREP_AMOUNT", FmlField.TYPE_DOUBLE, -1, null, 68, 1);
        this.fmlBuffer[69] = new FmlField("SUBSCRIBER_ID", FmlField.TYPE_INTEGER, -1, null, 69, 1);
        this.fmlBuffer[70] = new FmlField("SUB_LANG", FmlField.TYPE_STRING, 3, null, 70, 1);
        this.fmlBuffer[71] = new FmlField("SMS_RCV_STYLE_CODE", FmlField.TYPE_STRING, 3, null, 71, 1);
        this.fmlBuffer[72] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 72, 1);
        this.fmlBuffer[73] = new FmlField("ALLOW_ADVERTISING_IND", FmlField.TYPE_BYTE, -1, null, 73, 1);
        this.fmlBuffer[74] = new FmlField("IVR_WRONG_ACCESS_NO", FmlField.TYPE_SHORT, -1, null, 74, 1);
        this.fmlBuffer[75] = new FmlField("THRESHOLD_AMT", FmlField.TYPE_DOUBLE, -1, null, 75, 1);
        this.fmlBuffer[76] = new FmlField("PUBLISH_LEVEL", FmlField.TYPE_STRING, 31, null, 76, 1);
        this.fmlBuffer[77] = new FmlField("AUTO_RELEASE_IND", FmlField.TYPE_BYTE, -1, null, 77, 1);
        this.fmlBuffer[78] = new FmlField("CUST_WATCH_EFF_DATE", FmlField.TYPE_STRING, 9, null, 78, 1);
        this.fmlBuffer[79] = new FmlField("CUST_WATCH_EXP_DATE", FmlField.TYPE_STRING, 9, null, 79, 1);
        this.fmlBuffer[80] = new FmlField("OPERATOR_CW_LMT", FmlField.TYPE_DOUBLE, -1, null, 80, 1);
        this.fmlBuffer[81] = new FmlField("SEND_SMS_FOR_MATCH", FmlField.TYPE_BYTE, -1, null, 81, 1);
        this.fmlBuffer[82] = new FmlField("CPS_STATUS", FmlField.TYPE_BYTE, -1, null, 82, 1);
        this.fmlBuffer[83] = new FmlField("CPS_TRANSACTION", FmlField.TYPE_SHORT, -1, null, 83, 1);
        this.fmlBuffer[84] = new FmlField("CPS_TYPE", FmlField.TYPE_SHORT, -1, null, 84, 1);
        this.fmlBuffer[85] = new FmlField("ISP_PASS", FmlField.TYPE_STRING, 31, null, 85, 1);
        this.fmlBuffer[86] = new FmlField("ISP_TYPE", FmlField.TYPE_STRING, 3, null, 86, 1);
        this.fmlBuffer[87] = new FmlField("OPERATOR_TMP_DATE", FmlField.TYPE_STRING, 9, null, 87, 1);
        this.fmlBuffer[88] = new FmlField("OPERATOR_TMP_LMT", FmlField.TYPE_DOUBLE, -1, null, 88, 1);
        this.fmlBuffer[89] = new FmlField("SUB_ORG_CD", FmlField.TYPE_STRING, 11, null, 89, 1);
        this.fmlBuffer[90] = new FmlField("ORG_MEMBER_NO", FmlField.TYPE_STRING, 21, null, 90, 1);
        this.fmlBuffer[91] = new FmlField("FIXED_AS_GSM_IND", FmlField.TYPE_BYTE, -1, null, 91, 1);
        this.fmlBuffer[92] = new FmlField("EARLY_PORT_OUT", FmlField.TYPE_BYTE, -1, null, 92, 1);
        this.fmlBuffer[93] = new FmlField("EARLY_PO_WAIVE_IND", FmlField.TYPE_BYTE, -1, null, 93, 1);
        this.fmlBuffer[94] = new FmlField("EARLY_PO_WAIVE_REASON", FmlField.TYPE_STRING, 7, null, 94, 1);
        this.fmlBuffer[95] = new FmlField("INTERNAL_CIRCUIT_ID", FmlField.TYPE_STRING, 21, null, 95, 1);
        this.fmlBuffer[96] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 96, 1);
        this.fmlBuffer[97] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 97, 1);
        this.fmlBuffer[98] = new FmlField("LINK_MODE", FmlField.TYPE_BYTE, -1, null, 98, 20);
        this.fmlBuffer[99] = new FmlField("LINK_BAN", FmlField.TYPE_INTEGER, -1, null, 99, 20);
        this.fmlBuffer[100] = new FmlField("LINK_SUBSCRIBER", FmlField.TYPE_STRING, 21, null, 100, 20);
        this.fmlBuffer[101] = new FmlField("LINK_ROW_ID", FmlField.TYPE_STRING, 19, null, 101, 20);
        this.fmlBuffer[102] = new FmlField("LINK_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 102, 20);
        this.fmlBuffer[103] = new FmlField("LNKRECCUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 103, 20);
        this.fmlBuffer[104] = new FmlField("LNKRECBAN", FmlField.TYPE_INTEGER, -1, null, 104, 20);
        this.fmlBuffer[105] = new FmlField("LNKRECSUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 105, 20);
        this.fmlBuffer[106] = new FmlField("LINK_TYPE", FmlField.TYPE_BYTE, -1, null, 106, 20);
        this.fmlBuffer[107] = new FmlField("LNKRECEFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 107, 20);
        this.fmlBuffer[108] = new FmlField("FOREIGN_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 108, 20);
        this.fmlBuffer[109] = new FmlField("BILLING_IND", FmlField.TYPE_BYTE, -1, null, 109, 20);
        this.fmlBuffer[110] = new FmlField("MAILING_IND", FmlField.TYPE_BYTE, -1, null, 110, 20);
        this.fmlBuffer[111] = new FmlField("USER_IND", FmlField.TYPE_BYTE, -1, null, 111, 20);
        this.fmlBuffer[112] = new FmlField("LINK_BILLING_IND", FmlField.TYPE_BYTE, -1, null, 112, 20);
        this.fmlBuffer[113] = new FmlField("LINK_MAILING_IND", FmlField.TYPE_BYTE, -1, null, 113, 20);
        this.fmlBuffer[114] = new FmlField("LINK_USER_IND", FmlField.TYPE_BYTE, -1, null, 114, 20);
        this.fmlBuffer[115] = new FmlField("NM_MODE", FmlField.TYPE_BYTE, -1, null, 115, 20);
        this.fmlBuffer[116] = new FmlField("NM_UP_TYPE", FmlField.TYPE_BYTE, -1, null, 116, 20);
        this.fmlBuffer[117] = new FmlField("NM_EXPIRE_DATE", FmlField.TYPE_STRING, 9, null, 117, 20);
        this.fmlBuffer[118] = new FmlField("NAMERECROWID", FmlField.TYPE_STRING, 19, null, 118, 20);
        this.fmlBuffer[119] = new FmlField("NAME_ID", FmlField.TYPE_INTEGER, -1, null, 119, 20);
        this.fmlBuffer[120] = new FmlField("NAMERECSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 120, 20);
        this.fmlBuffer[121] = new FmlField("NAMERECSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 121, 20);
        this.fmlBuffer[122] = new FmlField("NAMERECOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 122, 20);
        this.fmlBuffer[123] = new FmlField("NAMERECAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 123, 20);
        this.fmlBuffer[124] = new FmlField("NAMERECDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 124, 20);
        this.fmlBuffer[125] = new FmlField("NAMERECDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 125, 20);
        this.fmlBuffer[126] = new FmlField("CONTROL_NAME", FmlField.TYPE_STRING, 41, null, 126, 20);
        this.fmlBuffer[127] = new FmlField("LAST_BUSINESS_NAME", FmlField.TYPE_STRING, 61, null, 127, 20);
        this.fmlBuffer[128] = new FmlField("FIRST_NAME", FmlField.TYPE_STRING, 33, null, 128, 20);
        this.fmlBuffer[129] = new FmlField("ADDITIONAL_TITLE", FmlField.TYPE_STRING, 61, null, 129, 20);
        this.fmlBuffer[130] = new FmlField("NAME_FORMAT", FmlField.TYPE_BYTE, -1, null, 130, 20);
        this.fmlBuffer[131] = new FmlField("BIRTH_DATE", FmlField.TYPE_STRING, 9, null, 131, 20);
        this.fmlBuffer[132] = new FmlField("IDENTIFY", FmlField.TYPE_STRING, 21, null, 132, 20);
        this.fmlBuffer[133] = new FmlField("ID_TYPE", FmlField.TYPE_STRING, 5, null, 133, 20);
        this.fmlBuffer[134] = new FmlField("COMP_REG_ID", FmlField.TYPE_STRING, 51, null, 134, 20);
        this.fmlBuffer[135] = new FmlField("KOB", FmlField.TYPE_DOUBLE, -1, null, 135, 20);
        this.fmlBuffer[136] = new FmlField("MIDDLE_INITIAL", FmlField.TYPE_STRING, 33, null, 136, 20);
        this.fmlBuffer[137] = new FmlField("TELEMARKET_ID", FmlField.TYPE_STRING, 11, null, 137, 20);
        this.fmlBuffer[138] = new FmlField("NAMERECCONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 138, 20);
        this.fmlBuffer[139] = new FmlField("NAME_TITLE_SALUTATION", FmlField.TYPE_STRING, 21, null, 139, 20);
        this.fmlBuffer[140] = new FmlField("NATIONALITY_CD", FmlField.TYPE_STRING, 4, null, 140, 20);
        this.fmlBuffer[141] = new FmlField("GENDER", FmlField.TYPE_BYTE, -1, null, 141, 20);
        this.fmlBuffer[142] = new FmlField("MARITAL_STATUS", FmlField.TYPE_STRING, 5, null, 142, 20);
        this.fmlBuffer[143] = new FmlField("ROLE_IND", FmlField.TYPE_BYTE, -1, null, 143, 20);
        this.fmlBuffer[144] = new FmlField("TPID", FmlField.TYPE_STRING, 37, null, 144, 20);
        this.fmlBuffer[145] = new FmlField("E_FAKTURA_REF", FmlField.TYPE_INTEGER, -1, null, 145, 20);
        this.fmlBuffer[146] = new FmlField("ADR_MODE", FmlField.TYPE_BYTE, -1, null, 146, 20);
        this.fmlBuffer[147] = new FmlField("ADR_UP_TYPE", FmlField.TYPE_BYTE, -1, null, 147, 20);
        this.fmlBuffer[148] = new FmlField("ADR_EXPIRE_DATE", FmlField.TYPE_STRING, 9, null, 148, 20);
        this.fmlBuffer[149] = new FmlField("ADDRESSRECROWID", FmlField.TYPE_STRING, 19, null, 149, 20);
        this.fmlBuffer[150] = new FmlField("ADDRESS_ID", FmlField.TYPE_INTEGER, -1, null, 150, 20);
        this.fmlBuffer[151] = new FmlField("ADDRESSRECSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 151, 20);
        this.fmlBuffer[152] = new FmlField("ADDRESSRECSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 152, 20);
        this.fmlBuffer[153] = new FmlField("ADDRESSRECOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 153, 20);
        this.fmlBuffer[154] = new FmlField("ADDRESSRECAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 154, 20);
        this.fmlBuffer[155] = new FmlField("ADDRESSRECDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 155, 20);
        this.fmlBuffer[156] = new FmlField("ADDRESSRECDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 156, 20);
        this.fmlBuffer[157] = new FmlField("ADR_TYPE", FmlField.TYPE_BYTE, -1, null, 157, 20);
        this.fmlBuffer[158] = new FmlField("ADR_STATUS", FmlField.TYPE_BYTE, -1, null, 158, 20);
        this.fmlBuffer[159] = new FmlField("ADR_STATUS_DATE", FmlField.TYPE_STRING, 9, null, 159, 20);
        this.fmlBuffer[160] = new FmlField("ADR_SECONDARY_LN", FmlField.TYPE_STRING, 101, null, 160, 20);
        this.fmlBuffer[161] = new FmlField("ADR_PRIMARY_LN", FmlField.TYPE_STRING, 101, null, 161, 20);
        this.fmlBuffer[162] = new FmlField("ADR_CITY", FmlField.TYPE_STRING, 40, null, 162, 20);
        this.fmlBuffer[163] = new FmlField("ADR_ZIP", FmlField.TYPE_STRING, 10, null, 163, 20);
        this.fmlBuffer[164] = new FmlField("ADR_HOUSE_NO", FmlField.TYPE_STRING, 21, null, 164, 20);
        this.fmlBuffer[165] = new FmlField("ADR_STREET_NAME", FmlField.TYPE_STRING, 61, null, 165, 20);
        this.fmlBuffer[166] = new FmlField("ADR_DIRECTION", FmlField.TYPE_STRING, 3, null, 166, 20);
        this.fmlBuffer[167] = new FmlField("ADR_POB", FmlField.TYPE_STRING, 11, null, 167, 20);
        this.fmlBuffer[168] = new FmlField("ADR_COUNTRY", FmlField.TYPE_STRING, 4, null, 168, 20);
        this.fmlBuffer[169] = new FmlField("ADR_HOUSE_LETTER", FmlField.TYPE_STRING, 3, null, 169, 20);
        this.fmlBuffer[170] = new FmlField("ADR_STORY", FmlField.TYPE_STRING, 3, null, 170, 20);
        this.fmlBuffer[171] = new FmlField("ADR_DOOR_NO", FmlField.TYPE_STRING, 5, null, 171, 20);
        this.fmlBuffer[172] = new FmlField("ADR_EMAIL", FmlField.TYPE_STRING, 151, null, 172, 20);
        this.fmlBuffer[173] = new FmlField("SINCE_DATE", FmlField.TYPE_STRING, 9, null, 173, 20);
        this.fmlBuffer[174] = new FmlField("ADR_DISTRICT", FmlField.TYPE_STRING, 41, null, 174, 20);
        this.fmlBuffer[175] = new FmlField("CO_IND", FmlField.TYPE_BYTE, -1, null, 175, 20);
        this.fmlBuffer[176] = new FmlField("ADDRESSRECCONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 176, 20);
        this.fmlBuffer[177] = new FmlField("ACCOMMODATION_TYPE", FmlField.TYPE_STRING, 5, null, 177, 20);
        this.fmlBuffer[178] = new FmlField("COUNTY_CODE", FmlField.TYPE_STRING, 3, null, 178, 20);
        this.fmlBuffer[179] = new FmlField("COMMUNITY_NAME", FmlField.TYPE_STRING, 31, null, 179, 20);
        this.fmlBuffer[180] = new FmlField("ADR_CO_NAME", FmlField.TYPE_STRING, 61, null, 180, 20);
        this.fmlBuffer[181] = new FmlField("ADR_HOUSE_NAME", FmlField.TYPE_STRING, 61, null, 181, 20);
        this.fmlBuffer[182] = new FmlField("ADR_P1", FmlField.TYPE_STRING, 61, null, 182, 20);
        this.fmlBuffer[183] = new FmlField("ADR_P2", FmlField.TYPE_STRING, 61, null, 183, 20);
        this.fmlBuffer[184] = new FmlField("ADR_P3", FmlField.TYPE_STRING, 61, null, 184, 20);
        this.fmlBuffer[185] = new FmlField("ADR_P4", FmlField.TYPE_STRING, 61, null, 185, 20);
        this.fmlBuffer[186] = new FmlField("ADR_P5", FmlField.TYPE_STRING, 61, null, 186, 20);
        this.fmlBuffer[187] = new FmlField("ADR_P6", FmlField.TYPE_STRING, 61, null, 187, 20);
        this.fmlBuffer[188] = new FmlField("ADR_P7", FmlField.TYPE_STRING, 61, null, 188, 20);
        this.fmlBuffer[189] = new FmlField("ADR_P8", FmlField.TYPE_STRING, 61, null, 189, 20);
        this.fmlBuffer[190] = new FmlField("ADR_P9", FmlField.TYPE_STRING, 61, null, 190, 20);
        this.fmlBuffer[191] = new FmlField("ADR_P10", FmlField.TYPE_STRING, 61, null, 191, 20);
        this.fmlBuffer[192] = new FmlField("FUTURE_REQ_COUNT", FmlField.TYPE_INTEGER, -1, null, 192, 1);
        this.fmlBuffer[193] = new FmlField("LINKED_IND", FmlField.TYPE_BYTE, -1, null, 193, 1);
        this.fmlBuffer[194] = new FmlField("PCONTRACTROWID", FmlField.TYPE_STRING, 19, null, 194, 1);
        this.fmlBuffer[195] = new FmlField("PCONTRACTBAN", FmlField.TYPE_INTEGER, -1, null, 195, 1);
        this.fmlBuffer[196] = new FmlField("PCONTRACTSUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 196, 1);
        this.fmlBuffer[197] = new FmlField("PCONTRACTCNT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 197, 1);
        this.fmlBuffer[198] = new FmlField("PCONTRACTSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 198, 1);
        this.fmlBuffer[199] = new FmlField("PCONTRACTSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 199, 1);
        this.fmlBuffer[200] = new FmlField("PCONTRACTOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 200, 1);
        this.fmlBuffer[201] = new FmlField("PCONTRACTAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 201, 1);
        this.fmlBuffer[202] = new FmlField("PCONTRACTDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 202, 1);
        this.fmlBuffer[203] = new FmlField("PCONTRACTDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 203, 1);
        this.fmlBuffer[204] = new FmlField("ENTRY_EFF_DATE", FmlField.TYPE_STRING, 9, null, 204, 1);
        this.fmlBuffer[205] = new FmlField("PCONTRACTCONTRACT_NO", FmlField.TYPE_STRING, 11, null, 205, 1);
        this.fmlBuffer[206] = new FmlField("PCONTRACTCOMMIT_START_DATE", FmlField.TYPE_STRING, 9, null, 206, 1);
        this.fmlBuffer[207] = new FmlField("PCONTRACTCOMMIT_END_DATE", FmlField.TYPE_STRING, 9, null, 207, 1);
        this.fmlBuffer[208] = new FmlField("COMMIT_REASON_CD", FmlField.TYPE_STRING, 4, null, 208, 1);
        this.fmlBuffer[209] = new FmlField("PCONTRACTCOMMIT_ORIG_NO_MONTH", FmlField.TYPE_SHORT, -1, null, 209, 1);
        this.fmlBuffer[210] = new FmlField("PAPER_WORK_STATUS", FmlField.TYPE_STRING, 3, null, 210, 1);
        this.fmlBuffer[211] = new FmlField("PAPER_WORK_REQUIRED", FmlField.TYPE_BYTE, -1, null, 211, 1);
        this.fmlBuffer[212] = new FmlField("PAPER_WORK_DATE", FmlField.TYPE_STRING, 9, null, 212, 1);
        this.fmlBuffer[213] = new FmlField("PAPER_WORK_REF_NO", FmlField.TYPE_STRING, 12, null, 213, 1);
        this.fmlBuffer[214] = new FmlField("PAPER_WORK_TRNS_NO", FmlField.TYPE_STRING, 26, null, 214, 1);
        this.fmlBuffer[215] = new FmlField("DELIVERY_TYPE", FmlField.TYPE_BYTE, -1, null, 215, 1);
        this.fmlBuffer[216] = new FmlField("PNPINFOBUFFROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 216, 1);
        this.fmlBuffer[217] = new FmlField("NPNUMINFORECROWID", FmlField.TYPE_STRING, 19, null, 217, 500);
        this.fmlBuffer[218] = new FmlField("PORT_NUMBER", FmlField.TYPE_STRING, 21, null, 218, 500);
        this.fmlBuffer[219] = new FmlField("NPNUMINFORECEFFECTIVE_DATE", FmlField.TYPE_STRING, 15, null, 219, 500);
        this.fmlBuffer[220] = new FmlField("NPNUMINFORECSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 220, 500);
        this.fmlBuffer[221] = new FmlField("NPNUMINFORECSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 221, 500);
        this.fmlBuffer[222] = new FmlField("NPNUMINFORECOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 222, 500);
        this.fmlBuffer[223] = new FmlField("NPNUMINFORECAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 223, 500);
        this.fmlBuffer[224] = new FmlField("NPNUMINFORECDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 224, 500);
        this.fmlBuffer[225] = new FmlField("NPNUMINFORECDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 225, 500);
        this.fmlBuffer[226] = new FmlField("EXPIRATION_DATE", FmlField.TYPE_STRING, 15, null, 226, 500);
        this.fmlBuffer[227] = new FmlField("INT_ORDER_ID", FmlField.TYPE_DOUBLE, -1, null, 227, 500);
        this.fmlBuffer[228] = new FmlField("ORG_CUSTOMER_ID", FmlField.TYPE_STRING, 61, null, 228, 500);
        this.fmlBuffer[229] = new FmlField("PORT_IND", FmlField.TYPE_BYTE, -1, null, 229, 500);
        this.fmlBuffer[230] = new FmlField("NUMBER_TYPE", FmlField.TYPE_BYTE, -1, null, 230, 500);
        this.fmlBuffer[231] = new FmlField("PORT_REQUEST_DATE", FmlField.TYPE_STRING, 15, null, 231, 500);
        this.fmlBuffer[232] = new FmlField("ORG_OPERATOR", FmlField.TYPE_STRING, 6, null, 232, 500);
        this.fmlBuffer[233] = new FmlField("NPNUMINFORECSUBSCRIBER_ID", FmlField.TYPE_INTEGER, -1, null, 233, 500);
        this.fmlBuffer[234] = new FmlField("LAST_INT_ORD_ID", FmlField.TYPE_DOUBLE, -1, null, 234, 500);
        this.fmlBuffer[235] = new FmlField("FUNCTION_PORT_IND", FmlField.TYPE_BYTE, -1, null, 235, 500);
        this.fmlBuffer[236] = new FmlField("PASSIVE_IND", FmlField.TYPE_BYTE, -1, null, 236, 500);
        this.fmlBuffer[237] = new FmlField("AUTO_CONFIRM", FmlField.TYPE_BYTE, -1, null, 237, 500);
        this.fmlBuffer[238] = new FmlField("TEMPORARY_MSISDN", FmlField.TYPE_STRING, 21, null, 238, 500);
        this.fmlBuffer[239] = new FmlField("HANDLE_MODE", FmlField.TYPE_BYTE, -1, null, 239, 500);
        this.fmlBuffer[240] = new FmlField("SEND_IND", FmlField.TYPE_BYTE, -1, null, 240, 500);
        this.fmlBuffer[241] = new FmlField("ORDID_STR", FmlField.TYPE_STRING, 21, null, 241, 500);
        this.fmlBuffer[242] = new FmlField("LAST_ORDID_STR", FmlField.TYPE_STRING, 21, null, 242, 500);
        this.fmlBuffer[243] = new FmlField("ICC", FmlField.TYPE_STRING, 61, null, 243, 500);
        this.fmlBuffer[244] = new FmlField("CUSTOMER_NAME", FmlField.TYPE_STRING, 255, null, 244, 500);
        this.fmlBuffer[245] = new FmlField("NPINFOBUFFCUSTOMER_ID", FmlField.TYPE_STRING, 61, null, 245, 500);
        this.fmlBuffer[246] = new FmlField("SERVICE_PROVIDER", FmlField.TYPE_STRING, 6, null, 246, 500);
        this.fmlBuffer[247] = new FmlField("PNPADDINFOBUFROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 247, 1);
        this.fmlBuffer[248] = new FmlField("CURR_SERV_OPER", FmlField.TYPE_STRING, 6, null, 248, 500);
        this.fmlBuffer[249] = new FmlField("NPTRXDETRECROWID", FmlField.TYPE_STRING, 19, null, 249, 500);
        this.fmlBuffer[250] = new FmlField("TRX_CODE", FmlField.TYPE_SHORT, -1, null, 250, 500);
        this.fmlBuffer[251] = new FmlField("NPTRXDETRECINT_ORDER_ID", FmlField.TYPE_DOUBLE, -1, null, 251, 500);
        this.fmlBuffer[252] = new FmlField("TRX_SOURCE", FmlField.TYPE_STRING, 4, null, 252, 500);
        this.fmlBuffer[253] = new FmlField("NPTRXDETRECSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 253, 500);
        this.fmlBuffer[254] = new FmlField("NPTRXDETRECSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 254, 500);
        this.fmlBuffer[255] = new FmlField("NPTRXDETRECOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 255, 500);
        this.fmlBuffer[256] = new FmlField("NPTRXDETRECAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 256, 500);
        this.fmlBuffer[257] = new FmlField("NPTRXDETRECDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 257, 500);
        this.fmlBuffer[258] = new FmlField("NPTRXDETRECDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 258, 500);
        this.fmlBuffer[259] = new FmlField("EXT_UNIQUE_ID", FmlField.TYPE_STRING, 13, null, 259, 500);
        this.fmlBuffer[260] = new FmlField("INT_TRX_SEQ", FmlField.TYPE_INTEGER, -1, null, 260, 500);
        this.fmlBuffer[261] = new FmlField("INITI_ORDER_SEQ", FmlField.TYPE_INTEGER, -1, null, 261, 500);
        this.fmlBuffer[262] = new FmlField("CONT_CATEGORY", FmlField.TYPE_STRING, 4, null, 262, 500);
        this.fmlBuffer[263] = new FmlField("EXT_ORDER_ID", FmlField.TYPE_DOUBLE, -1, null, 263, 500);
        this.fmlBuffer[264] = new FmlField("TRX_DATETIME", FmlField.TYPE_STRING, 15, null, 264, 500);
        this.fmlBuffer[265] = new FmlField("TRX_STATUS", FmlField.TYPE_BYTE, -1, null, 265, 500);
        this.fmlBuffer[266] = new FmlField("TRX_STS_DATE", FmlField.TYPE_STRING, 15, null, 266, 500);
        this.fmlBuffer[267] = new FmlField("NPTRXDETRECCUSTOMER_NAME", FmlField.TYPE_STRING, 255, null, 267, 500);
        this.fmlBuffer[268] = new FmlField("NPTRXDETRECCUSTOMER_ID", FmlField.TYPE_STRING, 61, null, 268, 500);
        this.fmlBuffer[269] = new FmlField("NPTRXDETRECNUMBER_TYPE", FmlField.TYPE_STRING, 255, null, 269, 500);
        this.fmlBuffer[270] = new FmlField("NEW_NUM_TYPE", FmlField.TYPE_STRING, 255, null, 270, 500);
        this.fmlBuffer[271] = new FmlField("MAIN_NUMBER", FmlField.TYPE_STRING, 21, null, 271, 500);
        this.fmlBuffer[272] = new FmlField("ADDITIONAL_NUMBER_1", FmlField.TYPE_STRING, 255, null, 272, 500);
        this.fmlBuffer[273] = new FmlField("ADDITIONAL_NUMBER_2", FmlField.TYPE_STRING, 255, null, 273, 500);
        this.fmlBuffer[274] = new FmlField("ADDITIONAL_NUMBER_3", FmlField.TYPE_STRING, 255, null, 274, 500);
        this.fmlBuffer[275] = new FmlField("ADDITIONAL_NUMBER_4", FmlField.TYPE_STRING, 255, null, 275, 500);
        this.fmlBuffer[276] = new FmlField("ADDITIONAL_NUMBER_5", FmlField.TYPE_STRING, 255, null, 276, 500);
        this.fmlBuffer[277] = new FmlField("ADDITIONAL_NUMBER_6", FmlField.TYPE_STRING, 255, null, 277, 500);
        this.fmlBuffer[278] = new FmlField("ADDITIONAL_NUMBER_7", FmlField.TYPE_STRING, 255, null, 278, 500);
        this.fmlBuffer[279] = new FmlField("ADDITIONAL_NUMBER_8", FmlField.TYPE_STRING, 255, null, 279, 500);
        this.fmlBuffer[280] = new FmlField("ADDITIONAL_NUMBER_9", FmlField.TYPE_STRING, 255, null, 280, 500);
        this.fmlBuffer[281] = new FmlField("ADDITIONAL_NUMBER_10", FmlField.TYPE_STRING, 255, null, 281, 500);
        this.fmlBuffer[282] = new FmlField("PRIMARY_NUM", FmlField.TYPE_STRING, 21, null, 282, 500);
        this.fmlBuffer[283] = new FmlField("REQUEST_EXEC_DATE", FmlField.TYPE_STRING, 15, null, 283, 500);
        this.fmlBuffer[284] = new FmlField("CONF_EXEC_DATE", FmlField.TYPE_STRING, 15, null, 284, 500);
        this.fmlBuffer[285] = new FmlField("CONF_STATUS", FmlField.TYPE_STRING, 4, null, 285, 500);
        this.fmlBuffer[286] = new FmlField("ERROR_UNIQ_ID", FmlField.TYPE_INTEGER, -1, null, 286, 500);
        this.fmlBuffer[287] = new FmlField("SERIES_UNIQ_ID", FmlField.TYPE_INTEGER, -1, null, 287, 500);
        this.fmlBuffer[288] = new FmlField("NPTRXDETRECCURR_SERV_OPER", FmlField.TYPE_STRING, 6, null, 288, 500);
        this.fmlBuffer[289] = new FmlField("RECIP_SERV_OPER", FmlField.TYPE_STRING, 6, null, 289, 500);
        this.fmlBuffer[290] = new FmlField("CURR_NET_OPER", FmlField.TYPE_STRING, 6, null, 290, 500);
        this.fmlBuffer[291] = new FmlField("RECIP_NET_OPER", FmlField.TYPE_STRING, 6, null, 291, 500);
        this.fmlBuffer[292] = new FmlField("INITI_ORDER_TP", FmlField.TYPE_STRING, 6, null, 292, 500);
        this.fmlBuffer[293] = new FmlField("TEXT_COMMENT", FmlField.TYPE_STRING, 256, null, 293, 500);
        this.fmlBuffer[294] = new FmlField("DELAY_IND", FmlField.TYPE_BYTE, -1, null, 294, 500);
        this.fmlBuffer[295] = new FmlField("FILE_NAME", FmlField.TYPE_STRING, 256, null, 295, 500);
        this.fmlBuffer[296] = new FmlField("MUNICIPALITY", FmlField.TYPE_STRING, 4, null, 296, 500);
        this.fmlBuffer[297] = new FmlField("EXT_TRX_STS", FmlField.TYPE_STRING, 11, null, 297, 500);
        this.fmlBuffer[298] = new FmlField("LAST_TRX_STS", FmlField.TYPE_STRING, 11, null, 298, 500);
        this.fmlBuffer[299] = new FmlField("INITI_TIMESTAMP", FmlField.TYPE_STRING, 15, null, 299, 500);
        this.fmlBuffer[300] = new FmlField("OTHER_OPERATOR", FmlField.TYPE_STRING, 6, null, 300, 500);
        this.fmlBuffer[301] = new FmlField("POINT_OF_CONNECTION", FmlField.TYPE_STRING, 61, null, 301, 500);
        this.fmlBuffer[302] = new FmlField("RANGE_UPD_TP", FmlField.TYPE_BYTE, -1, null, 302, 500);
        this.fmlBuffer[303] = new FmlField("CSNPSPC", FmlField.TYPE_STRING, 7, null, 303, 500);
        this.fmlBuffer[304] = new FmlField("ROUTING_INFO", FmlField.TYPE_STRING, 9, null, 304, 500);
        this.fmlBuffer[305] = new FmlField("RATING_TP", FmlField.TYPE_STRING, 5, null, 305, 500);
        this.fmlBuffer[306] = new FmlField("MAN_AUT", FmlField.TYPE_BYTE, -1, null, 306, 500);
        this.fmlBuffer[307] = new FmlField("TERM_CONF_DATE", FmlField.TYPE_STRING, 9, null, 307, 500);
        this.fmlBuffer[308] = new FmlField("NPTRXDETRECSERVICE_PROVIDER", FmlField.TYPE_STRING, 6, null, 308, 500);
        this.fmlBuffer[309] = new FmlField("NP_CARD_STS", FmlField.TYPE_STRING, 13, null, 309, 500);
        this.fmlBuffer[310] = new FmlField("CHARGING_INFO", FmlField.TYPE_STRING, 9, null, 310, 500);
        this.fmlBuffer[311] = new FmlField("DIRECTORY_INFO", FmlField.TYPE_STRING, 14, null, 311, 500);
        this.fmlBuffer[312] = new FmlField("NUM_PORTED_IND", FmlField.TYPE_BYTE, -1, null, 312, 500);
        this.fmlBuffer[313] = new FmlField("PORTING_CASE", FmlField.TYPE_STRING, 61, null, 313, 500);
        this.fmlBuffer[314] = new FmlField("PORTING_TP", FmlField.TYPE_STRING, 61, null, 314, 500);
        this.fmlBuffer[315] = new FmlField("RANGE", FmlField.TYPE_STRING, 18, null, 315, 500);
        this.fmlBuffer[316] = new FmlField("SERIES_COUNT", FmlField.TYPE_STRING, 4, null, 316, 500);
        this.fmlBuffer[317] = new FmlField("EIDNODSIGN", FmlField.TYPE_STRING, 21, null, 317, 500);
        this.fmlBuffer[318] = new FmlField("EIDNTYP", FmlField.TYPE_STRING, 21, null, 318, 500);
        this.fmlBuffer[319] = new FmlField("EIDNTYPNUMB", FmlField.TYPE_STRING, 21, null, 319, 500);
        this.fmlBuffer[320] = new FmlField("NEIDNODSIGN", FmlField.TYPE_STRING, 21, null, 320, 500);
        this.fmlBuffer[321] = new FmlField("NEIDNTYP", FmlField.TYPE_STRING, 21, null, 321, 500);
        this.fmlBuffer[322] = new FmlField("NEIDNTYPNUMB", FmlField.TYPE_STRING, 21, null, 322, 500);
        this.fmlBuffer[323] = new FmlField("CONTACT_NAME", FmlField.TYPE_STRING, 255, null, 323, 500);
        this.fmlBuffer[324] = new FmlField("CONTACT_NUMBER", FmlField.TYPE_STRING, 255, null, 324, 500);
        this.fmlBuffer[325] = new FmlField("CONTACT_EMAIL", FmlField.TYPE_STRING, 255, null, 325, 500);
        this.fmlBuffer[326] = new FmlField("ERROR_CONTACT_NAME", FmlField.TYPE_STRING, 255, null, 326, 500);
        this.fmlBuffer[327] = new FmlField("ERROR_CONTACT_NUMBER", FmlField.TYPE_STRING, 255, null, 327, 500);
        this.fmlBuffer[328] = new FmlField("ERROR_CONTACT_EMAIL", FmlField.TYPE_STRING, 255, null, 328, 500);
        this.fmlBuffer[329] = new FmlField("TEXT_1", FmlField.TYPE_STRING, 255, null, 329, 500);
        this.fmlBuffer[330] = new FmlField("TEXT_2", FmlField.TYPE_STRING, 255, null, 330, 500);
        this.fmlBuffer[331] = new FmlField("TEXT_3", FmlField.TYPE_STRING, 255, null, 331, 500);
        this.fmlBuffer[332] = new FmlField("TEXT_4", FmlField.TYPE_STRING, 255, null, 332, 500);
        this.fmlBuffer[333] = new FmlField("TEXT_5", FmlField.TYPE_STRING, 255, null, 333, 500);
        this.fmlBuffer[334] = new FmlField("TEXT_6", FmlField.TYPE_STRING, 255, null, 334, 500);
        this.fmlBuffer[335] = new FmlField("TEXT_7", FmlField.TYPE_STRING, 255, null, 335, 500);
        this.fmlBuffer[336] = new FmlField("TEXT_8", FmlField.TYPE_STRING, 255, null, 336, 500);
        this.fmlBuffer[337] = new FmlField("TEXT_9", FmlField.TYPE_STRING, 255, null, 337, 500);
        this.fmlBuffer[338] = new FmlField("TEXT_10", FmlField.TYPE_STRING, 255, null, 338, 500);
        this.fmlBuffer[339] = new FmlField("RPSP", FmlField.TYPE_STRING, 255, null, 339, 500);
        this.fmlBuffer[340] = new FmlField("TRX_SENT_DATETIME", FmlField.TYPE_STRING, 15, null, 340, 500);
        this.fmlBuffer[341] = new FmlField("ORIGINATING_NUMBER", FmlField.TYPE_STRING, 255, null, 341, 500);
        this.fmlBuffer[342] = new FmlField("NPTRXDETRECICC", FmlField.TYPE_STRING, 61, null, 342, 500);
        this.fmlBuffer[343] = new FmlField("COORDINATION_IND", FmlField.TYPE_BYTE, -1, null, 343, 500);
        this.fmlBuffer[344] = new FmlField("PORT_ENDED", FmlField.TYPE_SHORT, -1, null, 344, 500);
        this.fmlBuffer[345] = new FmlField("PORT_ENDED_MAIN", FmlField.TYPE_SHORT, -1, null, 345, 500);
        this.fmlBuffer[346] = new FmlField("PORT_ENDED_ADDITIONAL1", FmlField.TYPE_SHORT, -1, null, 346, 500);
        this.fmlBuffer[347] = new FmlField("PORT_ENDED_ADDITIONAL2", FmlField.TYPE_SHORT, -1, null, 347, 500);
        this.fmlBuffer[348] = new FmlField("PORT_ENDED_ADDITIONAL3", FmlField.TYPE_SHORT, -1, null, 348, 500);
        this.fmlBuffer[349] = new FmlField("PORT_ENDED_ADDITIONAL4", FmlField.TYPE_SHORT, -1, null, 349, 500);
        this.fmlBuffer[350] = new FmlField("PORT_ENDED_ADDITIONAL5", FmlField.TYPE_SHORT, -1, null, 350, 500);
        this.fmlBuffer[351] = new FmlField("PORT_ENDED_ADDITIONAL6", FmlField.TYPE_SHORT, -1, null, 351, 500);
        this.fmlBuffer[352] = new FmlField("PORT_ENDED_ADDITIONAL7", FmlField.TYPE_SHORT, -1, null, 352, 500);
        this.fmlBuffer[353] = new FmlField("PORT_ENDED_ADDITIONAL8", FmlField.TYPE_SHORT, -1, null, 353, 500);
        this.fmlBuffer[354] = new FmlField("PORT_ENDED_ADDITIONAL9", FmlField.TYPE_SHORT, -1, null, 354, 500);
        this.fmlBuffer[355] = new FmlField("PORT_ENDED_ADDITIONAL10", FmlField.TYPE_SHORT, -1, null, 355, 500);
        this.fmlBuffer[356] = new FmlField("DTSP", FmlField.TYPE_STRING, 4, null, 356, 500);
        this.fmlBuffer[357] = new FmlField("RTSP", FmlField.TYPE_STRING, 4, null, 357, 500);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'CUSTOMER_ID' field in the FML buffer.
     *
     * @return Value of 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CUSTOMER_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Value of 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_CREATION_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(0));
    }

    /**
     * Retrieves the value of the 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Value of 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_UPDATE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(0));
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[6].getValue(0));
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(0));
    }

    /**
     * Retrieves the value of the 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Value of 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DL_SERVICE_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(0));
    }

    /**
     * Retrieves the value of the 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Value of 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DL_UPDATE_STAMP() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[9].getValue(0)));
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Value of 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(0));
    }

    /**
     * Retrieves the value of the 'INIT_ACTIVATION_DATE' field in the FML buffer.
     *
     * @return Value of 'INIT_ACTIVATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INIT_ACTIVATION_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_STATUS' field in the FML buffer.
     *
     * @return Value of 'SUB_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[12].getValue(0)));
    }

    /**
     * Retrieves the value of the 'SUB_STATUS_DATE' field in the FML buffer.
     *
     * @return Value of 'SUB_STATUS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[13].getValue(0));
    }

    /**
     * Retrieves the value of the 'ORIGINAL_INIT_DATE' field in the FML buffer.
     *
     * @return Value of 'ORIGINAL_INIT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORIGINAL_INIT_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_STATUS_LAST_ACT' field in the FML buffer.
     *
     * @return Value of 'SUB_STATUS_LAST_ACT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS_LAST_ACT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_STATUS_RSN_CODE' field in the FML buffer.
     *
     * @return Value of 'SUB_STATUS_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS_RSN_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(0));
    }

    /**
     * Retrieves the value of the 'PRODUCT_TYPE' field in the FML buffer.
     *
     * @return Value of 'PRODUCT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRODUCT_TYPE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(0));
    }

    /**
     * Retrieves the value of the 'CUSTOMER_BAN' field in the FML buffer.
     *
     * @return Value of 'CUSTOMER_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CUSTOMER_BAN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[18].getValue(0));
    }

    /**
     * Retrieves the value of the 'CTN_SEQ_NO' field in the FML buffer.
     *
     * @return Value of 'CTN_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CTN_SEQ_NO() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[19].getValue(0));
    }

    /**
     * Retrieves the value of the 'REQ_ST_GRACE_PERIOD' field in the FML buffer.
     *
     * @return Value of 'REQ_ST_GRACE_PERIOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REQ_ST_GRACE_PERIOD() throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(0));
    }

    /**
     * Retrieves the value of the 'REQ_END_GRACE_PERIOD' field in the FML buffer.
     *
     * @return Value of 'REQ_END_GRACE_PERIOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REQ_END_GRACE_PERIOD() throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(0));
    }

    /**
     * Retrieves the value of the 'COMMIT_START_DATE' field in the FML buffer.
     *
     * @return Value of 'COMMIT_START_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMMIT_START_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(0));
    }

    /**
     * Retrieves the value of the 'COMMIT_END_DATE' field in the FML buffer.
     *
     * @return Value of 'COMMIT_END_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMMIT_END_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(0));
    }

    /**
     * Retrieves the value of the 'COMMIT_REASON_CODE' field in the FML buffer.
     *
     * @return Value of 'COMMIT_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMMIT_REASON_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(0));
    }

    /**
     * Retrieves the value of the 'COMMIT_ORIG_NO_MONTH' field in the FML buffer.
     *
     * @return Value of 'COMMIT_ORIG_NO_MONTH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_COMMIT_ORIG_NO_MONTH() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[25].getValue(0)));
    }

    /**
     * Retrieves the value of the 'SUSP_RC_RATE_TYPE' field in the FML buffer.
     *
     * @return Value of 'SUSP_RC_RATE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUSP_RC_RATE_TYPE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[26].getValue(0)));
    }

    /**
     * Retrieves the value of the 'CONTRACT_NO' field in the FML buffer.
     *
     * @return Value of 'CONTRACT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTRACT_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(0));
    }

    /**
     * Retrieves the value of the 'CNT_SEQ_NO' field in the FML buffer.
     *
     * @return Value of 'CNT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CNT_SEQ_NO() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[28].getValue(0));
    }

    /**
     * Retrieves the value of the 'DEALER_CODE' field in the FML buffer.
     *
     * @return Value of 'DEALER_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEALER_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[29].getValue(0));
    }

    /**
     * Retrieves the value of the 'ORG_DEALER_CODE' field in the FML buffer.
     *
     * @return Value of 'ORG_DEALER_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORG_DEALER_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(0));
    }

    /**
     * Retrieves the value of the 'SALES_AGENT' field in the FML buffer.
     *
     * @return Value of 'SALES_AGENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SALES_AGENT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(0));
    }

    /**
     * Retrieves the value of the 'ORG_SALES_AGENT' field in the FML buffer.
     *
     * @return Value of 'ORG_SALES_AGENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORG_SALES_AGENT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[32].getValue(0));
    }

    /**
     * Retrieves the value of the 'REQ_DEPOSIT_AMT' field in the FML buffer.
     *
     * @return Value of 'REQ_DEPOSIT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_REQ_DEPOSIT_AMT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[33].getValue(0));
    }

    /**
     * Retrieves the value of the 'LEADING_NUMBER' field in the FML buffer.
     *
     * @return Value of 'LEADING_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LEADING_NUMBER() throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(0));
    }

    /**
     * Retrieves the value of the 'PABX_IND' field in the FML buffer.
     *
     * @return Value of 'PABX_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PABX_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[35].getValue(0)));
    }

    /**
     * Retrieves the value of the 'NEXT_CTN' field in the FML buffer.
     *
     * @return Value of 'NEXT_CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_CTN() throws FMLManipulationException {
        return ((String) this.fmlBuffer[36].getValue(0));
    }

    /**
     * Retrieves the value of the 'NEXT_CTN_CHG_DATE' field in the FML buffer.
     *
     * @return Value of 'NEXT_CTN_CHG_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_CTN_CHG_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[37].getValue(0));
    }

    /**
     * Retrieves the value of the 'PRV_CTN' field in the FML buffer.
     *
     * @return Value of 'PRV_CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRV_CTN() throws FMLManipulationException {
        return ((String) this.fmlBuffer[38].getValue(0));
    }

    /**
     * Retrieves the value of the 'PRV_CTN_CHG_DATE' field in the FML buffer.
     *
     * @return Value of 'PRV_CTN_CHG_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRV_CTN_CHG_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[39].getValue(0));
    }

    /**
     * Retrieves the value of the 'NEXT_BAN' field in the FML buffer.
     *
     * @return Value of 'NEXT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NEXT_BAN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[40].getValue(0));
    }

    /**
     * Retrieves the value of the 'NEXT_BAN_MOVE_DATE' field in the FML buffer.
     *
     * @return Value of 'NEXT_BAN_MOVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_BAN_MOVE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[41].getValue(0));
    }

    /**
     * Retrieves the value of the 'PRV_BAN' field in the FML buffer.
     *
     * @return Value of 'PRV_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PRV_BAN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[42].getValue(0));
    }

    /**
     * Retrieves the value of the 'PRV_BAN_MOVE_DATE' field in the FML buffer.
     *
     * @return Value of 'PRV_BAN_MOVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRV_BAN_MOVE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[43].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_STS_ISSUE_DATE' field in the FML buffer.
     *
     * @return Value of 'SUB_STS_ISSUE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STS_ISSUE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[44].getValue(0));
    }

    /**
     * Retrieves the value of the 'ACTIVATE_WAIVE_RSN' field in the FML buffer.
     *
     * @return Value of 'ACTIVATE_WAIVE_RSN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTIVATE_WAIVE_RSN() throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(0));
    }

    /**
     * Retrieves the value of the 'EARLIEST_ACTV_DATE' field in the FML buffer.
     *
     * @return Value of 'EARLIEST_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EARLIEST_ACTV_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[46].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_ACTV_LOCATION' field in the FML buffer.
     *
     * @return Value of 'SUB_ACTV_LOCATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_ACTV_LOCATION() throws FMLManipulationException {
        return ((String) this.fmlBuffer[47].getValue(0));
    }

    /**
     * Retrieves the value of the 'CUST_WATCH_LMT' field in the FML buffer.
     *
     * @return Value of 'CUST_WATCH_LMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CUST_WATCH_LMT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[48].getValue(0));
    }

    /**
     * Retrieves the value of the 'CUST_WATCH_DATE' field in the FML buffer.
     *
     * @return Value of 'CUST_WATCH_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUST_WATCH_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[49].getValue(0));
    }

    /**
     * Retrieves the value of the 'BASIC_WATCH_LMT' field in the FML buffer.
     *
     * @return Value of 'BASIC_WATCH_LMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BASIC_WATCH_LMT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[50].getValue(0));
    }

    /**
     * Retrieves the value of the 'CREDIT_WATCH_PIN_CD' field in the FML buffer.
     *
     * @return Value of 'CREDIT_WATCH_PIN_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CREDIT_WATCH_PIN_CD() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[51].getValue(0)));
    }

    /**
     * Retrieves the value of the 'SUB_MARKET_CODE' field in the FML buffer.
     *
     * @return Value of 'SUB_MARKET_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_MARKET_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[52].getValue(0));
    }

    /**
     * Retrieves the value of the 'LIMIT_RESERVED_DAYS' field in the FML buffer.
     *
     * @return Value of 'LIMIT_RESERVED_DAYS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LIMIT_RESERVED_DAYS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[53].getValue(0)));
    }

    /**
     * Retrieves the value of the 'FF_EXPIRATION_DATE' field in the FML buffer.
     *
     * @return Value of 'FF_EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FF_EXPIRATION_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[54].getValue(0));
    }

    /**
     * Retrieves the value of the 'FLEX_IND' field in the FML buffer.
     *
     * @return Value of 'FLEX_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FLEX_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[55].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DUO_IND' field in the FML buffer.
     *
     * @return Value of 'DUO_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DUO_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[56].getValue(0)));
    }

    /**
     * Retrieves the value of the 'LISTED_IND' field in the FML buffer.
     *
     * @return Value of 'LISTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LISTED_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[57].getValue(0)));
    }

    /**
     * Retrieves the value of the 'SUB_DEPARTMENT_CD' field in the FML buffer.
     *
     * @return Value of 'SUB_DEPARTMENT_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_DEPARTMENT_CD() throws FMLManipulationException {
        return ((String) this.fmlBuffer[58].getValue(0));
    }

    /**
     * Retrieves the value of the 'LAST_SUBS_DISC_DT' field in the FML buffer.
     *
     * @return Value of 'LAST_SUBS_DISC_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_SUBS_DISC_DT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[59].getValue(0));
    }

    /**
     * Retrieves the value of the 'LAST_SUBS_DISC_DT_UD' field in the FML buffer.
     *
     * @return Value of 'LAST_SUBS_DISC_DT_UD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_SUBS_DISC_DT_UD() throws FMLManipulationException {
        return ((String) this.fmlBuffer[60].getValue(0));
    }

    /**
     * Retrieves the value of the 'LAST_SUBSCR_DISC_SN' field in the FML buffer.
     *
     * @return Value of 'LAST_SUBSCR_DISC_SN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_SUBSCR_DISC_SN() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[61].getValue(0)));
    }

    /**
     * Retrieves the value of the 'LAST_SUBSCR_DISC_SN_UD' field in the FML buffer.
     *
     * @return Value of 'LAST_SUBSCR_DISC_SN_UD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_SUBSCR_DISC_SN_UD() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[62].getValue(0)));
    }

    /**
     * Retrieves the value of the 'PNI' field in the FML buffer.
     *
     * @return Value of 'PNI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PNI() throws FMLManipulationException {
        return ((String) this.fmlBuffer[63].getValue(0));
    }

    /**
     * Retrieves the value of the 'RMS_REF_STORE_ID' field in the FML buffer.
     *
     * @return Value of 'RMS_REF_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_REF_STORE_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[64].getValue(0));
    }

    /**
     * Retrieves the value of the 'RMS_REF_TYPE' field in the FML buffer.
     *
     * @return Value of 'RMS_REF_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_REF_TYPE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[65].getValue(0)));
    }

    /**
     * Retrieves the value of the 'RMS_REF_OD' field in the FML buffer.
     *
     * @return Value of 'RMS_REF_OD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_RMS_REF_OD() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[66].getValue(0));
    }

    /**
     * Retrieves the value of the 'DLR_ACT_FEE' field in the FML buffer.
     *
     * @return Value of 'DLR_ACT_FEE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DLR_ACT_FEE() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[67].getValue(0));
    }

    /**
     * Retrieves the value of the 'PREP_AMOUNT' field in the FML buffer.
     *
     * @return Value of 'PREP_AMOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_PREP_AMOUNT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[68].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_ID' field in the FML buffer.
     *
     * @return Value of 'SUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SUBSCRIBER_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[69].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_LANG' field in the FML buffer.
     *
     * @return Value of 'SUB_LANG' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_LANG() throws FMLManipulationException {
        return ((String) this.fmlBuffer[70].getValue(0));
    }

    /**
     * Retrieves the value of the 'SMS_RCV_STYLE_CODE' field in the FML buffer.
     *
     * @return Value of 'SMS_RCV_STYLE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SMS_RCV_STYLE_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[71].getValue(0));
    }

    /**
     * Retrieves the value of the 'CONV_RUN_NO' field in the FML buffer.
     *
     * @return Value of 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CONV_RUN_NO() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[72].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ALLOW_ADVERTISING_IND' field in the FML buffer.
     *
     * @return Value of 'ALLOW_ADVERTISING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ALLOW_ADVERTISING_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[73].getValue(0)));
    }

    /**
     * Retrieves the value of the 'IVR_WRONG_ACCESS_NO' field in the FML buffer.
     *
     * @return Value of 'IVR_WRONG_ACCESS_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_IVR_WRONG_ACCESS_NO() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[74].getValue(0)));
    }

    /**
     * Retrieves the value of the 'THRESHOLD_AMT' field in the FML buffer.
     *
     * @return Value of 'THRESHOLD_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_THRESHOLD_AMT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[75].getValue(0));
    }

    /**
     * Retrieves the value of the 'PUBLISH_LEVEL' field in the FML buffer.
     *
     * @return Value of 'PUBLISH_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PUBLISH_LEVEL() throws FMLManipulationException {
        return ((String) this.fmlBuffer[76].getValue(0));
    }

    /**
     * Retrieves the value of the 'AUTO_RELEASE_IND' field in the FML buffer.
     *
     * @return Value of 'AUTO_RELEASE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_AUTO_RELEASE_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[77].getValue(0)));
    }

    /**
     * Retrieves the value of the 'CUST_WATCH_EFF_DATE' field in the FML buffer.
     *
     * @return Value of 'CUST_WATCH_EFF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUST_WATCH_EFF_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[78].getValue(0));
    }

    /**
     * Retrieves the value of the 'CUST_WATCH_EXP_DATE' field in the FML buffer.
     *
     * @return Value of 'CUST_WATCH_EXP_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUST_WATCH_EXP_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[79].getValue(0));
    }

    /**
     * Retrieves the value of the 'OPERATOR_CW_LMT' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_CW_LMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_OPERATOR_CW_LMT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[80].getValue(0));
    }

    /**
     * Retrieves the value of the 'SEND_SMS_FOR_MATCH' field in the FML buffer.
     *
     * @return Value of 'SEND_SMS_FOR_MATCH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SEND_SMS_FOR_MATCH() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[81].getValue(0)));
    }

    /**
     * Retrieves the value of the 'CPS_STATUS' field in the FML buffer.
     *
     * @return Value of 'CPS_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CPS_STATUS() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[82].getValue(0)));
    }

    /**
     * Retrieves the value of the 'CPS_TRANSACTION' field in the FML buffer.
     *
     * @return Value of 'CPS_TRANSACTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CPS_TRANSACTION() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[83].getValue(0)));
    }

    /**
     * Retrieves the value of the 'CPS_TYPE' field in the FML buffer.
     *
     * @return Value of 'CPS_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CPS_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[84].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ISP_PASS' field in the FML buffer.
     *
     * @return Value of 'ISP_PASS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ISP_PASS() throws FMLManipulationException {
        return ((String) this.fmlBuffer[85].getValue(0));
    }

    /**
     * Retrieves the value of the 'ISP_TYPE' field in the FML buffer.
     *
     * @return Value of 'ISP_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ISP_TYPE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[86].getValue(0));
    }

    /**
     * Retrieves the value of the 'OPERATOR_TMP_DATE' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_TMP_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OPERATOR_TMP_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[87].getValue(0));
    }

    /**
     * Retrieves the value of the 'OPERATOR_TMP_LMT' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_TMP_LMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_OPERATOR_TMP_LMT() throws FMLManipulationException {
        return ((Double) this.fmlBuffer[88].getValue(0));
    }

    /**
     * Retrieves the value of the 'SUB_ORG_CD' field in the FML buffer.
     *
     * @return Value of 'SUB_ORG_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_ORG_CD() throws FMLManipulationException {
        return ((String) this.fmlBuffer[89].getValue(0));
    }

    /**
     * Retrieves the value of the 'ORG_MEMBER_NO' field in the FML buffer.
     *
     * @return Value of 'ORG_MEMBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORG_MEMBER_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[90].getValue(0));
    }

    /**
     * Retrieves the value of the 'FIXED_AS_GSM_IND' field in the FML buffer.
     *
     * @return Value of 'FIXED_AS_GSM_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FIXED_AS_GSM_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[91].getValue(0)));
    }

    /**
     * Retrieves the value of the 'EARLY_PORT_OUT' field in the FML buffer.
     *
     * @return Value of 'EARLY_PORT_OUT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EARLY_PORT_OUT() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[92].getValue(0)));
    }

    /**
     * Retrieves the value of the 'EARLY_PO_WAIVE_IND' field in the FML buffer.
     *
     * @return Value of 'EARLY_PO_WAIVE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EARLY_PO_WAIVE_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[93].getValue(0)));
    }

    /**
     * Retrieves the value of the 'EARLY_PO_WAIVE_REASON' field in the FML buffer.
     *
     * @return Value of 'EARLY_PO_WAIVE_REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EARLY_PO_WAIVE_REASON() throws FMLManipulationException {
        return ((String) this.fmlBuffer[94].getValue(0));
    }

    /**
     * Retrieves the value of the 'INTERNAL_CIRCUIT_ID' field in the FML buffer.
     *
     * @return Value of 'INTERNAL_CIRCUIT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INTERNAL_CIRCUIT_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[95].getValue(0));
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[96].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[97].getValue(0));
    }

    /**
     * Retrieves the value of the 'LINK_MODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_MODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[98].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LINK_MODE' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_MODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[98].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LINK_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[99].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LINK_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[99].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_SUBSCRIBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_SUBSCRIBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[100].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LINK_SUBSCRIBER' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_SUBSCRIBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[100].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_ROW_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_ROW_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_ROW_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[101].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LINK_ROW_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_ROW_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_ROW_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[101].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LINK_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[102].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LINK_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[102].getCount());
    }

    /**
     * Retrieves the value of the 'LNKRECCUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LNKRECCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LNKRECCUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[103].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LNKRECCUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'LNKRECCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LNKRECCUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[103].getCount());
    }

    /**
     * Retrieves the value of the 'LNKRECBAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LNKRECBAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LNKRECBAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[104].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LNKRECBAN' field in the FML buffer.
     *
     * @return Number of values defined for 'LNKRECBAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LNKRECBAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[104].getCount());
    }

    /**
     * Retrieves the value of the 'LNKRECSUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LNKRECSUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LNKRECSUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[105].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LNKRECSUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'LNKRECSUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LNKRECSUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[105].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[106].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LINK_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[106].getCount());
    }

    /**
     * Retrieves the value of the 'LNKRECEFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LNKRECEFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LNKRECEFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[107].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LNKRECEFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LNKRECEFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LNKRECEFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[107].getCount());
    }

    /**
     * Retrieves the value of the 'FOREIGN_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'FOREIGN_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FOREIGN_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[108].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FOREIGN_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'FOREIGN_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FOREIGN_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[108].getCount());
    }

    /**
     * Retrieves the value of the 'BILLING_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'BILLING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILLING_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[109].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BILLING_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BILLING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILLING_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[109].getCount());
    }

    /**
     * Retrieves the value of the 'MAILING_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'MAILING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MAILING_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[110].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MAILING_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'MAILING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAILING_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[110].getCount());
    }

    /**
     * Retrieves the value of the 'USER_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'USER_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_USER_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[111].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'USER_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[111].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_BILLING_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_BILLING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_BILLING_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[112].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LINK_BILLING_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_BILLING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_BILLING_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[112].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_MAILING_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_MAILING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_MAILING_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[113].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LINK_MAILING_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_MAILING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_MAILING_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[113].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_USER_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LINK_USER_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_USER_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[114].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LINK_USER_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_USER_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_USER_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[114].getCount());
    }

    /**
     * Retrieves the value of the 'NM_MODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NM_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NM_MODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[115].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NM_MODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NM_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NM_MODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[115].getCount());
    }

    /**
     * Retrieves the value of the 'NM_UP_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NM_UP_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NM_UP_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[116].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NM_UP_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'NM_UP_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NM_UP_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[116].getCount());
    }

    /**
     * Retrieves the value of the 'NM_EXPIRE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NM_EXPIRE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NM_EXPIRE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[117].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NM_EXPIRE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NM_EXPIRE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NM_EXPIRE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[117].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAMERECROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[118].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAMERECROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[118].getCount());
    }

    /**
     * Retrieves the value of the 'NAME_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAME_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NAME_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[119].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAME_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NAME_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAME_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[119].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAMERECSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[120].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAMERECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[120].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAMERECSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[121].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAMERECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[121].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NAMERECOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[122].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAMERECOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[122].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAMERECAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[123].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAMERECAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[123].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAMERECDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[124].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAMERECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[124].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NAMERECDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[125].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NAMERECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[125].getCount());
    }

    /**
     * Retrieves the value of the 'CONTROL_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'CONTROL_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTROL_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[126].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTROL_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTROL_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTROL_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[126].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_BUSINESS_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'LAST_BUSINESS_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_BUSINESS_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[127].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_BUSINESS_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_BUSINESS_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_BUSINESS_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[127].getCount());
    }

    /**
     * Retrieves the value of the 'FIRST_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'FIRST_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FIRST_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[128].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FIRST_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'FIRST_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FIRST_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[128].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_TITLE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDITIONAL_TITLE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_TITLE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[129].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_TITLE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_TITLE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_TITLE_size() throws FMLManipulationException {
        return (this.fmlBuffer[129].getCount());
    }

    /**
     * Retrieves the value of the 'NAME_FORMAT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAME_FORMAT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAME_FORMAT(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[130].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NAME_FORMAT' field in the FML buffer.
     *
     * @return Number of values defined for 'NAME_FORMAT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAME_FORMAT_size() throws FMLManipulationException {
        return (this.fmlBuffer[130].getCount());
    }

    /**
     * Retrieves the value of the 'BIRTH_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'BIRTH_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BIRTH_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[131].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BIRTH_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'BIRTH_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BIRTH_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[131].getCount());
    }

    /**
     * Retrieves the value of the 'IDENTIFY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'IDENTIFY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_IDENTIFY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[132].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IDENTIFY' field in the FML buffer.
     *
     * @return Number of values defined for 'IDENTIFY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IDENTIFY_size() throws FMLManipulationException {
        return (this.fmlBuffer[132].getCount());
    }

    /**
     * Retrieves the value of the 'ID_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ID_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ID_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[133].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ID_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'ID_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ID_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[133].getCount());
    }

    /**
     * Retrieves the value of the 'COMP_REG_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'COMP_REG_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMP_REG_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[134].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'COMP_REG_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'COMP_REG_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMP_REG_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[134].getCount());
    }

    /**
     * Retrieves the value of the 'KOB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'KOB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_KOB(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[135].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'KOB' field in the FML buffer.
     *
     * @return Number of values defined for 'KOB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_KOB_size() throws FMLManipulationException {
        return (this.fmlBuffer[135].getCount());
    }

    /**
     * Retrieves the value of the 'MIDDLE_INITIAL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'MIDDLE_INITIAL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MIDDLE_INITIAL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[136].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MIDDLE_INITIAL' field in the FML buffer.
     *
     * @return Number of values defined for 'MIDDLE_INITIAL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MIDDLE_INITIAL_size() throws FMLManipulationException {
        return (this.fmlBuffer[136].getCount());
    }

    /**
     * Retrieves the value of the 'TELEMARKET_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'TELEMARKET_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TELEMARKET_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[137].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TELEMARKET_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'TELEMARKET_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TELEMARKET_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[137].getCount());
    }

    /**
     * Retrieves the value of the 'NAMERECCONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAMERECCONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NAMERECCONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[138].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NAMERECCONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'NAMERECCONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAMERECCONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[138].getCount());
    }

    /**
     * Retrieves the value of the 'NAME_TITLE_SALUTATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NAME_TITLE_SALUTATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAME_TITLE_SALUTATION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[139].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAME_TITLE_SALUTATION' field in the FML buffer.
     *
     * @return Number of values defined for 'NAME_TITLE_SALUTATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAME_TITLE_SALUTATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[139].getCount());
    }

    /**
     * Retrieves the value of the 'NATIONALITY_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'NATIONALITY_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NATIONALITY_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[140].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NATIONALITY_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'NATIONALITY_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NATIONALITY_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[140].getCount());
    }

    /**
     * Retrieves the value of the 'GENDER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'GENDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_GENDER(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[141].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'GENDER' field in the FML buffer.
     *
     * @return Number of values defined for 'GENDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_GENDER_size() throws FMLManipulationException {
        return (this.fmlBuffer[141].getCount());
    }

    /**
     * Retrieves the value of the 'MARITAL_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'MARITAL_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MARITAL_STATUS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[142].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MARITAL_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'MARITAL_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MARITAL_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[142].getCount());
    }

    /**
     * Retrieves the value of the 'ROLE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ROLE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROLE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[143].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ROLE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'ROLE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROLE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[143].getCount());
    }

    /**
     * Retrieves the value of the 'TPID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'TPID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TPID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[144].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TPID' field in the FML buffer.
     *
     * @return Number of values defined for 'TPID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TPID_size() throws FMLManipulationException {
        return (this.fmlBuffer[144].getCount());
    }

    /**
     * Retrieves the value of the 'E_FAKTURA_REF' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'E_FAKTURA_REF' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_E_FAKTURA_REF(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[145].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'E_FAKTURA_REF' field in the FML buffer.
     *
     * @return Number of values defined for 'E_FAKTURA_REF' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_E_FAKTURA_REF_size() throws FMLManipulationException {
        return (this.fmlBuffer[145].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_MODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_MODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[146].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADR_MODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_MODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[146].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_UP_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_UP_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_UP_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[147].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADR_UP_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_UP_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_UP_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[147].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_EXPIRE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_EXPIRE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_EXPIRE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[148].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_EXPIRE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_EXPIRE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_EXPIRE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[148].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDRESSRECROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[149].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[149].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESS_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADDRESS_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[150].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESS_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESS_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[150].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDRESSRECSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[151].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[151].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDRESSRECSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[152].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[152].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADDRESSRECOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[153].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[153].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDRESSRECAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[154].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[154].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDRESSRECDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[155].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[155].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADDRESSRECDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[156].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[156].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[157].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADR_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[157].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[158].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADR_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[158].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_STATUS_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_STATUS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_STATUS_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[159].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_STATUS_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_STATUS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_STATUS_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[159].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_SECONDARY_LN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_SECONDARY_LN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_SECONDARY_LN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[160].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_SECONDARY_LN' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_SECONDARY_LN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_SECONDARY_LN_size() throws FMLManipulationException {
        return (this.fmlBuffer[160].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_PRIMARY_LN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_PRIMARY_LN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_PRIMARY_LN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[161].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_PRIMARY_LN' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_PRIMARY_LN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_PRIMARY_LN_size() throws FMLManipulationException {
        return (this.fmlBuffer[161].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_CITY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_CITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_CITY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[162].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_CITY' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_CITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_CITY_size() throws FMLManipulationException {
        return (this.fmlBuffer[162].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_ZIP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_ZIP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_ZIP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[163].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_ZIP' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_ZIP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_ZIP_size() throws FMLManipulationException {
        return (this.fmlBuffer[163].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_HOUSE_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_HOUSE_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_HOUSE_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[164].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_HOUSE_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_HOUSE_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_HOUSE_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[164].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_STREET_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_STREET_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_STREET_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[165].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_STREET_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_STREET_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_STREET_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[165].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_DIRECTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_DIRECTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_DIRECTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[166].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_DIRECTION' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_DIRECTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_DIRECTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[166].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_POB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_POB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_POB(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[167].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_POB' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_POB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_POB_size() throws FMLManipulationException {
        return (this.fmlBuffer[167].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_COUNTRY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_COUNTRY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_COUNTRY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[168].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_COUNTRY' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_COUNTRY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_COUNTRY_size() throws FMLManipulationException {
        return (this.fmlBuffer[168].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_HOUSE_LETTER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_HOUSE_LETTER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_HOUSE_LETTER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[169].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_HOUSE_LETTER' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_HOUSE_LETTER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_HOUSE_LETTER_size() throws FMLManipulationException {
        return (this.fmlBuffer[169].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_STORY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_STORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_STORY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[170].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_STORY' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_STORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_STORY_size() throws FMLManipulationException {
        return (this.fmlBuffer[170].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_DOOR_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_DOOR_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_DOOR_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[171].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_DOOR_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_DOOR_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_DOOR_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[171].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_EMAIL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_EMAIL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[172].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_EMAIL' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_EMAIL_size() throws FMLManipulationException {
        return (this.fmlBuffer[172].getCount());
    }

    /**
     * Retrieves the value of the 'SINCE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'SINCE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SINCE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[173].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SINCE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SINCE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SINCE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[173].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_DISTRICT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_DISTRICT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_DISTRICT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[174].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_DISTRICT' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_DISTRICT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_DISTRICT_size() throws FMLManipulationException {
        return (this.fmlBuffer[174].getCount());
    }

    /**
     * Retrieves the value of the 'CO_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'CO_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CO_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[175].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CO_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'CO_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CO_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[175].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESSRECCONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADDRESSRECCONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADDRESSRECCONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[176].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADDRESSRECCONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESSRECCONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESSRECCONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[176].getCount());
    }

    /**
     * Retrieves the value of the 'ACCOMMODATION_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ACCOMMODATION_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACCOMMODATION_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[177].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACCOMMODATION_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACCOMMODATION_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACCOMMODATION_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[177].getCount());
    }

    /**
     * Retrieves the value of the 'COUNTY_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'COUNTY_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COUNTY_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[178].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'COUNTY_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'COUNTY_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COUNTY_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[178].getCount());
    }

    /**
     * Retrieves the value of the 'COMMUNITY_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'COMMUNITY_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMMUNITY_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[179].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'COMMUNITY_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'COMMUNITY_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMMUNITY_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[179].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_CO_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_CO_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_CO_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[180].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_CO_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_CO_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_CO_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[180].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_HOUSE_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_HOUSE_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_HOUSE_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[181].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_HOUSE_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_HOUSE_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_HOUSE_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[181].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[182].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P1' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P1_size() throws FMLManipulationException {
        return (this.fmlBuffer[182].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[183].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P2' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P2_size() throws FMLManipulationException {
        return (this.fmlBuffer[183].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P3(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[184].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P3' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P3_size() throws FMLManipulationException {
        return (this.fmlBuffer[184].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P4(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[185].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P4' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P4_size() throws FMLManipulationException {
        return (this.fmlBuffer[185].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P5(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[186].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P5' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P5_size() throws FMLManipulationException {
        return (this.fmlBuffer[186].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P6(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[187].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P6' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P6_size() throws FMLManipulationException {
        return (this.fmlBuffer[187].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P7(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[188].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P7' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P7_size() throws FMLManipulationException {
        return (this.fmlBuffer[188].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P8(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[189].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P8' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P8_size() throws FMLManipulationException {
        return (this.fmlBuffer[189].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P9(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[190].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P9' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P9_size() throws FMLManipulationException {
        return (this.fmlBuffer[190].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_P10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 20).
     * @return Value of 'ADR_P10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_P10(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[191].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_P10' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_P10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_P10_size() throws FMLManipulationException {
        return (this.fmlBuffer[191].getCount());
    }

    /**
     * Retrieves the value of the 'FUTURE_REQ_COUNT' field in the FML buffer.
     *
     * @return Value of 'FUTURE_REQ_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FUTURE_REQ_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[192].getValue(0));
    }

    /**
     * Retrieves the value of the 'LINKED_IND' field in the FML buffer.
     *
     * @return Value of 'LINKED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINKED_IND() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[193].getValue(0)));
    }

    /**
     * Retrieves the value of the 'PCONTRACTROWID' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTROWID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[194].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTBAN' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTBAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PCONTRACTBAN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[195].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTSUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTSUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTSUBSCRIBER_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[196].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTCNT_SEQ_NO' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTCNT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PCONTRACTCNT_SEQ_NO() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[197].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTSYS_CREATION_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[198].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTSYS_UPDATE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[199].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTOPERATOR_ID' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PCONTRACTOPERATOR_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[200].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTAPPLICATION_ID' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTAPPLICATION_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[201].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTDL_SERVICE_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[202].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PCONTRACTDL_UPDATE_STAMP() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[203].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ENTRY_EFF_DATE' field in the FML buffer.
     *
     * @return Value of 'ENTRY_EFF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ENTRY_EFF_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[204].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTCONTRACT_NO' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTCONTRACT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTCONTRACT_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[205].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTCOMMIT_START_DATE' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTCOMMIT_START_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTCOMMIT_START_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[206].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTCOMMIT_END_DATE' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTCOMMIT_END_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PCONTRACTCOMMIT_END_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[207].getValue(0));
    }

    /**
     * Retrieves the value of the 'COMMIT_REASON_CD' field in the FML buffer.
     *
     * @return Value of 'COMMIT_REASON_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMMIT_REASON_CD() throws FMLManipulationException {
        return ((String) this.fmlBuffer[208].getValue(0));
    }

    /**
     * Retrieves the value of the 'PCONTRACTCOMMIT_ORIG_NO_MONTH' field in the FML buffer.
     *
     * @return Value of 'PCONTRACTCOMMIT_ORIG_NO_MONTH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PCONTRACTCOMMIT_ORIG_NO_MONTH() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[209].getValue(0)));
    }

    /**
     * Retrieves the value of the 'PAPER_WORK_STATUS' field in the FML buffer.
     *
     * @return Value of 'PAPER_WORK_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PAPER_WORK_STATUS() throws FMLManipulationException {
        return ((String) this.fmlBuffer[210].getValue(0));
    }

    /**
     * Retrieves the value of the 'PAPER_WORK_REQUIRED' field in the FML buffer.
     *
     * @return Value of 'PAPER_WORK_REQUIRED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PAPER_WORK_REQUIRED() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[211].getValue(0)));
    }

    /**
     * Retrieves the value of the 'PAPER_WORK_DATE' field in the FML buffer.
     *
     * @return Value of 'PAPER_WORK_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PAPER_WORK_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[212].getValue(0));
    }

    /**
     * Retrieves the value of the 'PAPER_WORK_REF_NO' field in the FML buffer.
     *
     * @return Value of 'PAPER_WORK_REF_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PAPER_WORK_REF_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[213].getValue(0));
    }

    /**
     * Retrieves the value of the 'PAPER_WORK_TRNS_NO' field in the FML buffer.
     *
     * @return Value of 'PAPER_WORK_TRNS_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PAPER_WORK_TRNS_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[214].getValue(0));
    }

    /**
     * Retrieves the value of the 'DELIVERY_TYPE' field in the FML buffer.
     *
     * @return Value of 'DELIVERY_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DELIVERY_TYPE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[215].getValue(0)));
    }

    /**
     * Retrieves the value of the 'PNPINFOBUFFROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'PNPINFOBUFFROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PNPINFOBUFFROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[216].getValue(0));
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPNUMINFORECROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[217].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[217].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORT_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[218].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PORT_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[218].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECEFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECEFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPNUMINFORECEFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[219].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECEFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECEFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECEFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[219].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPNUMINFORECSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[220].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[220].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPNUMINFORECSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[221].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[221].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPNUMINFORECOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[222].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[222].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPNUMINFORECAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[223].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[223].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPNUMINFORECDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[224].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[224].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPNUMINFORECDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[225].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[225].getCount());
    }

    /**
     * Retrieves the value of the 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXPIRATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[226].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXPIRATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[226].getCount());
    }

    /**
     * Retrieves the value of the 'INT_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'INT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_INT_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[227].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INT_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'INT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INT_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[227].getCount());
    }

    /**
     * Retrieves the value of the 'ORG_CUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ORG_CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORG_CUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[228].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORG_CUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ORG_CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORG_CUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[228].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORT_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[229].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[229].getCount());
    }

    /**
     * Retrieves the value of the 'NUMBER_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NUMBER_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NUMBER_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[230].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NUMBER_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'NUMBER_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NUMBER_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[230].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_REQUEST_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_REQUEST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORT_REQUEST_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[231].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PORT_REQUEST_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_REQUEST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_REQUEST_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[231].getCount());
    }

    /**
     * Retrieves the value of the 'ORG_OPERATOR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ORG_OPERATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORG_OPERATOR(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[232].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORG_OPERATOR' field in the FML buffer.
     *
     * @return Number of values defined for 'ORG_OPERATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORG_OPERATOR_size() throws FMLManipulationException {
        return (this.fmlBuffer[232].getCount());
    }

    /**
     * Retrieves the value of the 'NPNUMINFORECSUBSCRIBER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPNUMINFORECSUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPNUMINFORECSUBSCRIBER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[233].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPNUMINFORECSUBSCRIBER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPNUMINFORECSUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPNUMINFORECSUBSCRIBER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[233].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_INT_ORD_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'LAST_INT_ORD_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_LAST_INT_ORD_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[234].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_INT_ORD_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_INT_ORD_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_INT_ORD_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[234].getCount());
    }

    /**
     * Retrieves the value of the 'FUNCTION_PORT_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'FUNCTION_PORT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FUNCTION_PORT_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[235].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'FUNCTION_PORT_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'FUNCTION_PORT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FUNCTION_PORT_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[235].getCount());
    }

    /**
     * Retrieves the value of the 'PASSIVE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PASSIVE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PASSIVE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[236].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PASSIVE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'PASSIVE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PASSIVE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[236].getCount());
    }

    /**
     * Retrieves the value of the 'AUTO_CONFIRM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'AUTO_CONFIRM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_AUTO_CONFIRM(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[237].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'AUTO_CONFIRM' field in the FML buffer.
     *
     * @return Number of values defined for 'AUTO_CONFIRM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_AUTO_CONFIRM_size() throws FMLManipulationException {
        return (this.fmlBuffer[237].getCount());
    }

    /**
     * Retrieves the value of the 'TEMPORARY_MSISDN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEMPORARY_MSISDN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEMPORARY_MSISDN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[238].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEMPORARY_MSISDN' field in the FML buffer.
     *
     * @return Number of values defined for 'TEMPORARY_MSISDN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEMPORARY_MSISDN_size() throws FMLManipulationException {
        return (this.fmlBuffer[238].getCount());
    }

    /**
     * Retrieves the value of the 'HANDLE_MODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'HANDLE_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_HANDLE_MODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[239].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'HANDLE_MODE' field in the FML buffer.
     *
     * @return Number of values defined for 'HANDLE_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_HANDLE_MODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[239].getCount());
    }

    /**
     * Retrieves the value of the 'SEND_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'SEND_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SEND_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[240].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SEND_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'SEND_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SEND_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[240].getCount());
    }

    /**
     * Retrieves the value of the 'ORDID_STR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ORDID_STR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORDID_STR(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[241].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORDID_STR' field in the FML buffer.
     *
     * @return Number of values defined for 'ORDID_STR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORDID_STR_size() throws FMLManipulationException {
        return (this.fmlBuffer[241].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_ORDID_STR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'LAST_ORDID_STR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_ORDID_STR(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[242].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_ORDID_STR' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_ORDID_STR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_ORDID_STR_size() throws FMLManipulationException {
        return (this.fmlBuffer[242].getCount());
    }

    /**
     * Retrieves the value of the 'ICC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ICC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ICC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[243].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ICC' field in the FML buffer.
     *
     * @return Number of values defined for 'ICC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ICC_size() throws FMLManipulationException {
        return (this.fmlBuffer[243].getCount());
    }

    /**
     * Retrieves the value of the 'CUSTOMER_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CUSTOMER_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUSTOMER_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[244].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CUSTOMER_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'CUSTOMER_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUSTOMER_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[244].getCount());
    }

    /**
     * Retrieves the value of the 'NPINFOBUFFCUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPINFOBUFFCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPINFOBUFFCUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[245].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPINFOBUFFCUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPINFOBUFFCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPINFOBUFFCUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[245].getCount());
    }

    /**
     * Retrieves the value of the 'SERVICE_PROVIDER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'SERVICE_PROVIDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERVICE_PROVIDER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[246].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERVICE_PROVIDER' field in the FML buffer.
     *
     * @return Number of values defined for 'SERVICE_PROVIDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERVICE_PROVIDER_size() throws FMLManipulationException {
        return (this.fmlBuffer[246].getCount());
    }

    /**
     * Retrieves the value of the 'PNPADDINFOBUFROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'PNPADDINFOBUFROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PNPADDINFOBUFROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[247].getValue(0));
    }

    /**
     * Retrieves the value of the 'CURR_SERV_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CURR_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURR_SERV_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[248].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CURR_SERV_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'CURR_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURR_SERV_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[248].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[249].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[249].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TRX_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[250].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TRX_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[250].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECINT_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECINT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_NPTRXDETRECINT_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[251].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECINT_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECINT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECINT_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[251].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_SOURCE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TRX_SOURCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_SOURCE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[252].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_SOURCE' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_SOURCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_SOURCE_size() throws FMLManipulationException {
        return (this.fmlBuffer[252].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[253].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[253].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[254].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[254].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXDETRECOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[255].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[255].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[256].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[256].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[257].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[257].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXDETRECDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[258].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[258].getCount());
    }

    /**
     * Retrieves the value of the 'EXT_UNIQUE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EXT_UNIQUE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXT_UNIQUE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[259].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXT_UNIQUE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'EXT_UNIQUE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXT_UNIQUE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[259].getCount());
    }

    /**
     * Retrieves the value of the 'INT_TRX_SEQ' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'INT_TRX_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_INT_TRX_SEQ(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[260].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INT_TRX_SEQ' field in the FML buffer.
     *
     * @return Number of values defined for 'INT_TRX_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INT_TRX_SEQ_size() throws FMLManipulationException {
        return (this.fmlBuffer[260].getCount());
    }

    /**
     * Retrieves the value of the 'INITI_ORDER_SEQ' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'INITI_ORDER_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_INITI_ORDER_SEQ(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[261].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INITI_ORDER_SEQ' field in the FML buffer.
     *
     * @return Number of values defined for 'INITI_ORDER_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INITI_ORDER_SEQ_size() throws FMLManipulationException {
        return (this.fmlBuffer[261].getCount());
    }

    /**
     * Retrieves the value of the 'CONT_CATEGORY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CONT_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONT_CATEGORY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[262].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONT_CATEGORY' field in the FML buffer.
     *
     * @return Number of values defined for 'CONT_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONT_CATEGORY_size() throws FMLManipulationException {
        return (this.fmlBuffer[262].getCount());
    }

    /**
     * Retrieves the value of the 'EXT_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EXT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_EXT_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[263].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXT_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'EXT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXT_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[263].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_DATETIME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TRX_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_DATETIME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[264].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_DATETIME' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_DATETIME_size() throws FMLManipulationException {
        return (this.fmlBuffer[264].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TRX_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[265].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TRX_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[265].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_STS_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TRX_STS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_STS_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[266].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_STS_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_STS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_STS_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[266].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECCUSTOMER_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECCUSTOMER_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECCUSTOMER_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[267].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECCUSTOMER_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECCUSTOMER_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECCUSTOMER_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[267].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECCUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECCUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[268].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECCUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECCUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[268].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECNUMBER_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECNUMBER_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECNUMBER_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[269].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECNUMBER_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECNUMBER_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECNUMBER_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[269].getCount());
    }

    /**
     * Retrieves the value of the 'NEW_NUM_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NEW_NUM_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEW_NUM_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[270].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEW_NUM_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'NEW_NUM_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEW_NUM_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[270].getCount());
    }

    /**
     * Retrieves the value of the 'MAIN_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'MAIN_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MAIN_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[271].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MAIN_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'MAIN_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAIN_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[271].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[272].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_1' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[272].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[273].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_2' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[273].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_3(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[274].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_3' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[274].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_4(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[275].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_4' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[275].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_5(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[276].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_5' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[276].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_6(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[277].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_6' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[277].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_7(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[278].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_7' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_7_size() throws FMLManipulationException {
        return (this.fmlBuffer[278].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_8(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[279].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_8' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_8_size() throws FMLManipulationException {
        return (this.fmlBuffer[279].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_9(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[280].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_9' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_9_size() throws FMLManipulationException {
        return (this.fmlBuffer[280].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ADDITIONAL_NUMBER_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_10(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[281].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_10' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_10_size() throws FMLManipulationException {
        return (this.fmlBuffer[281].getCount());
    }

    /**
     * Retrieves the value of the 'PRIMARY_NUM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PRIMARY_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRIMARY_NUM(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[282].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRIMARY_NUM' field in the FML buffer.
     *
     * @return Number of values defined for 'PRIMARY_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRIMARY_NUM_size() throws FMLManipulationException {
        return (this.fmlBuffer[282].getCount());
    }

    /**
     * Retrieves the value of the 'REQUEST_EXEC_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'REQUEST_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REQUEST_EXEC_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[283].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REQUEST_EXEC_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'REQUEST_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REQUEST_EXEC_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[283].getCount());
    }

    /**
     * Retrieves the value of the 'CONF_EXEC_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CONF_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONF_EXEC_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[284].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONF_EXEC_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CONF_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONF_EXEC_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[284].getCount());
    }

    /**
     * Retrieves the value of the 'CONF_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CONF_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONF_STATUS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[285].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONF_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'CONF_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONF_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[285].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_UNIQ_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ERROR_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ERROR_UNIQ_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[286].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_UNIQ_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_UNIQ_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[286].getCount());
    }

    /**
     * Retrieves the value of the 'SERIES_UNIQ_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'SERIES_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SERIES_UNIQ_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[287].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERIES_UNIQ_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'SERIES_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERIES_UNIQ_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[287].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECCURR_SERV_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECCURR_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECCURR_SERV_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[288].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECCURR_SERV_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECCURR_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECCURR_SERV_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[288].getCount());
    }

    /**
     * Retrieves the value of the 'RECIP_SERV_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RECIP_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RECIP_SERV_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[289].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RECIP_SERV_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'RECIP_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECIP_SERV_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[289].getCount());
    }

    /**
     * Retrieves the value of the 'CURR_NET_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CURR_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURR_NET_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[290].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CURR_NET_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'CURR_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURR_NET_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[290].getCount());
    }

    /**
     * Retrieves the value of the 'RECIP_NET_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RECIP_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RECIP_NET_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[291].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RECIP_NET_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'RECIP_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECIP_NET_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[291].getCount());
    }

    /**
     * Retrieves the value of the 'INITI_ORDER_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'INITI_ORDER_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INITI_ORDER_TP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[292].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INITI_ORDER_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'INITI_ORDER_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INITI_ORDER_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[292].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_COMMENT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_COMMENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_COMMENT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[293].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_COMMENT' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_COMMENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_COMMENT_size() throws FMLManipulationException {
        return (this.fmlBuffer[293].getCount());
    }

    /**
     * Retrieves the value of the 'DELAY_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'DELAY_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DELAY_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[294].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DELAY_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'DELAY_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DELAY_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[294].getCount());
    }

    /**
     * Retrieves the value of the 'FILE_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'FILE_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FILE_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[295].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FILE_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'FILE_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FILE_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[295].getCount());
    }

    /**
     * Retrieves the value of the 'MUNICIPALITY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'MUNICIPALITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MUNICIPALITY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[296].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MUNICIPALITY' field in the FML buffer.
     *
     * @return Number of values defined for 'MUNICIPALITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MUNICIPALITY_size() throws FMLManipulationException {
        return (this.fmlBuffer[296].getCount());
    }

    /**
     * Retrieves the value of the 'EXT_TRX_STS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EXT_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXT_TRX_STS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[297].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXT_TRX_STS' field in the FML buffer.
     *
     * @return Number of values defined for 'EXT_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXT_TRX_STS_size() throws FMLManipulationException {
        return (this.fmlBuffer[297].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_STS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'LAST_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_TRX_STS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[298].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_STS' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_STS_size() throws FMLManipulationException {
        return (this.fmlBuffer[298].getCount());
    }

    /**
     * Retrieves the value of the 'INITI_TIMESTAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'INITI_TIMESTAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INITI_TIMESTAMP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[299].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INITI_TIMESTAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'INITI_TIMESTAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INITI_TIMESTAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[299].getCount());
    }

    /**
     * Retrieves the value of the 'OTHER_OPERATOR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'OTHER_OPERATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OTHER_OPERATOR(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[300].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'OTHER_OPERATOR' field in the FML buffer.
     *
     * @return Number of values defined for 'OTHER_OPERATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OTHER_OPERATOR_size() throws FMLManipulationException {
        return (this.fmlBuffer[300].getCount());
    }

    /**
     * Retrieves the value of the 'POINT_OF_CONNECTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'POINT_OF_CONNECTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POINT_OF_CONNECTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[301].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'POINT_OF_CONNECTION' field in the FML buffer.
     *
     * @return Number of values defined for 'POINT_OF_CONNECTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POINT_OF_CONNECTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[301].getCount());
    }

    /**
     * Retrieves the value of the 'RANGE_UPD_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RANGE_UPD_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RANGE_UPD_TP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[302].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'RANGE_UPD_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'RANGE_UPD_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RANGE_UPD_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[302].getCount());
    }

    /**
     * Retrieves the value of the 'CSNPSPC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CSNPSPC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CSNPSPC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[303].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CSNPSPC' field in the FML buffer.
     *
     * @return Number of values defined for 'CSNPSPC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CSNPSPC_size() throws FMLManipulationException {
        return (this.fmlBuffer[303].getCount());
    }

    /**
     * Retrieves the value of the 'ROUTING_INFO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ROUTING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROUTING_INFO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[304].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROUTING_INFO' field in the FML buffer.
     *
     * @return Number of values defined for 'ROUTING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROUTING_INFO_size() throws FMLManipulationException {
        return (this.fmlBuffer[304].getCount());
    }

    /**
     * Retrieves the value of the 'RATING_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RATING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RATING_TP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[305].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RATING_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'RATING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RATING_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[305].getCount());
    }

    /**
     * Retrieves the value of the 'MAN_AUT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'MAN_AUT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MAN_AUT(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[306].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MAN_AUT' field in the FML buffer.
     *
     * @return Number of values defined for 'MAN_AUT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAN_AUT_size() throws FMLManipulationException {
        return (this.fmlBuffer[306].getCount());
    }

    /**
     * Retrieves the value of the 'TERM_CONF_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TERM_CONF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TERM_CONF_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[307].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TERM_CONF_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'TERM_CONF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TERM_CONF_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[307].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECSERVICE_PROVIDER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECSERVICE_PROVIDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECSERVICE_PROVIDER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[308].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECSERVICE_PROVIDER' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECSERVICE_PROVIDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECSERVICE_PROVIDER_size() throws FMLManipulationException {
        return (this.fmlBuffer[308].getCount());
    }

    /**
     * Retrieves the value of the 'NP_CARD_STS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NP_CARD_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NP_CARD_STS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[309].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NP_CARD_STS' field in the FML buffer.
     *
     * @return Number of values defined for 'NP_CARD_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NP_CARD_STS_size() throws FMLManipulationException {
        return (this.fmlBuffer[309].getCount());
    }

    /**
     * Retrieves the value of the 'CHARGING_INFO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CHARGING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHARGING_INFO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[310].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHARGING_INFO' field in the FML buffer.
     *
     * @return Number of values defined for 'CHARGING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHARGING_INFO_size() throws FMLManipulationException {
        return (this.fmlBuffer[310].getCount());
    }

    /**
     * Retrieves the value of the 'DIRECTORY_INFO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'DIRECTORY_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DIRECTORY_INFO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[311].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DIRECTORY_INFO' field in the FML buffer.
     *
     * @return Number of values defined for 'DIRECTORY_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DIRECTORY_INFO_size() throws FMLManipulationException {
        return (this.fmlBuffer[311].getCount());
    }

    /**
     * Retrieves the value of the 'NUM_PORTED_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NUM_PORTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NUM_PORTED_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[312].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NUM_PORTED_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'NUM_PORTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NUM_PORTED_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[312].getCount());
    }

    /**
     * Retrieves the value of the 'PORTING_CASE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORTING_CASE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORTING_CASE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[313].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PORTING_CASE' field in the FML buffer.
     *
     * @return Number of values defined for 'PORTING_CASE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORTING_CASE_size() throws FMLManipulationException {
        return (this.fmlBuffer[313].getCount());
    }

    /**
     * Retrieves the value of the 'PORTING_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORTING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORTING_TP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[314].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PORTING_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'PORTING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORTING_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[314].getCount());
    }

    /**
     * Retrieves the value of the 'RANGE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RANGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RANGE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[315].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RANGE' field in the FML buffer.
     *
     * @return Number of values defined for 'RANGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RANGE_size() throws FMLManipulationException {
        return (this.fmlBuffer[315].getCount());
    }

    /**
     * Retrieves the value of the 'SERIES_COUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'SERIES_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERIES_COUNT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[316].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERIES_COUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'SERIES_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERIES_COUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[316].getCount());
    }

    /**
     * Retrieves the value of the 'EIDNODSIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EIDNODSIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[317].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EIDNODSIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'EIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EIDNODSIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[317].getCount());
    }

    /**
     * Retrieves the value of the 'EIDNTYP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EIDNTYP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[318].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EIDNTYP' field in the FML buffer.
     *
     * @return Number of values defined for 'EIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EIDNTYP_size() throws FMLManipulationException {
        return (this.fmlBuffer[318].getCount());
    }

    /**
     * Retrieves the value of the 'EIDNTYPNUMB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'EIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EIDNTYPNUMB(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[319].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EIDNTYPNUMB' field in the FML buffer.
     *
     * @return Number of values defined for 'EIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EIDNTYPNUMB_size() throws FMLManipulationException {
        return (this.fmlBuffer[319].getCount());
    }

    /**
     * Retrieves the value of the 'NEIDNODSIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NEIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEIDNODSIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[320].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEIDNODSIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'NEIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEIDNODSIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[320].getCount());
    }

    /**
     * Retrieves the value of the 'NEIDNTYP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NEIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEIDNTYP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[321].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEIDNTYP' field in the FML buffer.
     *
     * @return Number of values defined for 'NEIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEIDNTYP_size() throws FMLManipulationException {
        return (this.fmlBuffer[321].getCount());
    }

    /**
     * Retrieves the value of the 'NEIDNTYPNUMB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NEIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEIDNTYPNUMB(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[322].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEIDNTYPNUMB' field in the FML buffer.
     *
     * @return Number of values defined for 'NEIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEIDNTYPNUMB_size() throws FMLManipulationException {
        return (this.fmlBuffer[322].getCount());
    }

    /**
     * Retrieves the value of the 'CONTACT_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTACT_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[323].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTACT_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTACT_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[323].getCount());
    }

    /**
     * Retrieves the value of the 'CONTACT_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTACT_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[324].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTACT_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTACT_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[324].getCount());
    }

    /**
     * Retrieves the value of the 'CONTACT_EMAIL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTACT_EMAIL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[325].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTACT_EMAIL' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTACT_EMAIL_size() throws FMLManipulationException {
        return (this.fmlBuffer[325].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_CONTACT_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ERROR_CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERROR_CONTACT_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[326].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_CONTACT_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_CONTACT_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[326].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_CONTACT_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ERROR_CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERROR_CONTACT_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[327].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_CONTACT_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_CONTACT_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[327].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_CONTACT_EMAIL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ERROR_CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERROR_CONTACT_EMAIL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[328].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_CONTACT_EMAIL' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_CONTACT_EMAIL_size() throws FMLManipulationException {
        return (this.fmlBuffer[328].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[329].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_1' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[329].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[330].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_2' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[330].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_3(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[331].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_3' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[331].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_4(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[332].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_4' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[332].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_5(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[333].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_5' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[333].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_6(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[334].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_6' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[334].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_7(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[335].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_7' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_7_size() throws FMLManipulationException {
        return (this.fmlBuffer[335].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_8(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[336].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_8' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_8_size() throws FMLManipulationException {
        return (this.fmlBuffer[336].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_9(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[337].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_9' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_9_size() throws FMLManipulationException {
        return (this.fmlBuffer[337].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TEXT_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_10(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[338].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_10' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_10_size() throws FMLManipulationException {
        return (this.fmlBuffer[338].getCount());
    }

    /**
     * Retrieves the value of the 'RPSP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RPSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RPSP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[339].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RPSP' field in the FML buffer.
     *
     * @return Number of values defined for 'RPSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RPSP_size() throws FMLManipulationException {
        return (this.fmlBuffer[339].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_SENT_DATETIME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'TRX_SENT_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_SENT_DATETIME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[340].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_SENT_DATETIME' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_SENT_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_SENT_DATETIME_size() throws FMLManipulationException {
        return (this.fmlBuffer[340].getCount());
    }

    /**
     * Retrieves the value of the 'ORIGINATING_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ORIGINATING_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORIGINATING_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[341].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORIGINATING_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'ORIGINATING_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORIGINATING_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[341].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETRECICC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXDETRECICC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETRECICC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[342].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETRECICC' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETRECICC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETRECICC_size() throws FMLManipulationException {
        return (this.fmlBuffer[342].getCount());
    }

    /**
     * Retrieves the value of the 'COORDINATION_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'COORDINATION_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COORDINATION_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[343].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'COORDINATION_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'COORDINATION_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COORDINATION_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[343].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[344].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_size() throws FMLManipulationException {
        return (this.fmlBuffer[344].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_MAIN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_MAIN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_MAIN(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[345].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_MAIN' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_MAIN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_MAIN_size() throws FMLManipulationException {
        return (this.fmlBuffer[345].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL1(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[346].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL1' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL1_size() throws FMLManipulationException {
        return (this.fmlBuffer[346].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL2(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[347].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL2' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL2_size() throws FMLManipulationException {
        return (this.fmlBuffer[347].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL3(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[348].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL3' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL3_size() throws FMLManipulationException {
        return (this.fmlBuffer[348].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL4(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[349].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL4' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL4_size() throws FMLManipulationException {
        return (this.fmlBuffer[349].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL5(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[350].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL5' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL5_size() throws FMLManipulationException {
        return (this.fmlBuffer[350].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL6(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[351].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL6' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL6_size() throws FMLManipulationException {
        return (this.fmlBuffer[351].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL7(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[352].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL7' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL7_size() throws FMLManipulationException {
        return (this.fmlBuffer[352].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL8(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[353].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL8' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL8_size() throws FMLManipulationException {
        return (this.fmlBuffer[353].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL9(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[354].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL9' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL9_size() throws FMLManipulationException {
        return (this.fmlBuffer[354].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'PORT_ENDED_ADDITIONAL10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL10(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[355].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL10' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL10_size() throws FMLManipulationException {
        return (this.fmlBuffer[355].getCount());
    }

    /**
     * Retrieves the value of the 'DTSP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'DTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DTSP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[356].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DTSP' field in the FML buffer.
     *
     * @return Number of values defined for 'DTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DTSP_size() throws FMLManipulationException {
        return (this.fmlBuffer[356].getCount());
    }

    /**
     * Retrieves the value of the 'RTSP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'RTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RTSP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[357].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RTSP' field in the FML buffer.
     *
     * @return Number of values defined for 'RTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RTSP_size() throws FMLManipulationException {
        return (this.fmlBuffer[357].getCount());
    }
}