package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class BlLsUBChgOutput extends ServiceOutput {

    /**
     * Creates a new instance of BlLsUBChgOutput.
     *
     * @throws FMLManipulationException
     */
    public BlLsUBChgOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public BlLsUBChgOutput() {
    }

    /**
     * Creates a new instance of BlLsUBChgOutput.
     *
     * @param ds Output dataset from BlLsUBChg service.
     * @throws FMLManipulationException
     */
    public BlLsUBChgOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        if ("19.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[117];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("ROOT_BAN", FmlField.TYPE_INTEGER, -1, null, 2, 600);
            this.fmlBuffer[3] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 3, 600);
            this.fmlBuffer[4] = new FmlField("VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 4, 600);
            this.fmlBuffer[5] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 5, 600);
            this.fmlBuffer[6] = new FmlField("ENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 6, 600);
            this.fmlBuffer[7] = new FmlField("ACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 7, 600);
            this.fmlBuffer[8] = new FmlField("PRIOD_CVRG_ST_DATE", FmlField.TYPE_STRING, 9, null, 8, 600);
            this.fmlBuffer[9] = new FmlField("PRIOD_CVRG_ND_DATE", FmlField.TYPE_STRING, 9, null, 9, 600);
            this.fmlBuffer[10] = new FmlField("CHG_CREATION_DATE", FmlField.TYPE_STRING, 9, null, 10, 600);
            this.fmlBuffer[11] = new FmlField("ACTV_CODE", FmlField.TYPE_STRING, 5, null, 11, 600);
            this.fmlBuffer[12] = new FmlField("ACTV_REASON_CODE", FmlField.TYPE_STRING, 7, null, 12, 600);
            this.fmlBuffer[13] = new FmlField("ACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 13, 600);
            this.fmlBuffer[14] = new FmlField("DURATION", FmlField.TYPE_DOUBLE, -1, null, 14, 600);
            this.fmlBuffer[15] = new FmlField("IM_ALLOWED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 15, 600);
            this.fmlBuffer[16] = new FmlField("IM_ALLOWED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 16, 600);
            this.fmlBuffer[17] = new FmlField("IM_ALLOWED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 17, 600);
            this.fmlBuffer[18] = new FmlField("IM_ALLOWED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 18, 600);
            this.fmlBuffer[19] = new FmlField("IM_ALLOWED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 19, 600);
            this.fmlBuffer[20] = new FmlField("IM_ALLOWED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 20, 600);
            this.fmlBuffer[21] = new FmlField("IM_ALLOWED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 21, 600);
            this.fmlBuffer[22] = new FmlField("CTN_IM_USED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 22, 600);
            this.fmlBuffer[23] = new FmlField("CTN_IM_USED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 23, 600);
            this.fmlBuffer[24] = new FmlField("CTN_IM_USED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 24, 600);
            this.fmlBuffer[25] = new FmlField("CTN_IM_USED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 25, 600);
            this.fmlBuffer[26] = new FmlField("CTN_IM_USED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 26, 600);
            this.fmlBuffer[27] = new FmlField("CTN_IM_USED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 27, 600);
            this.fmlBuffer[28] = new FmlField("CTN_IM_USED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 28, 600);
            this.fmlBuffer[29] = new FmlField("NUM_OF_CALLS", FmlField.TYPE_INTEGER, -1, null, 29, 600);
            this.fmlBuffer[30] = new FmlField("FEATURE_CODE", FmlField.TYPE_STRING, 7, null, 30, 600);
            this.fmlBuffer[31] = new FmlField("FTR_REVENUE_CODE", FmlField.TYPE_STRING, 4, null, 31, 600);
            this.fmlBuffer[32] = new FmlField("FEATURE_CATEGORY", FmlField.TYPE_STRING, 5, null, 32, 600);
            this.fmlBuffer[33] = new FmlField("BALANCE_IMPACT_CODE", FmlField.TYPE_BYTE, -1, null, 33, 600);
            this.fmlBuffer[34] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 34, 600);
            this.fmlBuffer[35] = new FmlField("SOC_VER_NO", FmlField.TYPE_INTEGER, -1, null, 35, 600);
            this.fmlBuffer[36] = new FmlField("TOLL_RS_CODE", FmlField.TYPE_STRING, 10, null, 36, 600);
            this.fmlBuffer[37] = new FmlField("SOURCE_APPL_CODE", FmlField.TYPE_BYTE, -1, null, 37, 600);
            this.fmlBuffer[38] = new FmlField("VAT_AMT", FmlField.TYPE_DOUBLE, -1, null, 38, 600);
            this.fmlBuffer[39] = new FmlField("VAT_EXMP_AMT", FmlField.TYPE_DOUBLE, -1, null, 39, 600);
            this.fmlBuffer[40] = new FmlField("TAX_CODE", FmlField.TYPE_BYTE, -1, null, 40, 600);
            this.fmlBuffer[41] = new FmlField("DISCOUNT_PCT", FmlField.TYPE_DOUBLE, -1, null, 41, 600);
            this.fmlBuffer[42] = new FmlField("DISCOUNT_CODE", FmlField.TYPE_STRING, 10, null, 42, 600);
            this.fmlBuffer[43] = new FmlField("CREDIT_LEVEL", FmlField.TYPE_BYTE, -1, null, 43, 600);
            this.fmlBuffer[44] = new FmlField("ACTION_DIRECTION_CD", FmlField.TYPE_BYTE, -1, null, 44, 600);
            this.fmlBuffer[45] = new FmlField("UTC_DISCOUNT_TYPE", FmlField.TYPE_STRING, 3, null, 45, 600);
            this.fmlBuffer[46] = new FmlField("UTC_FROM_TO_BAN", FmlField.TYPE_INTEGER, -1, null, 46, 600);
            this.fmlBuffer[47] = new FmlField("UTC_FROM_SUBSCRIBER", FmlField.TYPE_STRING, 21, null, 47, 600);
            this.fmlBuffer[48] = new FmlField("CHANNEL_SEIZURE_DT", FmlField.TYPE_STRING, 15, null, 48, 600);
            this.fmlBuffer[49] = new FmlField("MESSAGE_SWITCH_ID", FmlField.TYPE_STRING, 8, null, 49, 600);
            this.fmlBuffer[50] = new FmlField("MESSAGE_IDENTIFIER", FmlField.TYPE_STRING, 25, null, 50, 600);
            this.fmlBuffer[51] = new FmlField("RERATE_REQUIRED_IND", FmlField.TYPE_BYTE, -1, null, 51, 600);
            this.fmlBuffer[52] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 52, 600);
            this.fmlBuffer[53] = new FmlField("CHARGE_TYPE", FmlField.TYPE_BYTE, -1, null, 53, 600);
            this.fmlBuffer[54] = new FmlField("ADJ_REVERSAL_IND", FmlField.TYPE_BYTE, -1, null, 54, 600);
            this.fmlBuffer[55] = new FmlField("VCHR_NUM_OF_ADJ_REV", FmlField.TYPE_STRING, 14, null, 55, 600);
            this.fmlBuffer[56] = new FmlField("UNIT_MEASURE_CODE", FmlField.TYPE_BYTE, -1, null, 56, 600);
            this.fmlBuffer[57] = new FmlField("MATCH_TIER_LEVEL", FmlField.TYPE_SHORT, -1, null, 57, 600);
            this.fmlBuffer[58] = new FmlField("SERVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 58, 600);
            this.fmlBuffer[59] = new FmlField("PUBADJROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 59, 1);
            this.fmlBuffer[60] = new FmlField("BLADJROOT_BAN", FmlField.TYPE_INTEGER, -1, null, 60, 500);
            this.fmlBuffer[61] = new FmlField("BLADJBAN", FmlField.TYPE_INTEGER, -1, null, 61, 500);
            this.fmlBuffer[62] = new FmlField("BLADJVOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 62, 500);
            this.fmlBuffer[63] = new FmlField("BLADJSUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 63, 500);
            this.fmlBuffer[64] = new FmlField("BLADJENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 64, 500);
            this.fmlBuffer[65] = new FmlField("BLADJACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 65, 500);
            this.fmlBuffer[66] = new FmlField("BLADJPRIOD_CVRG_ST_DATE", FmlField.TYPE_STRING, 9, null, 66, 500);
            this.fmlBuffer[67] = new FmlField("BLADJPRIOD_CVRG_ND_DATE", FmlField.TYPE_STRING, 9, null, 67, 500);
            this.fmlBuffer[68] = new FmlField("BLADJCHG_CREATION_DATE", FmlField.TYPE_STRING, 9, null, 68, 500);
            this.fmlBuffer[69] = new FmlField("BLADJACTV_CODE", FmlField.TYPE_STRING, 5, null, 69, 500);
            this.fmlBuffer[70] = new FmlField("BLADJACTV_REASON_CODE", FmlField.TYPE_STRING, 7, null, 70, 500);
            this.fmlBuffer[71] = new FmlField("BLADJACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 71, 500);
            this.fmlBuffer[72] = new FmlField("BLADJDURATION", FmlField.TYPE_DOUBLE, -1, null, 72, 500);
            this.fmlBuffer[73] = new FmlField("BLADJIM_ALLOWED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 73, 500);
            this.fmlBuffer[74] = new FmlField("BLADJIM_ALLOWED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 74, 500);
            this.fmlBuffer[75] = new FmlField("BLADJIM_ALLOWED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 75, 500);
            this.fmlBuffer[76] = new FmlField("BLADJIM_ALLOWED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 76, 500);
            this.fmlBuffer[77] = new FmlField("BLADJIM_ALLOWED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 77, 500);
            this.fmlBuffer[78] = new FmlField("BLADJIM_ALLOWED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 78, 500);
            this.fmlBuffer[79] = new FmlField("BLADJIM_ALLOWED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 79, 500);
            this.fmlBuffer[80] = new FmlField("BLADJCTN_IM_USED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 80, 500);
            this.fmlBuffer[81] = new FmlField("BLADJCTN_IM_USED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 81, 500);
            this.fmlBuffer[82] = new FmlField("BLADJCTN_IM_USED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 82, 500);
            this.fmlBuffer[83] = new FmlField("BLADJCTN_IM_USED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 83, 500);
            this.fmlBuffer[84] = new FmlField("BLADJCTN_IM_USED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 84, 500);
            this.fmlBuffer[85] = new FmlField("BLADJCTN_IM_USED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 85, 500);
            this.fmlBuffer[86] = new FmlField("BLADJCTN_IM_USED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 86, 500);
            this.fmlBuffer[87] = new FmlField("BLADJNUM_OF_CALLS", FmlField.TYPE_INTEGER, -1, null, 87, 500);
            this.fmlBuffer[88] = new FmlField("BLADJFEATURE_CODE", FmlField.TYPE_STRING, 7, null, 88, 500);
            this.fmlBuffer[89] = new FmlField("BLADJFTR_REVENUE_CODE", FmlField.TYPE_STRING, 4, null, 89, 500);
            this.fmlBuffer[90] = new FmlField("BLADJFEATURE_CATEGORY", FmlField.TYPE_STRING, 5, null, 90, 500);
            this.fmlBuffer[91] = new FmlField("BLADJBALANCE_IMPACT_CODE", FmlField.TYPE_BYTE, -1, null, 91, 500);
            this.fmlBuffer[92] = new FmlField("BLADJSOC", FmlField.TYPE_STRING, 10, null, 92, 500);
            this.fmlBuffer[93] = new FmlField("BLADJSOC_VER_NO", FmlField.TYPE_INTEGER, -1, null, 93, 500);
            this.fmlBuffer[94] = new FmlField("BLADJTOLL_RS_CODE", FmlField.TYPE_STRING, 10, null, 94, 500);
            this.fmlBuffer[95] = new FmlField("BLADJSOURCE_APPL_CODE", FmlField.TYPE_BYTE, -1, null, 95, 500);
            this.fmlBuffer[96] = new FmlField("BLADJVAT_AMT", FmlField.TYPE_DOUBLE, -1, null, 96, 500);
            this.fmlBuffer[97] = new FmlField("BLADJVAT_EXMP_AMT", FmlField.TYPE_DOUBLE, -1, null, 97, 500);
            this.fmlBuffer[98] = new FmlField("BLADJTAX_CODE", FmlField.TYPE_BYTE, -1, null, 98, 500);
            this.fmlBuffer[99] = new FmlField("BLADJDISCOUNT_PCT", FmlField.TYPE_DOUBLE, -1, null, 99, 500);
            this.fmlBuffer[100] = new FmlField("BLADJDISCOUNT_CODE", FmlField.TYPE_STRING, 10, null, 100, 500);
            this.fmlBuffer[101] = new FmlField("BLADJCREDIT_LEVEL", FmlField.TYPE_BYTE, -1, null, 101, 500);
            this.fmlBuffer[102] = new FmlField("BLADJACTION_DIRECTION_CD", FmlField.TYPE_BYTE, -1, null, 102, 500);
            this.fmlBuffer[103] = new FmlField("BLADJUTC_DISCOUNT_TYPE", FmlField.TYPE_STRING, 3, null, 103, 500);
            this.fmlBuffer[104] = new FmlField("BLADJUTC_FROM_TO_BAN", FmlField.TYPE_INTEGER, -1, null, 104, 500);
            this.fmlBuffer[105] = new FmlField("BLADJUTC_FROM_SUBSCRIBER", FmlField.TYPE_STRING, 21, null, 105, 500);
            this.fmlBuffer[106] = new FmlField("BLADJCHANNEL_SEIZURE_DT", FmlField.TYPE_STRING, 15, null, 106, 500);
            this.fmlBuffer[107] = new FmlField("BLADJMESSAGE_SWITCH_ID", FmlField.TYPE_STRING, 8, null, 107, 500);
            this.fmlBuffer[108] = new FmlField("BLADJMESSAGE_IDENTIFIER", FmlField.TYPE_STRING, 25, null, 108, 500);
            this.fmlBuffer[109] = new FmlField("BLADJRERATE_REQUIRED_IND", FmlField.TYPE_BYTE, -1, null, 109, 500);
            this.fmlBuffer[110] = new FmlField("BLADJBL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 110, 500);
            this.fmlBuffer[111] = new FmlField("BLADJCHARGE_TYPE", FmlField.TYPE_BYTE, -1, null, 111, 500);
            this.fmlBuffer[112] = new FmlField("BLADJADJ_REVERSAL_IND", FmlField.TYPE_BYTE, -1, null, 112, 500);
            this.fmlBuffer[113] = new FmlField("BLADJVCHR_NUM_OF_ADJ_REV", FmlField.TYPE_STRING, 14, null, 113, 500);
            this.fmlBuffer[114] = new FmlField("BLADJUNIT_MEASURE_CODE", FmlField.TYPE_BYTE, -1, null, 114, 500);
            this.fmlBuffer[115] = new FmlField("BLADJMATCH_TIER_LEVEL", FmlField.TYPE_SHORT, -1, null, 115, 500);
            this.fmlBuffer[116] = new FmlField("BLADJSERVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 116, 500);
        } else if ("18.0.7.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[117];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("ROOT_BAN", FmlField.TYPE_INTEGER, -1, null, 2, 600);
            this.fmlBuffer[3] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 3, 600);
            this.fmlBuffer[4] = new FmlField("VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 4, 600);
            this.fmlBuffer[5] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 5, 600);
            this.fmlBuffer[6] = new FmlField("ENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 6, 600);
            this.fmlBuffer[7] = new FmlField("ACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 7, 600);
            this.fmlBuffer[8] = new FmlField("PRIOD_CVRG_ST_DATE", FmlField.TYPE_STRING, 9, null, 8, 600);
            this.fmlBuffer[9] = new FmlField("PRIOD_CVRG_ND_DATE", FmlField.TYPE_STRING, 9, null, 9, 600);
            this.fmlBuffer[10] = new FmlField("CHG_CREATION_DATE", FmlField.TYPE_STRING, 9, null, 10, 600);
            this.fmlBuffer[11] = new FmlField("ACTV_CODE", FmlField.TYPE_STRING, 5, null, 11, 600);
            this.fmlBuffer[12] = new FmlField("ACTV_REASON_CODE", FmlField.TYPE_STRING, 7, null, 12, 600);
            this.fmlBuffer[13] = new FmlField("ACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 13, 600);
            this.fmlBuffer[14] = new FmlField("DURATION", FmlField.TYPE_DOUBLE, -1, null, 14, 600);
            this.fmlBuffer[15] = new FmlField("IM_ALLOWED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 15, 600);
            this.fmlBuffer[16] = new FmlField("IM_ALLOWED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 16, 600);
            this.fmlBuffer[17] = new FmlField("IM_ALLOWED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 17, 600);
            this.fmlBuffer[18] = new FmlField("IM_ALLOWED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 18, 600);
            this.fmlBuffer[19] = new FmlField("IM_ALLOWED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 19, 600);
            this.fmlBuffer[20] = new FmlField("IM_ALLOWED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 20, 600);
            this.fmlBuffer[21] = new FmlField("IM_ALLOWED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 21, 600);
            this.fmlBuffer[22] = new FmlField("CTN_IM_USED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 22, 600);
            this.fmlBuffer[23] = new FmlField("CTN_IM_USED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 23, 600);
            this.fmlBuffer[24] = new FmlField("CTN_IM_USED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 24, 600);
            this.fmlBuffer[25] = new FmlField("CTN_IM_USED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 25, 600);
            this.fmlBuffer[26] = new FmlField("CTN_IM_USED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 26, 600);
            this.fmlBuffer[27] = new FmlField("CTN_IM_USED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 27, 600);
            this.fmlBuffer[28] = new FmlField("CTN_IM_USED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 28, 600);
            this.fmlBuffer[29] = new FmlField("NUM_OF_CALLS", FmlField.TYPE_INTEGER, -1, null, 29, 600);
            this.fmlBuffer[30] = new FmlField("FEATURE_CODE", FmlField.TYPE_STRING, 7, null, 30, 600);
            this.fmlBuffer[31] = new FmlField("FTR_REVENUE_CODE", FmlField.TYPE_STRING, 4, null, 31, 600);
            this.fmlBuffer[32] = new FmlField("FEATURE_CATEGORY", FmlField.TYPE_STRING, 5, null, 32, 600);
            this.fmlBuffer[33] = new FmlField("BALANCE_IMPACT_CODE", FmlField.TYPE_BYTE, -1, null, 33, 600);
            this.fmlBuffer[34] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 34, 600);
            this.fmlBuffer[35] = new FmlField("SOC_VER_NO", FmlField.TYPE_INTEGER, -1, null, 35, 600);
            this.fmlBuffer[36] = new FmlField("TOLL_RS_CODE", FmlField.TYPE_STRING, 10, null, 36, 600);
            this.fmlBuffer[37] = new FmlField("SOURCE_APPL_CODE", FmlField.TYPE_BYTE, -1, null, 37, 600);
            this.fmlBuffer[38] = new FmlField("VAT_AMT", FmlField.TYPE_DOUBLE, -1, null, 38, 600);
            this.fmlBuffer[39] = new FmlField("VAT_EXMP_AMT", FmlField.TYPE_DOUBLE, -1, null, 39, 600);
            this.fmlBuffer[40] = new FmlField("TAX_CODE", FmlField.TYPE_BYTE, -1, null, 40, 600);
            this.fmlBuffer[41] = new FmlField("DISCOUNT_PCT", FmlField.TYPE_DOUBLE, -1, null, 41, 600);
            this.fmlBuffer[42] = new FmlField("DISCOUNT_CODE", FmlField.TYPE_STRING, 10, null, 42, 600);
            this.fmlBuffer[43] = new FmlField("CREDIT_LEVEL", FmlField.TYPE_BYTE, -1, null, 43, 600);
            this.fmlBuffer[44] = new FmlField("ACTION_DIRECTION_CD", FmlField.TYPE_BYTE, -1, null, 44, 600);
            this.fmlBuffer[45] = new FmlField("UTC_DISCOUNT_TYPE", FmlField.TYPE_STRING, 3, null, 45, 600);
            this.fmlBuffer[46] = new FmlField("UTC_FROM_TO_BAN", FmlField.TYPE_INTEGER, -1, null, 46, 600);
            this.fmlBuffer[47] = new FmlField("UTC_FROM_SUBSCRIBER", FmlField.TYPE_STRING, 21, null, 47, 600);
            this.fmlBuffer[48] = new FmlField("CHANNEL_SEIZURE_DT", FmlField.TYPE_STRING, 15, null, 48, 600);
            this.fmlBuffer[49] = new FmlField("MESSAGE_SWITCH_ID", FmlField.TYPE_STRING, 8, null, 49, 600);
            this.fmlBuffer[50] = new FmlField("MESSAGE_IDENTIFIER", FmlField.TYPE_STRING, 25, null, 50, 600);
            this.fmlBuffer[51] = new FmlField("RERATE_REQUIRED_IND", FmlField.TYPE_BYTE, -1, null, 51, 600);
            this.fmlBuffer[52] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 52, 600);
            this.fmlBuffer[53] = new FmlField("CHARGE_TYPE", FmlField.TYPE_BYTE, -1, null, 53, 600);
            this.fmlBuffer[54] = new FmlField("ADJ_REVERSAL_IND", FmlField.TYPE_BYTE, -1, null, 54, 600);
            this.fmlBuffer[55] = new FmlField("VCHR_NUM_OF_ADJ_REV", FmlField.TYPE_STRING, 14, null, 55, 600);
            this.fmlBuffer[56] = new FmlField("UNIT_MEASURE_CODE", FmlField.TYPE_BYTE, -1, null, 56, 600);
            this.fmlBuffer[57] = new FmlField("MATCH_TIER_LEVEL", FmlField.TYPE_SHORT, -1, null, 57, 600);
            this.fmlBuffer[58] = new FmlField("SERVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 58, 600);
            this.fmlBuffer[59] = new FmlField("PUBADJROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 59, 1);
            this.fmlBuffer[60] = new FmlField("BLADJROOT_BAN", FmlField.TYPE_INTEGER, -1, null, 60, 200);
            this.fmlBuffer[61] = new FmlField("BLADJBAN", FmlField.TYPE_INTEGER, -1, null, 61, 200);
            this.fmlBuffer[62] = new FmlField("BLADJVOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 62, 200);
            this.fmlBuffer[63] = new FmlField("BLADJSUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 63, 200);
            this.fmlBuffer[64] = new FmlField("BLADJENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 64, 200);
            this.fmlBuffer[65] = new FmlField("BLADJACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 65, 200);
            this.fmlBuffer[66] = new FmlField("BLADJPRIOD_CVRG_ST_DATE", FmlField.TYPE_STRING, 9, null, 66, 200);
            this.fmlBuffer[67] = new FmlField("BLADJPRIOD_CVRG_ND_DATE", FmlField.TYPE_STRING, 9, null, 67, 200);
            this.fmlBuffer[68] = new FmlField("BLADJCHG_CREATION_DATE", FmlField.TYPE_STRING, 9, null, 68, 200);
            this.fmlBuffer[69] = new FmlField("BLADJACTV_CODE", FmlField.TYPE_STRING, 5, null, 69, 200);
            this.fmlBuffer[70] = new FmlField("BLADJACTV_REASON_CODE", FmlField.TYPE_STRING, 7, null, 70, 200);
            this.fmlBuffer[71] = new FmlField("BLADJACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 71, 200);
            this.fmlBuffer[72] = new FmlField("BLADJDURATION", FmlField.TYPE_DOUBLE, -1, null, 72, 200);
            this.fmlBuffer[73] = new FmlField("BLADJIM_ALLOWED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 73, 200);
            this.fmlBuffer[74] = new FmlField("BLADJIM_ALLOWED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 74, 200);
            this.fmlBuffer[75] = new FmlField("BLADJIM_ALLOWED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 75, 200);
            this.fmlBuffer[76] = new FmlField("BLADJIM_ALLOWED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 76, 200);
            this.fmlBuffer[77] = new FmlField("BLADJIM_ALLOWED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 77, 200);
            this.fmlBuffer[78] = new FmlField("BLADJIM_ALLOWED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 78, 200);
            this.fmlBuffer[79] = new FmlField("BLADJIM_ALLOWED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 79, 200);
            this.fmlBuffer[80] = new FmlField("BLADJCTN_IM_USED_PRD_1", FmlField.TYPE_DOUBLE, -1, null, 80, 200);
            this.fmlBuffer[81] = new FmlField("BLADJCTN_IM_USED_PRD_2", FmlField.TYPE_DOUBLE, -1, null, 81, 200);
            this.fmlBuffer[82] = new FmlField("BLADJCTN_IM_USED_PRD_3", FmlField.TYPE_DOUBLE, -1, null, 82, 200);
            this.fmlBuffer[83] = new FmlField("BLADJCTN_IM_USED_PRD_4", FmlField.TYPE_DOUBLE, -1, null, 83, 200);
            this.fmlBuffer[84] = new FmlField("BLADJCTN_IM_USED_PRD_5", FmlField.TYPE_DOUBLE, -1, null, 84, 200);
            this.fmlBuffer[85] = new FmlField("BLADJCTN_IM_USED_PRD_6", FmlField.TYPE_DOUBLE, -1, null, 85, 200);
            this.fmlBuffer[86] = new FmlField("BLADJCTN_IM_USED_COMBD", FmlField.TYPE_DOUBLE, -1, null, 86, 200);
            this.fmlBuffer[87] = new FmlField("BLADJNUM_OF_CALLS", FmlField.TYPE_INTEGER, -1, null, 87, 200);
            this.fmlBuffer[88] = new FmlField("BLADJFEATURE_CODE", FmlField.TYPE_STRING, 7, null, 88, 200);
            this.fmlBuffer[89] = new FmlField("BLADJFTR_REVENUE_CODE", FmlField.TYPE_STRING, 4, null, 89, 200);
            this.fmlBuffer[90] = new FmlField("BLADJFEATURE_CATEGORY", FmlField.TYPE_STRING, 5, null, 90, 200);
            this.fmlBuffer[91] = new FmlField("BLADJBALANCE_IMPACT_CODE", FmlField.TYPE_BYTE, -1, null, 91, 200);
            this.fmlBuffer[92] = new FmlField("BLADJSOC", FmlField.TYPE_STRING, 10, null, 92, 200);
            this.fmlBuffer[93] = new FmlField("BLADJSOC_VER_NO", FmlField.TYPE_INTEGER, -1, null, 93, 200);
            this.fmlBuffer[94] = new FmlField("BLADJTOLL_RS_CODE", FmlField.TYPE_STRING, 10, null, 94, 200);
            this.fmlBuffer[95] = new FmlField("BLADJSOURCE_APPL_CODE", FmlField.TYPE_BYTE, -1, null, 95, 200);
            this.fmlBuffer[96] = new FmlField("BLADJVAT_AMT", FmlField.TYPE_DOUBLE, -1, null, 96, 200);
            this.fmlBuffer[97] = new FmlField("BLADJVAT_EXMP_AMT", FmlField.TYPE_DOUBLE, -1, null, 97, 200);
            this.fmlBuffer[98] = new FmlField("BLADJTAX_CODE", FmlField.TYPE_BYTE, -1, null, 98, 200);
            this.fmlBuffer[99] = new FmlField("BLADJDISCOUNT_PCT", FmlField.TYPE_DOUBLE, -1, null, 99, 200);
            this.fmlBuffer[100] = new FmlField("BLADJDISCOUNT_CODE", FmlField.TYPE_STRING, 10, null, 100, 200);
            this.fmlBuffer[101] = new FmlField("BLADJCREDIT_LEVEL", FmlField.TYPE_BYTE, -1, null, 101, 200);
            this.fmlBuffer[102] = new FmlField("BLADJACTION_DIRECTION_CD", FmlField.TYPE_BYTE, -1, null, 102, 200);
            this.fmlBuffer[103] = new FmlField("BLADJUTC_DISCOUNT_TYPE", FmlField.TYPE_STRING, 3, null, 103, 200);
            this.fmlBuffer[104] = new FmlField("BLADJUTC_FROM_TO_BAN", FmlField.TYPE_INTEGER, -1, null, 104, 200);
            this.fmlBuffer[105] = new FmlField("BLADJUTC_FROM_SUBSCRIBER", FmlField.TYPE_STRING, 21, null, 105, 200);
            this.fmlBuffer[106] = new FmlField("BLADJCHANNEL_SEIZURE_DT", FmlField.TYPE_STRING, 15, null, 106, 200);
            this.fmlBuffer[107] = new FmlField("BLADJMESSAGE_SWITCH_ID", FmlField.TYPE_STRING, 8, null, 107, 200);
            this.fmlBuffer[108] = new FmlField("BLADJMESSAGE_IDENTIFIER", FmlField.TYPE_STRING, 25, null, 108, 200);
            this.fmlBuffer[109] = new FmlField("BLADJRERATE_REQUIRED_IND", FmlField.TYPE_BYTE, -1, null, 109, 200);
            this.fmlBuffer[110] = new FmlField("BLADJBL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 110, 200);
            this.fmlBuffer[111] = new FmlField("BLADJCHARGE_TYPE", FmlField.TYPE_BYTE, -1, null, 111, 200);
            this.fmlBuffer[112] = new FmlField("BLADJADJ_REVERSAL_IND", FmlField.TYPE_BYTE, -1, null, 112, 200);
            this.fmlBuffer[113] = new FmlField("BLADJVCHR_NUM_OF_ADJ_REV", FmlField.TYPE_STRING, 14, null, 113, 200);
            this.fmlBuffer[114] = new FmlField("BLADJUNIT_MEASURE_CODE", FmlField.TYPE_BYTE, -1, null, 114, 200);
            this.fmlBuffer[115] = new FmlField("BLADJMATCH_TIER_LEVEL", FmlField.TYPE_SHORT, -1, null, 115, 200);
            this.fmlBuffer[116] = new FmlField("BLADJSERVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 116, 200);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by BlLsUBChgOutput class");
        }
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROOT_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ROOT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROOT_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROOT_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'ROOT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROOT_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[2].getCount());
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'VOUCHER_NUM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_VOUCHER_NUM(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'VOUCHER_NUM' field in the FML buffer.
     *
     * @return Number of values defined for 'VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_VOUCHER_NUM_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ENT_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ENT_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[7].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'PRIOD_CVRG_ST_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PRIOD_CVRG_ST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRIOD_CVRG_ST_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRIOD_CVRG_ST_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'PRIOD_CVRG_ST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRIOD_CVRG_ST_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'PRIOD_CVRG_ND_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PRIOD_CVRG_ND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRIOD_CVRG_ND_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRIOD_CVRG_ND_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'PRIOD_CVRG_ND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRIOD_CVRG_ND_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'CHG_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CHG_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHG_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHG_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CHG_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHG_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_REASON_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_REASON_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_REASON_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_REASON_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ACTV_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'DURATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DURATION(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DURATION' field in the FML buffer.
     *
     * @return Number of values defined for 'DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DURATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_PRD_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_PRD_1(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_PRD_1' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_PRD_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_PRD_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_PRD_2(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_PRD_2' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_PRD_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_PRD_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_PRD_3(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_PRD_3' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_PRD_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_PRD_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_PRD_4(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_PRD_4' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_PRD_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_PRD_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_PRD_5(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_PRD_5' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_PRD_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_PRD_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_PRD_6(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_PRD_6' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_PRD_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'IM_ALLOWED_COMBD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'IM_ALLOWED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_IM_ALLOWED_COMBD(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'IM_ALLOWED_COMBD' field in the FML buffer.
     *
     * @return Number of values defined for 'IM_ALLOWED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IM_ALLOWED_COMBD_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_PRD_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_PRD_1(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_PRD_1' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_PRD_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_PRD_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_PRD_2(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_PRD_2' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_PRD_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_PRD_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_PRD_3(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_PRD_3' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_PRD_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_PRD_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_PRD_4(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_PRD_4' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_PRD_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_PRD_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_PRD_5(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_PRD_5' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_PRD_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_PRD_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_PRD_6(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_PRD_6' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_PRD_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_IM_USED_COMBD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CTN_IM_USED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_CTN_IM_USED_COMBD(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_IM_USED_COMBD' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_IM_USED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_IM_USED_COMBD_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'NUM_OF_CALLS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'NUM_OF_CALLS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NUM_OF_CALLS(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NUM_OF_CALLS' field in the FML buffer.
     *
     * @return Number of values defined for 'NUM_OF_CALLS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NUM_OF_CALLS_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'FTR_REVENUE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FTR_REVENUE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FTR_REVENUE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FTR_REVENUE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'FTR_REVENUE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FTR_REVENUE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE_CATEGORY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FEATURE_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE_CATEGORY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_CATEGORY' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_CATEGORY_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'BALANCE_IMPACT_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BALANCE_IMPACT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BALANCE_IMPACT_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[33].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BALANCE_IMPACT_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BALANCE_IMPACT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BALANCE_IMPACT_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_VER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SOC_VER_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_VER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_VER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'TOLL_RS_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TOLL_RS_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TOLL_RS_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[36].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TOLL_RS_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'TOLL_RS_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TOLL_RS_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'SOURCE_APPL_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOURCE_APPL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOURCE_APPL_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[37].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SOURCE_APPL_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOURCE_APPL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOURCE_APPL_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'VAT_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'VAT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_VAT_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[38].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'VAT_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'VAT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_VAT_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'VAT_EXMP_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'VAT_EXMP_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_VAT_EXMP_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[39].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'VAT_EXMP_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'VAT_EXMP_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_VAT_EXMP_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'TAX_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TAX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TAX_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[40].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TAX_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'TAX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TAX_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'DISCOUNT_PCT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DISCOUNT_PCT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DISCOUNT_PCT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[41].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DISCOUNT_PCT' field in the FML buffer.
     *
     * @return Number of values defined for 'DISCOUNT_PCT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISCOUNT_PCT_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'DISCOUNT_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DISCOUNT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DISCOUNT_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[42].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DISCOUNT_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DISCOUNT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISCOUNT_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'CREDIT_LEVEL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CREDIT_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CREDIT_LEVEL(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[43].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CREDIT_LEVEL' field in the FML buffer.
     *
     * @return Number of values defined for 'CREDIT_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CREDIT_LEVEL_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'ACTION_DIRECTION_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTION_DIRECTION_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTION_DIRECTION_CD(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[44].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTION_DIRECTION_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTION_DIRECTION_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTION_DIRECTION_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'UTC_DISCOUNT_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'UTC_DISCOUNT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_UTC_DISCOUNT_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'UTC_DISCOUNT_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'UTC_DISCOUNT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_UTC_DISCOUNT_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'UTC_FROM_TO_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'UTC_FROM_TO_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_UTC_FROM_TO_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'UTC_FROM_TO_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'UTC_FROM_TO_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_UTC_FROM_TO_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'UTC_FROM_SUBSCRIBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'UTC_FROM_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_UTC_FROM_SUBSCRIBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[47].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'UTC_FROM_SUBSCRIBER' field in the FML buffer.
     *
     * @return Number of values defined for 'UTC_FROM_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_UTC_FROM_SUBSCRIBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[47].getCount());
    }

    /**
     * Retrieves the value of the 'CHANNEL_SEIZURE_DT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CHANNEL_SEIZURE_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHANNEL_SEIZURE_DT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[48].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHANNEL_SEIZURE_DT' field in the FML buffer.
     *
     * @return Number of values defined for 'CHANNEL_SEIZURE_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHANNEL_SEIZURE_DT_size() throws FMLManipulationException {
        return (this.fmlBuffer[48].getCount());
    }

    /**
     * Retrieves the value of the 'MESSAGE_SWITCH_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MESSAGE_SWITCH_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MESSAGE_SWITCH_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[49].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MESSAGE_SWITCH_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'MESSAGE_SWITCH_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MESSAGE_SWITCH_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[49].getCount());
    }

    /**
     * Retrieves the value of the 'MESSAGE_IDENTIFIER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MESSAGE_IDENTIFIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MESSAGE_IDENTIFIER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[50].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MESSAGE_IDENTIFIER' field in the FML buffer.
     *
     * @return Number of values defined for 'MESSAGE_IDENTIFIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MESSAGE_IDENTIFIER_size() throws FMLManipulationException {
        return (this.fmlBuffer[50].getCount());
    }

    /**
     * Retrieves the value of the 'RERATE_REQUIRED_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RERATE_REQUIRED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RERATE_REQUIRED_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[51].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'RERATE_REQUIRED_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'RERATE_REQUIRED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RERATE_REQUIRED_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[51].getCount());
    }

    /**
     * Retrieves the value of the 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BL_IGNORE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[52].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BL_IGNORE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[52].getCount());
    }

    /**
     * Retrieves the value of the 'CHARGE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CHARGE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHARGE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[53].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CHARGE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'CHARGE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHARGE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[53].getCount());
    }

    /**
     * Retrieves the value of the 'ADJ_REVERSAL_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ADJ_REVERSAL_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADJ_REVERSAL_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[54].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADJ_REVERSAL_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'ADJ_REVERSAL_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADJ_REVERSAL_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[54].getCount());
    }

    /**
     * Retrieves the value of the 'VCHR_NUM_OF_ADJ_REV' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'VCHR_NUM_OF_ADJ_REV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_VCHR_NUM_OF_ADJ_REV(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[55].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'VCHR_NUM_OF_ADJ_REV' field in the FML buffer.
     *
     * @return Number of values defined for 'VCHR_NUM_OF_ADJ_REV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_VCHR_NUM_OF_ADJ_REV_size() throws FMLManipulationException {
        return (this.fmlBuffer[55].getCount());
    }

    /**
     * Retrieves the value of the 'UNIT_MEASURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'UNIT_MEASURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_UNIT_MEASURE_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[56].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'UNIT_MEASURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'UNIT_MEASURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_UNIT_MEASURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[56].getCount());
    }

    /**
     * Retrieves the value of the 'MATCH_TIER_LEVEL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MATCH_TIER_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MATCH_TIER_LEVEL(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[57].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MATCH_TIER_LEVEL' field in the FML buffer.
     *
     * @return Number of values defined for 'MATCH_TIER_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MATCH_TIER_LEVEL_size() throws FMLManipulationException {
        return (this.fmlBuffer[57].getCount());
    }

    /**
     * Retrieves the value of the 'SERVICE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SERVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERVICE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[58].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SERVICE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'SERVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERVICE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[58].getCount());
    }

    /**
     * Retrieves the value of the 'PUBADJROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'PUBADJROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PUBADJROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[59].getValue(0));
    }

    /**
     * Retrieves the value of the 'BLADJROOT_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJROOT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJROOT_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[60].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJROOT_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJROOT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJROOT_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[60].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJBAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJBAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJBAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[61].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJBAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJBAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJBAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[61].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJVOUCHER_NUM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJVOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJVOUCHER_NUM(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[62].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJVOUCHER_NUM' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJVOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJVOUCHER_NUM_size() throws FMLManipulationException {
        return (this.fmlBuffer[62].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJSUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJSUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJSUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[63].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJSUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJSUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJSUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[63].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJENT_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJENT_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[64].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJENT_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJENT_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[64].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJACTV_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJACTV_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[65].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJACTV_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJACTV_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[65].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJPRIOD_CVRG_ST_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJPRIOD_CVRG_ST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJPRIOD_CVRG_ST_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[66].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJPRIOD_CVRG_ST_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJPRIOD_CVRG_ST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJPRIOD_CVRG_ST_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[66].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJPRIOD_CVRG_ND_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJPRIOD_CVRG_ND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJPRIOD_CVRG_ND_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[67].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJPRIOD_CVRG_ND_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJPRIOD_CVRG_ND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJPRIOD_CVRG_ND_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[67].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCHG_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCHG_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJCHG_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[68].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCHG_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCHG_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCHG_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[68].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJACTV_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJACTV_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[69].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJACTV_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJACTV_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[69].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJACTV_REASON_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJACTV_REASON_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[70].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJACTV_REASON_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJACTV_REASON_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[70].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJACTV_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJACTV_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[71].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJACTV_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJACTV_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[71].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJDURATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJDURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJDURATION(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[72].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJDURATION' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJDURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJDURATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[72].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_PRD_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_PRD_1(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[73].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_PRD_1' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_PRD_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[73].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_PRD_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_PRD_2(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[74].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_PRD_2' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_PRD_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[74].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_PRD_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_PRD_3(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[75].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_PRD_3' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_PRD_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[75].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_PRD_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_PRD_4(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[76].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_PRD_4' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_PRD_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[76].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_PRD_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_PRD_5(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[77].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_PRD_5' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_PRD_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[77].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_PRD_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_PRD_6(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[78].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_PRD_6' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_PRD_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[78].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJIM_ALLOWED_COMBD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJIM_ALLOWED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJIM_ALLOWED_COMBD(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[79].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJIM_ALLOWED_COMBD' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJIM_ALLOWED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJIM_ALLOWED_COMBD_size() throws FMLManipulationException {
        return (this.fmlBuffer[79].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_PRD_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_PRD_1(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[80].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_PRD_1' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_PRD_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_PRD_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[80].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_PRD_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_PRD_2(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[81].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_PRD_2' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_PRD_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_PRD_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[81].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_PRD_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_PRD_3(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[82].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_PRD_3' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_PRD_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_PRD_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[82].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_PRD_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_PRD_4(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[83].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_PRD_4' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_PRD_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_PRD_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[83].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_PRD_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_PRD_5(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[84].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_PRD_5' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_PRD_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_PRD_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[84].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_PRD_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_PRD_6(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[85].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_PRD_6' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_PRD_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_PRD_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[85].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCTN_IM_USED_COMBD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCTN_IM_USED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJCTN_IM_USED_COMBD(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[86].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCTN_IM_USED_COMBD' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCTN_IM_USED_COMBD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCTN_IM_USED_COMBD_size() throws FMLManipulationException {
        return (this.fmlBuffer[86].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJNUM_OF_CALLS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJNUM_OF_CALLS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJNUM_OF_CALLS(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[87].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJNUM_OF_CALLS' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJNUM_OF_CALLS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJNUM_OF_CALLS_size() throws FMLManipulationException {
        return (this.fmlBuffer[87].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJFEATURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJFEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJFEATURE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[88].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJFEATURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJFEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJFEATURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[88].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJFTR_REVENUE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJFTR_REVENUE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJFTR_REVENUE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[89].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJFTR_REVENUE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJFTR_REVENUE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJFTR_REVENUE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[89].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJFEATURE_CATEGORY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJFEATURE_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJFEATURE_CATEGORY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[90].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJFEATURE_CATEGORY' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJFEATURE_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJFEATURE_CATEGORY_size() throws FMLManipulationException {
        return (this.fmlBuffer[90].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJBALANCE_IMPACT_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJBALANCE_IMPACT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJBALANCE_IMPACT_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[91].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJBALANCE_IMPACT_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJBALANCE_IMPACT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJBALANCE_IMPACT_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[91].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJSOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJSOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJSOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[92].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJSOC' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJSOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJSOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[92].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJSOC_VER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJSOC_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJSOC_VER_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[93].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJSOC_VER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJSOC_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJSOC_VER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[93].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJTOLL_RS_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJTOLL_RS_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJTOLL_RS_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[94].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJTOLL_RS_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJTOLL_RS_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJTOLL_RS_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[94].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJSOURCE_APPL_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJSOURCE_APPL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJSOURCE_APPL_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[95].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJSOURCE_APPL_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJSOURCE_APPL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJSOURCE_APPL_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[95].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJVAT_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJVAT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJVAT_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[96].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJVAT_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJVAT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJVAT_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[96].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJVAT_EXMP_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJVAT_EXMP_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJVAT_EXMP_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[97].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJVAT_EXMP_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJVAT_EXMP_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJVAT_EXMP_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[97].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJTAX_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJTAX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJTAX_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[98].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJTAX_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJTAX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJTAX_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[98].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJDISCOUNT_PCT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJDISCOUNT_PCT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_BLADJDISCOUNT_PCT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[99].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJDISCOUNT_PCT' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJDISCOUNT_PCT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJDISCOUNT_PCT_size() throws FMLManipulationException {
        return (this.fmlBuffer[99].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJDISCOUNT_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJDISCOUNT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJDISCOUNT_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[100].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJDISCOUNT_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJDISCOUNT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJDISCOUNT_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[100].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCREDIT_LEVEL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCREDIT_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJCREDIT_LEVEL(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[101].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJCREDIT_LEVEL' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCREDIT_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCREDIT_LEVEL_size() throws FMLManipulationException {
        return (this.fmlBuffer[101].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJACTION_DIRECTION_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJACTION_DIRECTION_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJACTION_DIRECTION_CD(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[102].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJACTION_DIRECTION_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJACTION_DIRECTION_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJACTION_DIRECTION_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[102].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJUTC_DISCOUNT_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJUTC_DISCOUNT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJUTC_DISCOUNT_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[103].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJUTC_DISCOUNT_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJUTC_DISCOUNT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJUTC_DISCOUNT_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[103].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJUTC_FROM_TO_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJUTC_FROM_TO_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJUTC_FROM_TO_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[104].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJUTC_FROM_TO_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJUTC_FROM_TO_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJUTC_FROM_TO_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[104].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJUTC_FROM_SUBSCRIBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJUTC_FROM_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJUTC_FROM_SUBSCRIBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[105].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJUTC_FROM_SUBSCRIBER' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJUTC_FROM_SUBSCRIBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJUTC_FROM_SUBSCRIBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[105].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCHANNEL_SEIZURE_DT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCHANNEL_SEIZURE_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJCHANNEL_SEIZURE_DT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[106].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJCHANNEL_SEIZURE_DT' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCHANNEL_SEIZURE_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCHANNEL_SEIZURE_DT_size() throws FMLManipulationException {
        return (this.fmlBuffer[106].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJMESSAGE_SWITCH_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJMESSAGE_SWITCH_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJMESSAGE_SWITCH_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[107].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJMESSAGE_SWITCH_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJMESSAGE_SWITCH_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJMESSAGE_SWITCH_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[107].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJMESSAGE_IDENTIFIER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJMESSAGE_IDENTIFIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJMESSAGE_IDENTIFIER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[108].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJMESSAGE_IDENTIFIER' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJMESSAGE_IDENTIFIER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJMESSAGE_IDENTIFIER_size() throws FMLManipulationException {
        return (this.fmlBuffer[108].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJRERATE_REQUIRED_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJRERATE_REQUIRED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJRERATE_REQUIRED_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[109].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJRERATE_REQUIRED_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJRERATE_REQUIRED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJRERATE_REQUIRED_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[109].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJBL_IGNORE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJBL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJBL_IGNORE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[110].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJBL_IGNORE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJBL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJBL_IGNORE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[110].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJCHARGE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJCHARGE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJCHARGE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[111].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJCHARGE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJCHARGE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJCHARGE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[111].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJADJ_REVERSAL_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJADJ_REVERSAL_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJADJ_REVERSAL_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[112].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJADJ_REVERSAL_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJADJ_REVERSAL_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJADJ_REVERSAL_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[112].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJVCHR_NUM_OF_ADJ_REV' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJVCHR_NUM_OF_ADJ_REV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJVCHR_NUM_OF_ADJ_REV(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[113].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BLADJVCHR_NUM_OF_ADJ_REV' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJVCHR_NUM_OF_ADJ_REV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJVCHR_NUM_OF_ADJ_REV_size() throws FMLManipulationException {
        return (this.fmlBuffer[113].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJUNIT_MEASURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJUNIT_MEASURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJUNIT_MEASURE_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[114].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJUNIT_MEASURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJUNIT_MEASURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJUNIT_MEASURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[114].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJMATCH_TIER_LEVEL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJMATCH_TIER_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BLADJMATCH_TIER_LEVEL(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[115].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJMATCH_TIER_LEVEL' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJMATCH_TIER_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJMATCH_TIER_LEVEL_size() throws FMLManipulationException {
        return (this.fmlBuffer[115].getCount());
    }

    /**
     * Retrieves the value of the 'BLADJSERVICE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'BLADJSERVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BLADJSERVICE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[116].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BLADJSERVICE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'BLADJSERVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BLADJSERVICE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[116].getCount());
    }
}