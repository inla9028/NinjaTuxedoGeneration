package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class PnmImHistOutput extends ServiceOutput {

    /**
     * Creates a new instance of PnmImHistOutput.
     *
     * @throws FMLManipulationException
     */
    public PnmImHistOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public PnmImHistOutput() {
    }

    /**
     * Creates a new instance of PnmImHistOutput.
     *
     * @param ds Output dataset from PnmImHist service.
     * @throws FMLManipulationException
     */
    public PnmImHistOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[12];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("CTN", FmlField.TYPE_STRING, 21, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("ROWS_NUMBER", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("CURRENT_CTN", FmlField.TYPE_STRING, 21, null, 3, 100);
        this.fmlBuffer[4] = new FmlField("LAST_TRX_DATE", FmlField.TYPE_STRING, 15, null, 4, 100);
        this.fmlBuffer[5] = new FmlField("STATUS_DESCRIPTION", FmlField.TYPE_STRING, 31, null, 5, 100);
        this.fmlBuffer[6] = new FmlField("TRX_DESCRIPTION", FmlField.TYPE_STRING, 51, null, 6, 100);
        this.fmlBuffer[7] = new FmlField("NL_DSC", FmlField.TYPE_STRING, 31, null, 7, 100);
        this.fmlBuffer[8] = new FmlField("NGP_DSC", FmlField.TYPE_STRING, 31, null, 8, 100);
        this.fmlBuffer[9] = new FmlField("LAST_TRX_UID", FmlField.TYPE_INTEGER, -1, null, 9, 100);
        this.fmlBuffer[10] = new FmlField("REASON", FmlField.TYPE_STRING, 31, null, 10, 100);
        this.fmlBuffer[11] = new FmlField("NL_CODE", FmlField.TYPE_STRING, 4, null, 11, 100);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'CTN' field in the FML buffer.
     *
     * @return Value of 'CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CTN() throws FMLManipulationException {
        return ((String) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWS_NUMBER' field in the FML buffer.
     *
     * @return Value of 'ROWS_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWS_NUMBER() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'CURRENT_CTN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'CURRENT_CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURRENT_CTN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CURRENT_CTN' field in the FML buffer.
     *
     * @return Number of values defined for 'CURRENT_CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURRENT_CTN_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'LAST_TRX_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_TRX_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'STATUS_DESCRIPTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'STATUS_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_STATUS_DESCRIPTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'STATUS_DESCRIPTION' field in the FML buffer.
     *
     * @return Number of values defined for 'STATUS_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_STATUS_DESCRIPTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_DESCRIPTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'TRX_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_DESCRIPTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_DESCRIPTION' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_DESCRIPTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'NL_DSC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'NL_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NL_DSC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NL_DSC' field in the FML buffer.
     *
     * @return Number of values defined for 'NL_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NL_DSC_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'NGP_DSC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'NGP_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NGP_DSC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NGP_DSC' field in the FML buffer.
     *
     * @return Number of values defined for 'NGP_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NGP_DSC_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_UID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'LAST_TRX_UID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_TRX_UID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_UID' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_UID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_UID_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'REASON' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REASON(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REASON' field in the FML buffer.
     *
     * @return Number of values defined for 'REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REASON_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'NL_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'NL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NL_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NL_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NL_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }
}