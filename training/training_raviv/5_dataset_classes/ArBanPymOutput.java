package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class ArBanPymOutput extends ServiceOutput {

    /**
     * Creates a new instance of ArBanPymOutput.
     *
     * @throws FMLManipulationException
     */
    public ArBanPymOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public ArBanPymOutput() {
    }

    /**
     * Creates a new instance of ArBanPymOutput.
     *
     * @param ds Output dataset from ArBanPym service.
     * @throws FMLManipulationException
     */
    public ArBanPymOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[79];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("TOTAL_COUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 4, 600);
        this.fmlBuffer[5] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 5, 600);
        this.fmlBuffer[6] = new FmlField("ENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 6, 600);
        this.fmlBuffer[7] = new FmlField("SYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 7, 600);
        this.fmlBuffer[8] = new FmlField("SYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 8, 600);
        this.fmlBuffer[9] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 9, 600);
        this.fmlBuffer[10] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 10, 600);
        this.fmlBuffer[11] = new FmlField("DL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 11, 600);
        this.fmlBuffer[12] = new FmlField("DL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 12, 600);
        this.fmlBuffer[13] = new FmlField("DEPOSIT_DATE", FmlField.TYPE_STRING, 9, null, 13, 600);
        this.fmlBuffer[14] = new FmlField("DEPOSIT_BANK_CODE", FmlField.TYPE_STRING, 11, null, 14, 600);
        this.fmlBuffer[15] = new FmlField("PYM_METHOD", FmlField.TYPE_STRING, 3, null, 15, 600);
        this.fmlBuffer[16] = new FmlField("PYM_SUB_METHOD", FmlField.TYPE_STRING, 3, null, 16, 600);
        this.fmlBuffer[17] = new FmlField("BANK_CODE", FmlField.TYPE_STRING, 11, null, 17, 600);
        this.fmlBuffer[18] = new FmlField("BANK_ACCOUNT_NO", FmlField.TYPE_STRING, 21, null, 18, 600);
        this.fmlBuffer[19] = new FmlField("CHECK_NO", FmlField.TYPE_STRING, 16, null, 19, 600);
        this.fmlBuffer[20] = new FmlField("CR_CARD_NO", FmlField.TYPE_STRING, 21, null, 20, 600);
        this.fmlBuffer[21] = new FmlField("DIRCT_DBT_VOUCHER", FmlField.TYPE_INTEGER, -1, null, 21, 600);
        this.fmlBuffer[22] = new FmlField("ORIGINAL_AMT", FmlField.TYPE_DOUBLE, -1, null, 22, 600);
        this.fmlBuffer[23] = new FmlField("ORIGINAL_BAN", FmlField.TYPE_INTEGER, -1, null, 23, 600);
        this.fmlBuffer[24] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 24, 600);
        this.fmlBuffer[25] = new FmlField("AMT_DUE", FmlField.TYPE_DOUBLE, -1, null, 25, 600);
        this.fmlBuffer[26] = new FmlField("SOURCE_TYPE", FmlField.TYPE_BYTE, -1, null, 26, 600);
        this.fmlBuffer[27] = new FmlField("SOURCE_ID", FmlField.TYPE_STRING, 9, null, 27, 600);
        this.fmlBuffer[28] = new FmlField("FILE_SEQ_NO", FmlField.TYPE_DOUBLE, -1, null, 28, 600);
        this.fmlBuffer[29] = new FmlField("BATCH_NO", FmlField.TYPE_INTEGER, -1, null, 29, 600);
        this.fmlBuffer[30] = new FmlField("BATCH_LINE_NO", FmlField.TYPE_INTEGER, -1, null, 30, 600);
        this.fmlBuffer[31] = new FmlField("DEALER_COMP_CODE", FmlField.TYPE_STRING, 6, null, 31, 600);
        this.fmlBuffer[32] = new FmlField("PYM_REFERENCE1", FmlField.TYPE_STRING, 11, null, 32, 600);
        this.fmlBuffer[33] = new FmlField("RECEIPT_ID", FmlField.TYPE_INTEGER, -1, null, 33, 600);
        this.fmlBuffer[34] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 34, 600);
        this.fmlBuffer[35] = new FmlField("RMS_REF_STORE_ID", FmlField.TYPE_STRING, 5, null, 35, 600);
        this.fmlBuffer[36] = new FmlField("CUSTOMER_PYM_DATE", FmlField.TYPE_STRING, 9, null, 36, 600);
        this.fmlBuffer[37] = new FmlField("ACTV_ROWID", FmlField.TYPE_STRING, 19, null, 37, 600);
        this.fmlBuffer[38] = new FmlField("ACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 38, 600);
        this.fmlBuffer[39] = new FmlField("ACTV_CODE", FmlField.TYPE_STRING, 5, null, 39, 600);
        this.fmlBuffer[40] = new FmlField("ACTV_REASON_CODE", FmlField.TYPE_STRING, 7, null, 40, 600);
        this.fmlBuffer[41] = new FmlField("ACTV_DATE", FmlField.TYPE_STRING, 9, null, 41, 600);
        this.fmlBuffer[42] = new FmlField("ACTV_BILL_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 42, 600);
        this.fmlBuffer[43] = new FmlField("DCK_CHG_GROUP_ID", FmlField.TYPE_INTEGER, -1, null, 43, 600);
        this.fmlBuffer[44] = new FmlField("FNT_BAN", FmlField.TYPE_INTEGER, -1, null, 44, 600);
        this.fmlBuffer[45] = new FmlField("EXCEPTION_RSN_CODE", FmlField.TYPE_STRING, 5, null, 45, 600);
        this.fmlBuffer[46] = new FmlField("CR_CARD_AUTH_CODE", FmlField.TYPE_STRING, 21, null, 46, 600);
        this.fmlBuffer[47] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 47, 600);
        this.fmlBuffer[48] = new FmlField("CR_CARD_AUTH_TYPE", FmlField.TYPE_BYTE, -1, null, 48, 600);
        this.fmlBuffer[49] = new FmlField("ACTV_CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 49, 600);
        this.fmlBuffer[50] = new FmlField("POST_ROWID", FmlField.TYPE_STRING, 19, null, 50, 600);
        this.fmlBuffer[51] = new FmlField("POSTING_ACTV_DATE", FmlField.TYPE_STRING, 9, null, 51, 600);
        this.fmlBuffer[52] = new FmlField("MEMO_ID", FmlField.TYPE_INTEGER, -1, null, 52, 600);
        this.fmlBuffer[53] = new FmlField("SUM_ACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 53, 600);
        this.fmlBuffer[54] = new FmlField("PS_SRC_NAME", FmlField.TYPE_STRING, 61, null, 54, 600);
        this.fmlBuffer[55] = new FmlField("METHOD_SHORT_DESC", FmlField.TYPE_STRING, 9, null, 55, 600);
        this.fmlBuffer[56] = new FmlField("METHOD_DESC", FmlField.TYPE_STRING, 31, null, 56, 600);
        this.fmlBuffer[57] = new FmlField("BAN_ROWID", FmlField.TYPE_STRING, 19, null, 57, 600);
        this.fmlBuffer[58] = new FmlField("AR_BALANCE", FmlField.TYPE_DOUBLE, -1, null, 58, 600);
        this.fmlBuffer[59] = new FmlField("BAN_STATUS", FmlField.TYPE_BYTE, -1, null, 59, 600);
        this.fmlBuffer[60] = new FmlField("CUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 60, 600);
        this.fmlBuffer[61] = new FmlField("BILL_COMPNAME1", FmlField.TYPE_STRING, 61, null, 61, 600);
        this.fmlBuffer[62] = new FmlField("BILL_COMPNAME2", FmlField.TYPE_STRING, 61, null, 62, 600);
        this.fmlBuffer[63] = new FmlField("LINK_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 63, 600);
        this.fmlBuffer[64] = new FmlField("NAME_ID", FmlField.TYPE_INTEGER, -1, null, 64, 600);
        this.fmlBuffer[65] = new FmlField("ADDRESS_ID", FmlField.TYPE_INTEGER, -1, null, 65, 600);
        this.fmlBuffer[66] = new FmlField("DD_CONTRACT_NO", FmlField.TYPE_STRING, 10, null, 66, 600);
        this.fmlBuffer[67] = new FmlField("DESIGNATED_INV", FmlField.TYPE_STRING, 14, null, 67, 600);
        this.fmlBuffer[68] = new FmlField("BANK_BRANCH_CODE", FmlField.TYPE_STRING, 11, null, 68, 600);
        this.fmlBuffer[69] = new FmlField("DUMMY1", FmlField.TYPE_DOUBLE, -1, null, 69, 600);
        this.fmlBuffer[70] = new FmlField("DUMMY2", FmlField.TYPE_DOUBLE, -1, null, 70, 600);
        this.fmlBuffer[71] = new FmlField("DUMMY3", FmlField.TYPE_DOUBLE, -1, null, 71, 600);
        this.fmlBuffer[72] = new FmlField("CC_MP_TRANS_ID", FmlField.TYPE_STRING, 51, null, 72, 600);
        this.fmlBuffer[73] = new FmlField("EXTERNAL_ORDER_ID", FmlField.TYPE_STRING, 41, null, 73, 600);
        this.fmlBuffer[74] = new FmlField("DCI_ERROR_CODE", FmlField.TYPE_INTEGER, -1, null, 74, 1);
        this.fmlBuffer[75] = new FmlField("DCI_ERROR_TYPE", FmlField.TYPE_SHORT, -1, null, 75, 1);
        this.fmlBuffer[76] = new FmlField("DCI_ERROR_TEXT", FmlField.TYPE_STRING, 81, null, 76, 1);
        this.fmlBuffer[77] = new FmlField("DCI_ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 77, 1);
        this.fmlBuffer[78] = new FmlField("DCI_MORE_ROWS", FmlField.TYPE_SHORT, -1, null, 78, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTAL_COUNT' field in the FML buffer.
     *
     * @return Value of 'TOTAL_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTAL_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[2].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ENT_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ENT_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_APPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[12].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DEPOSIT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEPOSIT_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT_BANK_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DEPOSIT_BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEPOSIT_BANK_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT_BANK_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT_BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_BANK_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_METHOD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PYM_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_METHOD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_METHOD' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_METHOD_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_SUB_METHOD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PYM_SUB_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_SUB_METHOD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_SUB_METHOD' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_SUB_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_SUB_METHOD_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'BANK_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BANK_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BANK_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BANK_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'BANK_ACCOUNT_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BANK_ACCOUNT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BANK_ACCOUNT_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BANK_ACCOUNT_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BANK_ACCOUNT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BANK_ACCOUNT_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'CHECK_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CHECK_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHECK_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHECK_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CHECK_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHECK_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CR_CARD_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'DIRCT_DBT_VOUCHER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DIRCT_DBT_VOUCHER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DIRCT_DBT_VOUCHER(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DIRCT_DBT_VOUCHER' field in the FML buffer.
     *
     * @return Number of values defined for 'DIRCT_DBT_VOUCHER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DIRCT_DBT_VOUCHER_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'ORIGINAL_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ORIGINAL_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ORIGINAL_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORIGINAL_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'ORIGINAL_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORIGINAL_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'ORIGINAL_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ORIGINAL_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ORIGINAL_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORIGINAL_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'ORIGINAL_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORIGINAL_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'AMT_DUE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'AMT_DUE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_AMT_DUE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'AMT_DUE' field in the FML buffer.
     *
     * @return Number of values defined for 'AMT_DUE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_AMT_DUE_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'SOURCE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOURCE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOURCE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[26].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SOURCE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOURCE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOURCE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'SOURCE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOURCE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOURCE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOURCE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'SOURCE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOURCE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'FILE_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FILE_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FILE_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FILE_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'FILE_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FILE_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'BATCH_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BATCH_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BATCH_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BATCH_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BATCH_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BATCH_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'BATCH_LINE_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BATCH_LINE_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BATCH_LINE_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BATCH_LINE_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BATCH_LINE_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BATCH_LINE_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'DEALER_COMP_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DEALER_COMP_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEALER_COMP_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEALER_COMP_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEALER_COMP_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEALER_COMP_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_REFERENCE1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PYM_REFERENCE1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_REFERENCE1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_REFERENCE1' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_REFERENCE1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_REFERENCE1_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'RECEIPT_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RECEIPT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_RECEIPT_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[33].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RECEIPT_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RECEIPT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECEIPT_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'CONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[34].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_REF_STORE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'RMS_REF_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_REF_STORE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RMS_REF_STORE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_REF_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_REF_STORE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'CUSTOMER_PYM_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CUSTOMER_PYM_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUSTOMER_PYM_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[36].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CUSTOMER_PYM_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CUSTOMER_PYM_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUSTOMER_PYM_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[37].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[38].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[39].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_REASON_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_REASON_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[40].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_REASON_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_REASON_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[41].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_BILL_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_BILL_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_BILL_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[42].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_BILL_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_BILL_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_BILL_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'DCK_CHG_GROUP_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DCK_CHG_GROUP_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCK_CHG_GROUP_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[43].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DCK_CHG_GROUP_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'DCK_CHG_GROUP_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DCK_CHG_GROUP_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'FNT_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FNT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FNT_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[44].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FNT_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'FNT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FNT_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'EXCEPTION_RSN_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXCEPTION_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXCEPTION_RSN_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXCEPTION_RSN_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXCEPTION_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXCEPTION_RSN_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_AUTH_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CR_CARD_AUTH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_AUTH_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_AUTH_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_AUTH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_AUTH_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BL_IGNORE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[47].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BL_IGNORE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[47].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_AUTH_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CR_CARD_AUTH_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_AUTH_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[48].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_AUTH_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_AUTH_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_AUTH_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[48].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_CONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_CONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[49].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_CONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_CONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[49].getCount());
    }

    /**
     * Retrieves the value of the 'POST_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'POST_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POST_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[50].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'POST_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'POST_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POST_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[50].getCount());
    }

    /**
     * Retrieves the value of the 'POSTING_ACTV_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'POSTING_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POSTING_ACTV_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[51].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'POSTING_ACTV_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'POSTING_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POSTING_ACTV_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[51].getCount());
    }

    /**
     * Retrieves the value of the 'MEMO_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MEMO_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[52].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MEMO_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MEMO_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[52].getCount());
    }

    /**
     * Retrieves the value of the 'SUM_ACTV_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SUM_ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_SUM_ACTV_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[53].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUM_ACTV_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'SUM_ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUM_ACTV_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[53].getCount());
    }

    /**
     * Retrieves the value of the 'PS_SRC_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PS_SRC_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PS_SRC_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[54].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PS_SRC_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'PS_SRC_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PS_SRC_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[54].getCount());
    }

    /**
     * Retrieves the value of the 'METHOD_SHORT_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'METHOD_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_METHOD_SHORT_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[55].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'METHOD_SHORT_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'METHOD_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_METHOD_SHORT_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[55].getCount());
    }

    /**
     * Retrieves the value of the 'METHOD_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'METHOD_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_METHOD_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[56].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'METHOD_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'METHOD_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_METHOD_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[56].getCount());
    }

    /**
     * Retrieves the value of the 'BAN_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BAN_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BAN_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[57].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[57].getCount());
    }

    /**
     * Retrieves the value of the 'AR_BALANCE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'AR_BALANCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_AR_BALANCE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[58].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'AR_BALANCE' field in the FML buffer.
     *
     * @return Number of values defined for 'AR_BALANCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_AR_BALANCE_size() throws FMLManipulationException {
        return (this.fmlBuffer[58].getCount());
    }

    /**
     * Retrieves the value of the 'BAN_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BAN_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BAN_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[59].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BAN_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[59].getCount());
    }

    /**
     * Retrieves the value of the 'CUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[60].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[60].getCount());
    }

    /**
     * Retrieves the value of the 'BILL_COMPNAME1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BILL_COMPNAME1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILL_COMPNAME1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[61].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BILL_COMPNAME1' field in the FML buffer.
     *
     * @return Number of values defined for 'BILL_COMPNAME1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILL_COMPNAME1_size() throws FMLManipulationException {
        return (this.fmlBuffer[61].getCount());
    }

    /**
     * Retrieves the value of the 'BILL_COMPNAME2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BILL_COMPNAME2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILL_COMPNAME2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[62].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BILL_COMPNAME2' field in the FML buffer.
     *
     * @return Number of values defined for 'BILL_COMPNAME2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILL_COMPNAME2_size() throws FMLManipulationException {
        return (this.fmlBuffer[62].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'LINK_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LINK_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[63].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LINK_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[63].getCount());
    }

    /**
     * Retrieves the value of the 'NAME_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'NAME_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NAME_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[64].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAME_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NAME_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAME_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[64].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESS_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ADDRESS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADDRESS_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[65].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESS_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESS_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[65].getCount());
    }

    /**
     * Retrieves the value of the 'DD_CONTRACT_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DD_CONTRACT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DD_CONTRACT_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[66].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DD_CONTRACT_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'DD_CONTRACT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DD_CONTRACT_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[66].getCount());
    }

    /**
     * Retrieves the value of the 'DESIGNATED_INV' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DESIGNATED_INV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DESIGNATED_INV(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[67].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DESIGNATED_INV' field in the FML buffer.
     *
     * @return Number of values defined for 'DESIGNATED_INV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DESIGNATED_INV_size() throws FMLManipulationException {
        return (this.fmlBuffer[67].getCount());
    }

    /**
     * Retrieves the value of the 'BANK_BRANCH_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BANK_BRANCH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BANK_BRANCH_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[68].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BANK_BRANCH_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BANK_BRANCH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BANK_BRANCH_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[68].getCount());
    }

    /**
     * Retrieves the value of the 'DUMMY1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DUMMY1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DUMMY1(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[69].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DUMMY1' field in the FML buffer.
     *
     * @return Number of values defined for 'DUMMY1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DUMMY1_size() throws FMLManipulationException {
        return (this.fmlBuffer[69].getCount());
    }

    /**
     * Retrieves the value of the 'DUMMY2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DUMMY2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DUMMY2(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[70].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DUMMY2' field in the FML buffer.
     *
     * @return Number of values defined for 'DUMMY2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DUMMY2_size() throws FMLManipulationException {
        return (this.fmlBuffer[70].getCount());
    }

    /**
     * Retrieves the value of the 'DUMMY3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DUMMY3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_DUMMY3(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[71].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DUMMY3' field in the FML buffer.
     *
     * @return Number of values defined for 'DUMMY3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DUMMY3_size() throws FMLManipulationException {
        return (this.fmlBuffer[71].getCount());
    }

    /**
     * Retrieves the value of the 'CC_MP_TRANS_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CC_MP_TRANS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CC_MP_TRANS_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[72].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CC_MP_TRANS_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'CC_MP_TRANS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CC_MP_TRANS_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[72].getCount());
    }

    /**
     * Retrieves the value of the 'EXTERNAL_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXTERNAL_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXTERNAL_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[73].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXTERNAL_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'EXTERNAL_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXTERNAL_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[73].getCount());
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_CODE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_CODE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[74].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TYPE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[75].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TEXT' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DCI_ERROR_TEXT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[76].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'DCI_ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[77].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_MORE_ROWS' field in the FML buffer.
     *
     * @return Value of 'DCI_MORE_ROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_MORE_ROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[78].getValue(0)));
    }
}