package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class GnLsFtrTrxOutput extends ServiceOutput {

    /**
     * Creates a new instance of GnLsFtrTrxOutput.
     *
     * @throws FMLManipulationException
     */
    public GnLsFtrTrxOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public GnLsFtrTrxOutput() {
    }

    /**
     * Creates a new instance of GnLsFtrTrxOutput.
     *
     * @param ds Output dataset from GnLsFtrTrx service.
     * @throws FMLManipulationException
     */
    public GnLsFtrTrxOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[31];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 4, 50);
        this.fmlBuffer[5] = new FmlField("CFR_ACTIVITY_CD", FmlField.TYPE_STRING, 4, null, 5, 50);
        this.fmlBuffer[6] = new FmlField("CFR_BAN", FmlField.TYPE_INTEGER, -1, null, 6, 50);
        this.fmlBuffer[7] = new FmlField("CFR_SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 7, 50);
        this.fmlBuffer[8] = new FmlField("CFR_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 8, 50);
        this.fmlBuffer[9] = new FmlField("CFR_STATUS", FmlField.TYPE_BYTE, -1, null, 9, 50);
        this.fmlBuffer[10] = new FmlField("CFR_REASON_CD", FmlField.TYPE_STRING, 5, null, 10, 50);
        this.fmlBuffer[11] = new FmlField("CFR_DATE", FmlField.TYPE_STRING, 9, null, 11, 50);
        this.fmlBuffer[12] = new FmlField("CFR_CREATE_DATE", FmlField.TYPE_STRING, 9, null, 12, 50);
        this.fmlBuffer[13] = new FmlField("CFR_CLOSE_DATE", FmlField.TYPE_STRING, 9, null, 13, 50);
        this.fmlBuffer[14] = new FmlField("CFR_P1", FmlField.TYPE_STRING, 51, null, 14, 50);
        this.fmlBuffer[15] = new FmlField("CFR_P2", FmlField.TYPE_STRING, 51, null, 15, 50);
        this.fmlBuffer[16] = new FmlField("CFR_P3", FmlField.TYPE_STRING, 51, null, 16, 50);
        this.fmlBuffer[17] = new FmlField("CFR_P4", FmlField.TYPE_STRING, 51, null, 17, 50);
        this.fmlBuffer[18] = new FmlField("CFR_P5", FmlField.TYPE_STRING, 51, null, 18, 50);
        this.fmlBuffer[19] = new FmlField("CFR_P6", FmlField.TYPE_STRING, 51, null, 19, 50);
        this.fmlBuffer[20] = new FmlField("CFR_P7", FmlField.TYPE_STRING, 51, null, 20, 50);
        this.fmlBuffer[21] = new FmlField("CFR_P8", FmlField.TYPE_STRING, 51, null, 21, 50);
        this.fmlBuffer[22] = new FmlField("CFR_P9", FmlField.TYPE_STRING, 51, null, 22, 50);
        this.fmlBuffer[23] = new FmlField("CFR_P10", FmlField.TYPE_STRING, 51, null, 23, 50);
        this.fmlBuffer[24] = new FmlField("ACTIVITY_DESC", FmlField.TYPE_STRING, 21, null, 24, 50);
        this.fmlBuffer[25] = new FmlField("ACTIVITY_RSN_DESC", FmlField.TYPE_STRING, 31, null, 25, 50);
        this.fmlBuffer[26] = new FmlField("DCI_ERROR_CODE", FmlField.TYPE_INTEGER, -1, null, 26, 1);
        this.fmlBuffer[27] = new FmlField("DCI_ERROR_TYPE", FmlField.TYPE_SHORT, -1, null, 27, 1);
        this.fmlBuffer[28] = new FmlField("DCI_ERROR_TEXT", FmlField.TYPE_STRING, 81, null, 28, 1);
        this.fmlBuffer[29] = new FmlField("DCI_ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 29, 1);
        this.fmlBuffer[30] = new FmlField("DCI_MORE_ROWS", FmlField.TYPE_SHORT, -1, null, 30, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTALCOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTALCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTALCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[2].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_ACTIVITY_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_ACTIVITY_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_ACTIVITY_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_ACTIVITY_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_ACTIVITY_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_ACTIVITY_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CFR_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CFR_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[9].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CFR_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_REASON_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_REASON_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_REASON_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_REASON_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_REASON_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_REASON_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_CREATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_CREATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_CREATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_CREATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_CREATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_CREATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_CLOSE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_CLOSE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_CLOSE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_CLOSE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_CLOSE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_CLOSE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P1' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P1_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P2' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P2_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P3(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P3' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P3_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P4(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P4' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P4_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P5(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P5' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P5_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P6(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P6' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P6_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P7(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P7' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P7_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P8(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P8' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P8_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P9(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P9' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P9_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'CFR_P10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CFR_P10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CFR_P10(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CFR_P10' field in the FML buffer.
     *
     * @return Number of values defined for 'CFR_P10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CFR_P10_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'ACTIVITY_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ACTIVITY_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTIVITY_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTIVITY_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTIVITY_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTIVITY_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'ACTIVITY_RSN_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ACTIVITY_RSN_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTIVITY_RSN_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTIVITY_RSN_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTIVITY_RSN_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTIVITY_RSN_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_CODE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_CODE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[26].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TYPE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[27].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TEXT' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DCI_ERROR_TEXT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[28].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'DCI_ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[29].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_MORE_ROWS' field in the FML buffer.
     *
     * @return Value of 'DCI_MORE_ROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_MORE_ROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[30].getValue(0)));
    }
}