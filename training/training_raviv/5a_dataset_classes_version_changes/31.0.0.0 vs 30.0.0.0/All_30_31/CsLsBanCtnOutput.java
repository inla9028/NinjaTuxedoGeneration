package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsLsBanCtnOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsLsBanCtnOutput.
     *
     * @throws FMLManipulationException
     */
    public CsLsBanCtnOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsLsBanCtnOutput() {
    }

    /**
     * Creates a new instance of CsLsBanCtnOutput.
     *
     * @param ds Output dataset from CsLsBanCtn service.
     * @throws FMLManipulationException
     */
    public CsLsBanCtnOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[30];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
            this.fmlBuffer[4] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 4, 1000);
            this.fmlBuffer[5] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 5, 1000);
            this.fmlBuffer[6] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 15, null, 6, 1000);
            this.fmlBuffer[7] = new FmlField("INIT_ACTIVATION_DATE", FmlField.TYPE_STRING, 9, null, 7, 1000);
            this.fmlBuffer[8] = new FmlField("SUB_STATUS", FmlField.TYPE_BYTE, -1, null, 8, 1000);
            this.fmlBuffer[9] = new FmlField("SUB_STATUS_DATE", FmlField.TYPE_STRING, 9, null, 9, 1000);
            this.fmlBuffer[10] = new FmlField("SUB_STATUS_LAST_ACT", FmlField.TYPE_STRING, 4, null, 10, 1000);
            this.fmlBuffer[11] = new FmlField("SUB_STATUS_RSN_CODE", FmlField.TYPE_STRING, 5, null, 11, 1000);
            this.fmlBuffer[12] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 12, 1000);
            this.fmlBuffer[13] = new FmlField("CAMPAIGN", FmlField.TYPE_STRING, 10, null, 13, 1000);
            this.fmlBuffer[14] = new FmlField("ANL_ROWID", FmlField.TYPE_STRING, 19, null, 14, 1000);
            this.fmlBuffer[15] = new FmlField("LINK_TYPE", FmlField.TYPE_BYTE, -1, null, 15, 1000);
            this.fmlBuffer[16] = new FmlField("CONTROL_NAME", FmlField.TYPE_STRING, 41, null, 16, 1000);
            this.fmlBuffer[17] = new FmlField("ADR_ZIP", FmlField.TYPE_STRING, 10, null, 17, 1000);
            this.fmlBuffer[18] = new FmlField("ADR_STREET_NAME", FmlField.TYPE_STRING, 61, null, 18, 1000);
            this.fmlBuffer[19] = new FmlField("ADR_CITY", FmlField.TYPE_STRING, 40, null, 19, 1000);
            this.fmlBuffer[20] = new FmlField("ADR_POB", FmlField.TYPE_STRING, 11, null, 20, 1000);
            this.fmlBuffer[21] = new FmlField("NAME_ID", FmlField.TYPE_INTEGER, -1, null, 21, 1000);
            this.fmlBuffer[22] = new FmlField("ADDRESS_ID", FmlField.TYPE_INTEGER, -1, null, 22, 1000);
            this.fmlBuffer[23] = new FmlField("NAME_FORMAT", FmlField.TYPE_BYTE, -1, null, 23, 1000);
            this.fmlBuffer[24] = new FmlField("ADDITIONAL_TITLE", FmlField.TYPE_STRING, 61, null, 24, 1000);
            this.fmlBuffer[25] = new FmlField("LISTED_IND", FmlField.TYPE_BYTE, -1, null, 25, 1000);
            this.fmlBuffer[26] = new FmlField("NEXT_CTN", FmlField.TYPE_STRING, 21, null, 26, 1000);
            this.fmlBuffer[27] = new FmlField("NEXT_BAN", FmlField.TYPE_INTEGER, -1, null, 27, 1000);
            this.fmlBuffer[28] = new FmlField("SUSP_RC_RATE_TYPE", FmlField.TYPE_BYTE, -1, null, 28, 1000);
            this.fmlBuffer[29] = new FmlField("SUBSCRIBER_ID", FmlField.TYPE_INTEGER, -1, null, 29, 1000);
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[31];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
            this.fmlBuffer[4] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 4, 1000);
            this.fmlBuffer[5] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 5, 1000);
            this.fmlBuffer[6] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 15, null, 6, 1000);
            this.fmlBuffer[7] = new FmlField("INIT_ACTIVATION_DATE", FmlField.TYPE_STRING, 9, null, 7, 1000);
            this.fmlBuffer[8] = new FmlField("SUB_STATUS", FmlField.TYPE_BYTE, -1, null, 8, 1000);
            this.fmlBuffer[9] = new FmlField("SUB_STATUS_DATE", FmlField.TYPE_STRING, 9, null, 9, 1000);
            this.fmlBuffer[10] = new FmlField("SUB_STATUS_LAST_ACT", FmlField.TYPE_STRING, 4, null, 10, 1000);
            this.fmlBuffer[11] = new FmlField("SUB_STATUS_RSN_CODE", FmlField.TYPE_STRING, 5, null, 11, 1000);
            this.fmlBuffer[12] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 12, 1000);
            this.fmlBuffer[13] = new FmlField("CAMPAIGN", FmlField.TYPE_STRING, 10, null, 13, 1000);
            this.fmlBuffer[14] = new FmlField("ANL_ROWID", FmlField.TYPE_STRING, 19, null, 14, 1000);
            this.fmlBuffer[15] = new FmlField("LINK_TYPE", FmlField.TYPE_BYTE, -1, null, 15, 1000);
            this.fmlBuffer[16] = new FmlField("CONTROL_NAME", FmlField.TYPE_STRING, 41, null, 16, 1000);
            this.fmlBuffer[17] = new FmlField("ADR_ZIP", FmlField.TYPE_STRING, 10, null, 17, 1000);
            this.fmlBuffer[18] = new FmlField("ADR_STREET_NAME", FmlField.TYPE_STRING, 61, null, 18, 1000);
            this.fmlBuffer[19] = new FmlField("ADR_CITY", FmlField.TYPE_STRING, 40, null, 19, 1000);
            this.fmlBuffer[20] = new FmlField("ADR_POB", FmlField.TYPE_STRING, 11, null, 20, 1000);
            this.fmlBuffer[21] = new FmlField("NAME_ID", FmlField.TYPE_INTEGER, -1, null, 21, 1000);
            this.fmlBuffer[22] = new FmlField("ADDRESS_ID", FmlField.TYPE_INTEGER, -1, null, 22, 1000);
            this.fmlBuffer[23] = new FmlField("NAME_FORMAT", FmlField.TYPE_BYTE, -1, null, 23, 1000);
            this.fmlBuffer[24] = new FmlField("ADDITIONAL_TITLE", FmlField.TYPE_STRING, 61, null, 24, 1000);
            this.fmlBuffer[25] = new FmlField("LISTED_IND", FmlField.TYPE_BYTE, -1, null, 25, 1000);
            this.fmlBuffer[26] = new FmlField("NEXT_CTN", FmlField.TYPE_STRING, 21, null, 26, 1000);
            this.fmlBuffer[27] = new FmlField("NEXT_BAN", FmlField.TYPE_INTEGER, -1, null, 27, 1000);
            this.fmlBuffer[28] = new FmlField("SUSP_RC_RATE_TYPE", FmlField.TYPE_BYTE, -1, null, 28, 1000);
            this.fmlBuffer[29] = new FmlField("SUBSCRIBER_ID", FmlField.TYPE_INTEGER, -1, null, 29, 1000);
            this.fmlBuffer[30] = new FmlField("INTERNAL_CIRCUIT_ID", FmlField.TYPE_STRING, 21, null, 30, 1000);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsBanCtnOutput class");
        }
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTALCOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTALCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTALCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[2].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'INIT_ACTIVATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'INIT_ACTIVATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INIT_ACTIVATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INIT_ACTIVATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'INIT_ACTIVATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INIT_ACTIVATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'SUB_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUB_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[8].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SUB_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'SUB_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUB_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'SUB_STATUS_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUB_STATUS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUB_STATUS_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SUB_STATUS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUB_STATUS_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'SUB_STATUS_LAST_ACT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUB_STATUS_LAST_ACT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS_LAST_ACT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUB_STATUS_LAST_ACT' field in the FML buffer.
     *
     * @return Number of values defined for 'SUB_STATUS_LAST_ACT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUB_STATUS_LAST_ACT_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'SUB_STATUS_RSN_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUB_STATUS_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUB_STATUS_RSN_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUB_STATUS_RSN_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'SUB_STATUS_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUB_STATUS_RSN_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'CAMPAIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'CAMPAIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CAMPAIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CAMPAIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'CAMPAIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CAMPAIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'ANL_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ANL_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ANL_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ANL_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ANL_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ANL_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'LINK_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'LINK_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LINK_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[15].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LINK_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'LINK_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LINK_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'CONTROL_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'CONTROL_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTROL_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTROL_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTROL_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTROL_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_ZIP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ADR_ZIP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_ZIP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_ZIP' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_ZIP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_ZIP_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_STREET_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ADR_STREET_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_STREET_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_STREET_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_STREET_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_STREET_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_CITY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ADR_CITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_CITY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_CITY' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_CITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_CITY_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'ADR_POB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ADR_POB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADR_POB(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADR_POB' field in the FML buffer.
     *
     * @return Number of values defined for 'ADR_POB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADR_POB_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'NAME_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'NAME_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NAME_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NAME_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NAME_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAME_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'ADDRESS_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ADDRESS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADDRESS_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDRESS_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDRESS_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDRESS_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'NAME_FORMAT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'NAME_FORMAT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NAME_FORMAT(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[23].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NAME_FORMAT' field in the FML buffer.
     *
     * @return Number of values defined for 'NAME_FORMAT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NAME_FORMAT_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_TITLE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'ADDITIONAL_TITLE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_TITLE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_TITLE' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_TITLE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_TITLE_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'LISTED_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'LISTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LISTED_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[25].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'LISTED_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'LISTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LISTED_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'NEXT_CTN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'NEXT_CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_CTN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEXT_CTN' field in the FML buffer.
     *
     * @return Number of values defined for 'NEXT_CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEXT_CTN_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'NEXT_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'NEXT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NEXT_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEXT_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'NEXT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEXT_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'SUSP_RC_RATE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUSP_RC_RATE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUSP_RC_RATE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[28].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SUSP_RC_RATE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'SUSP_RC_RATE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUSP_RC_RATE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'SUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SUBSCRIBER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'INTERNAL_CIRCUIT_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 1000).
     * @return Value of 'INTERNAL_CIRCUIT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INTERNAL_CIRCUIT_ID(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            throw new FMLManipulationException("Method not supported in version 30.0.0.0");
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[30].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsBanCtnOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'INTERNAL_CIRCUIT_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'INTERNAL_CIRCUIT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INTERNAL_CIRCUIT_ID_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            throw new FMLManipulationException("Method not supported in version 30.0.0.0");
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[30].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsBanCtnOutput class");
        }
    }

    private void set_INTERNAL_CIRCUIT_ID(int nIndex, String value) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            throw new FMLManipulationException("Method not supported in version 30.0.0.0");
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer[30].setValue(nIndex, value);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsBanCtnOutput class");
        }
    }
}