package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsLsSrvAgrOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsLsSrvAgrOutput.
     *
     * @throws FMLManipulationException
     */
    public CsLsSrvAgrOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsLsSrvAgrOutput() {
    }

    /**
     * Creates a new instance of CsLsSrvAgrOutput.
     *
     * @param ds Output dataset from CsLsSrvAgr service.
     * @throws FMLManipulationException
     */
    public CsLsSrvAgrOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[57];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 3, 600);
            this.fmlBuffer[4] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 4, 600);
            this.fmlBuffer[5] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 5, 600);
            this.fmlBuffer[6] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 6, 600);
            this.fmlBuffer[7] = new FmlField("SOC_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 7, 600);
            this.fmlBuffer[8] = new FmlField("SOC_VER_NO", FmlField.TYPE_INTEGER, -1, null, 8, 600);
            this.fmlBuffer[9] = new FmlField("CAMPAIGN_SEQ", FmlField.TYPE_INTEGER, -1, null, 9, 600);
            this.fmlBuffer[10] = new FmlField("CAMPAIGN", FmlField.TYPE_STRING, 10, null, 10, 600);
            this.fmlBuffer[11] = new FmlField("COMMIT_ORIG_NO_MONTH", FmlField.TYPE_SHORT, -1, null, 11, 600);
            this.fmlBuffer[12] = new FmlField("SOC_EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 12, 600);
            this.fmlBuffer[13] = new FmlField("CUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 13, 600);
            this.fmlBuffer[14] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 14, 600);
            this.fmlBuffer[15] = new FmlField("SERVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 15, 600);
            this.fmlBuffer[16] = new FmlField("EXPIRATION_DATE", FmlField.TYPE_STRING, 9, null, 16, 600);
            this.fmlBuffer[17] = new FmlField("SOC_LEVEL_CODE", FmlField.TYPE_BYTE, -1, null, 17, 600);
            this.fmlBuffer[18] = new FmlField("DEALER_CODE", FmlField.TYPE_STRING, 6, null, 18, 600);
            this.fmlBuffer[19] = new FmlField("SALES_AGENT", FmlField.TYPE_STRING, 6, null, 19, 600);
            this.fmlBuffer[20] = new FmlField("EFFECTIVE_ISSUE_DATE", FmlField.TYPE_STRING, 9, null, 20, 600);
            this.fmlBuffer[21] = new FmlField("EXPIRATION_ISSUE_DATE", FmlField.TYPE_STRING, 9, null, 21, 600);
            this.fmlBuffer[22] = new FmlField("TRX_ID", FmlField.TYPE_INTEGER, -1, null, 22, 600);
            this.fmlBuffer[23] = new FmlField("INS_TRX_ID", FmlField.TYPE_INTEGER, -1, null, 23, 600);
            this.fmlBuffer[24] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 24, 600);
            this.fmlBuffer[25] = new FmlField("LOAN_VER_NO", FmlField.TYPE_INTEGER, -1, null, 25, 600);
            this.fmlBuffer[26] = new FmlField("LOAN_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 26, 600);
            this.fmlBuffer[27] = new FmlField("SOC_START_RC_DATE", FmlField.TYPE_STRING, 9, null, 27, 600);
            this.fmlBuffer[28] = new FmlField("SOC_QUANTITY", FmlField.TYPE_SHORT, -1, null, 28, 600);
            this.fmlBuffer[29] = new FmlField("BILL_TEXT", FmlField.TYPE_STRING, 41, null, 29, 600);
            this.fmlBuffer[30] = new FmlField("SOC_ROWID", FmlField.TYPE_STRING, 19, null, 30, 600);
            this.fmlBuffer[31] = new FmlField("SALE_EFF_DATE", FmlField.TYPE_STRING, 9, null, 31, 600);
            this.fmlBuffer[32] = new FmlField("SALE_EXP_DATE", FmlField.TYPE_STRING, 9, null, 32, 600);
            this.fmlBuffer[33] = new FmlField("MINIMUM_NO_MONTHS", FmlField.TYPE_SHORT, -1, null, 33, 600);
            this.fmlBuffer[34] = new FmlField("SOC_DESCRIPTION", FmlField.TYPE_STRING, 31, null, 34, 600);
            this.fmlBuffer[35] = new FmlField("SOC_GROUP", FmlField.TYPE_STRING, 7, null, 35, 600);
            this.fmlBuffer[36] = new FmlField("MAX_QUANTITY", FmlField.TYPE_SHORT, -1, null, 36, 600);
            this.fmlBuffer[37] = new FmlField("ALLOW_FREE_BILL_TXT", FmlField.TYPE_BYTE, -1, null, 37, 600);
            this.fmlBuffer[38] = new FmlField("FLEXIBLE_LOAN_IND", FmlField.TYPE_BYTE, -1, null, 38, 600);
            this.fmlBuffer[39] = new FmlField("PRMT_ROWID", FmlField.TYPE_STRING, 19, null, 39, 600);
            this.fmlBuffer[40] = new FmlField("PT_DURATION", FmlField.TYPE_SHORT, -1, null, 40, 600);
            this.fmlBuffer[41] = new FmlField("DURATION_IND", FmlField.TYPE_BYTE, -1, null, 41, 600);
            this.fmlBuffer[42] = new FmlField("PP_IND", FmlField.TYPE_BYTE, -1, null, 42, 600);
            this.fmlBuffer[43] = new FmlField("AUTO_RENEWAL_IND", FmlField.TYPE_BYTE, -1, null, 43, 600);
            this.fmlBuffer[44] = new FmlField("CUT_DATE", FmlField.TYPE_STRING, 9, null, 44, 600);
            this.fmlBuffer[45] = new FmlField("TRS_ROWID", FmlField.TYPE_STRING, 19, null, 45, 600);
            this.fmlBuffer[46] = new FmlField("TRS_EXPIRATION_DATE", FmlField.TYPE_STRING, 9, null, 46, 600);
            this.fmlBuffer[47] = new FmlField("TRS_SOC", FmlField.TYPE_STRING, 10, null, 47, 600);
            this.fmlBuffer[48] = new FmlField("CALL_TYPE_CODE", FmlField.TYPE_BYTE, -1, null, 48, 600);
            this.fmlBuffer[49] = new FmlField("TOLL_RS_DESC", FmlField.TYPE_STRING, 31, null, 49, 600);
            this.fmlBuffer[50] = new FmlField("SUBLN_ROWID", FmlField.TYPE_STRING, 19, null, 50, 600);
            this.fmlBuffer[51] = new FmlField("FULL_AMT", FmlField.TYPE_DOUBLE, -1, null, 51, 600);
            this.fmlBuffer[52] = new FmlField("FIRST_INSTALL_RATE", FmlField.TYPE_DOUBLE, -1, null, 52, 600);
            this.fmlBuffer[53] = new FmlField("OTHER_INSTALL_RATE", FmlField.TYPE_DOUBLE, -1, null, 53, 600);
            this.fmlBuffer[54] = new FmlField("LAST_INSTALL_RATE", FmlField.TYPE_DOUBLE, -1, null, 54, 600);
            this.fmlBuffer[55] = new FmlField("NO_OF_INSTALLMENTS", FmlField.TYPE_SHORT, -1, null, 55, 600);
            this.fmlBuffer[56] = new FmlField("SUBSCRIBER_ID", FmlField.TYPE_INTEGER, -1, null, 56, 600);
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[58];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 3, 600);
            this.fmlBuffer[4] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 4, 600);
            this.fmlBuffer[5] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 5, 600);
            this.fmlBuffer[6] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 6, 600);
            this.fmlBuffer[7] = new FmlField("SOC_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 7, 600);
            this.fmlBuffer[8] = new FmlField("SOC_VER_NO", FmlField.TYPE_INTEGER, -1, null, 8, 600);
            this.fmlBuffer[9] = new FmlField("CAMPAIGN_SEQ", FmlField.TYPE_INTEGER, -1, null, 9, 600);
            this.fmlBuffer[10] = new FmlField("CAMPAIGN", FmlField.TYPE_STRING, 10, null, 10, 600);
            this.fmlBuffer[11] = new FmlField("COMMIT_ORIG_NO_MONTH", FmlField.TYPE_SHORT, -1, null, 11, 600);
            this.fmlBuffer[12] = new FmlField("SOC_EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 12, 600);
            this.fmlBuffer[13] = new FmlField("CUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 13, 600);
            this.fmlBuffer[14] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 14, 600);
            this.fmlBuffer[15] = new FmlField("SERVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 15, 600);
            this.fmlBuffer[16] = new FmlField("EXPIRATION_DATE", FmlField.TYPE_STRING, 9, null, 16, 600);
            this.fmlBuffer[17] = new FmlField("SOC_LEVEL_CODE", FmlField.TYPE_BYTE, -1, null, 17, 600);
            this.fmlBuffer[18] = new FmlField("DEALER_CODE", FmlField.TYPE_STRING, 6, null, 18, 600);
            this.fmlBuffer[19] = new FmlField("SALES_AGENT", FmlField.TYPE_STRING, 6, null, 19, 600);
            this.fmlBuffer[20] = new FmlField("EFFECTIVE_ISSUE_DATE", FmlField.TYPE_STRING, 9, null, 20, 600);
            this.fmlBuffer[21] = new FmlField("EXPIRATION_ISSUE_DATE", FmlField.TYPE_STRING, 9, null, 21, 600);
            this.fmlBuffer[22] = new FmlField("TRX_ID", FmlField.TYPE_INTEGER, -1, null, 22, 600);
            this.fmlBuffer[23] = new FmlField("INS_TRX_ID", FmlField.TYPE_INTEGER, -1, null, 23, 600);
            this.fmlBuffer[24] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 24, 600);
            this.fmlBuffer[25] = new FmlField("LOAN_VER_NO", FmlField.TYPE_INTEGER, -1, null, 25, 600);
            this.fmlBuffer[26] = new FmlField("LOAN_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 26, 600);
            this.fmlBuffer[27] = new FmlField("SOC_START_RC_DATE", FmlField.TYPE_STRING, 9, null, 27, 600);
            this.fmlBuffer[28] = new FmlField("SOC_QUANTITY", FmlField.TYPE_SHORT, -1, null, 28, 600);
            this.fmlBuffer[29] = new FmlField("BILL_TEXT", FmlField.TYPE_STRING, 41, null, 29, 600);
            this.fmlBuffer[30] = new FmlField("SOC_ROWID", FmlField.TYPE_STRING, 19, null, 30, 600);
            this.fmlBuffer[31] = new FmlField("SALE_EFF_DATE", FmlField.TYPE_STRING, 9, null, 31, 600);
            this.fmlBuffer[32] = new FmlField("SALE_EXP_DATE", FmlField.TYPE_STRING, 9, null, 32, 600);
            this.fmlBuffer[33] = new FmlField("MINIMUM_NO_MONTHS", FmlField.TYPE_SHORT, -1, null, 33, 600);
            this.fmlBuffer[34] = new FmlField("SOC_DESCRIPTION", FmlField.TYPE_STRING, 31, null, 34, 600);
            this.fmlBuffer[35] = new FmlField("SOC_GROUP", FmlField.TYPE_STRING, 7, null, 35, 600);
            this.fmlBuffer[36] = new FmlField("MAX_QUANTITY", FmlField.TYPE_SHORT, -1, null, 36, 600);
            this.fmlBuffer[37] = new FmlField("ALLOW_FREE_BILL_TXT", FmlField.TYPE_BYTE, -1, null, 37, 600);
            this.fmlBuffer[38] = new FmlField("FLEXIBLE_LOAN_IND", FmlField.TYPE_BYTE, -1, null, 38, 600);
            this.fmlBuffer[39] = new FmlField("EXTERNAL_PARTY", FmlField.TYPE_STRING, 3, null, 39, 600);
            this.fmlBuffer[40] = new FmlField("PRMT_ROWID", FmlField.TYPE_STRING, 19, null, 40, 600);
            this.fmlBuffer[41] = new FmlField("PT_DURATION", FmlField.TYPE_SHORT, -1, null, 41, 600);
            this.fmlBuffer[42] = new FmlField("DURATION_IND", FmlField.TYPE_BYTE, -1, null, 42, 600);
            this.fmlBuffer[43] = new FmlField("PP_IND", FmlField.TYPE_BYTE, -1, null, 43, 600);
            this.fmlBuffer[44] = new FmlField("AUTO_RENEWAL_IND", FmlField.TYPE_BYTE, -1, null, 44, 600);
            this.fmlBuffer[45] = new FmlField("CUT_DATE", FmlField.TYPE_STRING, 9, null, 45, 600);
            this.fmlBuffer[46] = new FmlField("TRS_ROWID", FmlField.TYPE_STRING, 19, null, 46, 600);
            this.fmlBuffer[47] = new FmlField("TRS_EXPIRATION_DATE", FmlField.TYPE_STRING, 9, null, 47, 600);
            this.fmlBuffer[48] = new FmlField("TRS_SOC", FmlField.TYPE_STRING, 10, null, 48, 600);
            this.fmlBuffer[49] = new FmlField("CALL_TYPE_CODE", FmlField.TYPE_BYTE, -1, null, 49, 600);
            this.fmlBuffer[50] = new FmlField("TOLL_RS_DESC", FmlField.TYPE_STRING, 31, null, 50, 600);
            this.fmlBuffer[51] = new FmlField("SUBLN_ROWID", FmlField.TYPE_STRING, 19, null, 51, 600);
            this.fmlBuffer[52] = new FmlField("FULL_AMT", FmlField.TYPE_DOUBLE, -1, null, 52, 600);
            this.fmlBuffer[53] = new FmlField("FIRST_INSTALL_RATE", FmlField.TYPE_DOUBLE, -1, null, 53, 600);
            this.fmlBuffer[54] = new FmlField("OTHER_INSTALL_RATE", FmlField.TYPE_DOUBLE, -1, null, 54, 600);
            this.fmlBuffer[55] = new FmlField("LAST_INSTALL_RATE", FmlField.TYPE_DOUBLE, -1, null, 55, 600);
            this.fmlBuffer[56] = new FmlField("NO_OF_INSTALLMENTS", FmlField.TYPE_SHORT, -1, null, 56, 600);
            this.fmlBuffer[57] = new FmlField("SUBSCRIBER_ID", FmlField.TYPE_INTEGER, -1, null, 57, 600);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[1].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SOC_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_VER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SOC_VER_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_VER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_VER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'CAMPAIGN_SEQ' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CAMPAIGN_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CAMPAIGN_SEQ(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CAMPAIGN_SEQ' field in the FML buffer.
     *
     * @return Number of values defined for 'CAMPAIGN_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CAMPAIGN_SEQ_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'CAMPAIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CAMPAIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CAMPAIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CAMPAIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'CAMPAIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CAMPAIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'COMMIT_ORIG_NO_MONTH' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'COMMIT_ORIG_NO_MONTH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_COMMIT_ORIG_NO_MONTH(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[11].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'COMMIT_ORIG_NO_MONTH' field in the FML buffer.
     *
     * @return Number of values defined for 'COMMIT_ORIG_NO_MONTH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMMIT_ORIG_NO_MONTH_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'CUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'SERVICE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SERVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERVICE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[15].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SERVICE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'SERVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERVICE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXPIRATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXPIRATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_LEVEL_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_LEVEL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_LEVEL_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[17].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SOC_LEVEL_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_LEVEL_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_LEVEL_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'DEALER_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DEALER_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEALER_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEALER_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEALER_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEALER_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'SALES_AGENT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SALES_AGENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SALES_AGENT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SALES_AGENT' field in the FML buffer.
     *
     * @return Number of values defined for 'SALES_AGENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SALES_AGENT_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_ISSUE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EFFECTIVE_ISSUE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_ISSUE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EFFECTIVE_ISSUE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EFFECTIVE_ISSUE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EFFECTIVE_ISSUE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'EXPIRATION_ISSUE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXPIRATION_ISSUE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXPIRATION_ISSUE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXPIRATION_ISSUE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXPIRATION_ISSUE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXPIRATION_ISSUE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TRX_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'INS_TRX_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'INS_TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_INS_TRX_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INS_TRX_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'INS_TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INS_TRX_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'CONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[24].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'LOAN_VER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'LOAN_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LOAN_VER_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LOAN_VER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'LOAN_VER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LOAN_VER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'LOAN_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'LOAN_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LOAN_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LOAN_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'LOAN_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LOAN_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_START_RC_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_START_RC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_START_RC_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_START_RC_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_START_RC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_START_RC_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_QUANTITY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_QUANTITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SOC_QUANTITY(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[28].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SOC_QUANTITY' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_QUANTITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_QUANTITY_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'BILL_TEXT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BILL_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILL_TEXT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BILL_TEXT' field in the FML buffer.
     *
     * @return Number of values defined for 'BILL_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILL_TEXT_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'SALE_EFF_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SALE_EFF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SALE_EFF_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SALE_EFF_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SALE_EFF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SALE_EFF_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'SALE_EXP_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SALE_EXP_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SALE_EXP_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SALE_EXP_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SALE_EXP_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SALE_EXP_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'MINIMUM_NO_MONTHS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MINIMUM_NO_MONTHS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MINIMUM_NO_MONTHS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[33].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MINIMUM_NO_MONTHS' field in the FML buffer.
     *
     * @return Number of values defined for 'MINIMUM_NO_MONTHS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MINIMUM_NO_MONTHS_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_DESCRIPTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_DESCRIPTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_DESCRIPTION' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_DESCRIPTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_DESCRIPTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'SOC_GROUP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SOC_GROUP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC_GROUP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC_GROUP' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC_GROUP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_GROUP_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'MAX_QUANTITY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'MAX_QUANTITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MAX_QUANTITY(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[36].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MAX_QUANTITY' field in the FML buffer.
     *
     * @return Number of values defined for 'MAX_QUANTITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAX_QUANTITY_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'ALLOW_FREE_BILL_TXT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ALLOW_FREE_BILL_TXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ALLOW_FREE_BILL_TXT(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[37].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ALLOW_FREE_BILL_TXT' field in the FML buffer.
     *
     * @return Number of values defined for 'ALLOW_FREE_BILL_TXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ALLOW_FREE_BILL_TXT_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'FLEXIBLE_LOAN_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FLEXIBLE_LOAN_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FLEXIBLE_LOAN_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[38].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'FLEXIBLE_LOAN_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'FLEXIBLE_LOAN_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FLEXIBLE_LOAN_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'PRMT_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PRMT_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRMT_ROWID(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[39].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[40].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'PRMT_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'PRMT_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRMT_ROWID_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[39].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[40].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'PT_DURATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PT_DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PT_DURATION(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.shortToInteger((Short) this.fmlBuffer[40].getValue(nIndex)));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.shortToInteger((Short) this.fmlBuffer[41].getValue(nIndex)));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'PT_DURATION' field in the FML buffer.
     *
     * @return Number of values defined for 'PT_DURATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PT_DURATION_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[40].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[41].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'DURATION_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DURATION_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DURATION_IND(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[41].getValue(nIndex)));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[42].getValue(nIndex)));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'DURATION_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'DURATION_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DURATION_IND_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[41].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[42].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'PP_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'PP_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PP_IND(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[42].getValue(nIndex)));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[43].getValue(nIndex)));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'PP_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'PP_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PP_IND_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[42].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[43].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'AUTO_RENEWAL_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'AUTO_RENEWAL_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_AUTO_RENEWAL_IND(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[43].getValue(nIndex)));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[44].getValue(nIndex)));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'AUTO_RENEWAL_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'AUTO_RENEWAL_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_AUTO_RENEWAL_IND_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[43].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[44].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'CUT_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CUT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUT_DATE(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[44].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[45].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'CUT_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CUT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUT_DATE_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[44].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[45].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'TRS_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TRS_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRS_ROWID(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[45].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[46].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'TRS_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'TRS_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRS_ROWID_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[45].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[46].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'TRS_EXPIRATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TRS_EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRS_EXPIRATION_DATE(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[46].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[47].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'TRS_EXPIRATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'TRS_EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRS_EXPIRATION_DATE_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[46].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[47].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'TRS_SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TRS_SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRS_SOC(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[47].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[48].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'TRS_SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'TRS_SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRS_SOC_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[47].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[48].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'CALL_TYPE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CALL_TYPE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CALL_TYPE_CODE(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[48].getValue(nIndex)));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.byteToString((Byte) this.fmlBuffer[49].getValue(nIndex)));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'CALL_TYPE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'CALL_TYPE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CALL_TYPE_CODE_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[48].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[49].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'TOLL_RS_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'TOLL_RS_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TOLL_RS_DESC(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[49].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[50].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'TOLL_RS_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'TOLL_RS_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TOLL_RS_DESC_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[49].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[50].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'SUBLN_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SUBLN_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBLN_ROWID(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[50].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[51].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'SUBLN_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBLN_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBLN_ROWID_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[50].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[51].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'FULL_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FULL_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FULL_AMT(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[51].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[52].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'FULL_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'FULL_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FULL_AMT_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[51].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[52].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'FIRST_INSTALL_RATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FIRST_INSTALL_RATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FIRST_INSTALL_RATE(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[52].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[53].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'FIRST_INSTALL_RATE' field in the FML buffer.
     *
     * @return Number of values defined for 'FIRST_INSTALL_RATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FIRST_INSTALL_RATE_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[52].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[53].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'OTHER_INSTALL_RATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'OTHER_INSTALL_RATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_OTHER_INSTALL_RATE(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[53].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[54].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'OTHER_INSTALL_RATE' field in the FML buffer.
     *
     * @return Number of values defined for 'OTHER_INSTALL_RATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OTHER_INSTALL_RATE_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[53].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[54].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'LAST_INSTALL_RATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'LAST_INSTALL_RATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_LAST_INSTALL_RATE(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[54].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((Double) this.fmlBuffer[55].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'LAST_INSTALL_RATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_INSTALL_RATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_INSTALL_RATE_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[54].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[55].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'NO_OF_INSTALLMENTS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'NO_OF_INSTALLMENTS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NO_OF_INSTALLMENTS(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.shortToInteger((Short) this.fmlBuffer[55].getValue(nIndex)));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (TypeConverter.shortToInteger((Short) this.fmlBuffer[56].getValue(nIndex)));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'NO_OF_INSTALLMENTS' field in the FML buffer.
     *
     * @return Number of values defined for 'NO_OF_INSTALLMENTS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NO_OF_INSTALLMENTS_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[55].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[56].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'SUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SUBSCRIBER_ID(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return ((Integer) this.fmlBuffer[56].getValue(nIndex));
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((Integer) this.fmlBuffer[57].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_ID_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[56].getCount());
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[57].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves the value of the 'EXTERNAL_PARTY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXTERNAL_PARTY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXTERNAL_PARTY(int nIndex) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            throw new FMLManipulationException("Method not supported in version 30.0.0.0");
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return ((String) this.fmlBuffer[39].getValue(nIndex));
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    /**
     * Retrieves number of values defined for 'EXTERNAL_PARTY' field in the FML buffer.
     *
     * @return Number of values defined for 'EXTERNAL_PARTY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXTERNAL_PARTY_size() throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            throw new FMLManipulationException("Method not supported in version 30.0.0.0");
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            return (this.fmlBuffer[39].getCount());
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }

    private void set_EXTERNAL_PARTY(int nIndex, String value) throws FMLManipulationException {
        if ("30.0.0.0".equals(this.getNinjaVersion())) {
            throw new FMLManipulationException("Method not supported in version 30.0.0.0");
        } else if ("31.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer[39].setValue(nIndex, value);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by CsLsSrvAgrOutput class");
        }
    }
}