package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class ArLsDiscOutput extends ServiceOutput {

    /**
     * Creates a new instance of ArLsDiscOutput.
     *
     * @throws FMLManipulationException
     */
    public ArLsDiscOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public ArLsDiscOutput() {
    }

    /**
     * Creates a new instance of ArLsDiscOutput.
     *
     * @param ds Output dataset from ArLsDisc service.
     * @throws FMLManipulationException
     */
    public ArLsDiscOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[25];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 4, 100);
        this.fmlBuffer[5] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 5, 100);
        this.fmlBuffer[6] = new FmlField("DISCOUNT_CODE", FmlField.TYPE_STRING, 10, null, 6, 100);
        this.fmlBuffer[7] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 7, 100);
        this.fmlBuffer[8] = new FmlField("DISC_BY_OPID", FmlField.TYPE_INTEGER, -1, null, 8, 100);
        this.fmlBuffer[9] = new FmlField("EXPIRATION_DATE", FmlField.TYPE_STRING, 9, null, 9, 100);
        this.fmlBuffer[10] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 10, 100);
        this.fmlBuffer[11] = new FmlField("DISC_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 11, 100);
        this.fmlBuffer[12] = new FmlField("CAMPAIGN", FmlField.TYPE_STRING, 10, null, 12, 100);
        this.fmlBuffer[13] = new FmlField("COMMIT_ORIG_NO_MONTH", FmlField.TYPE_SHORT, -1, null, 13, 100);
        this.fmlBuffer[14] = new FmlField("POTENTIAL_SUBS_NO", FmlField.TYPE_INTEGER, -1, null, 14, 100);
        this.fmlBuffer[15] = new FmlField("LAST_POTENT_DATE", FmlField.TYPE_STRING, 9, null, 15, 100);
        this.fmlBuffer[16] = new FmlField("USERS_ROWID", FmlField.TYPE_STRING, 19, null, 16, 100);
        this.fmlBuffer[17] = new FmlField("USER_SHORT_NAME", FmlField.TYPE_STRING, 21, null, 17, 100);
        this.fmlBuffer[18] = new FmlField("USER_FULL_NAME", FmlField.TYPE_STRING, 31, null, 18, 100);
        this.fmlBuffer[19] = new FmlField("DISC_GROUP_DESC", FmlField.TYPE_STRING, 41, null, 19, 100);
        this.fmlBuffer[20] = new FmlField("DCI_ERROR_CODE", FmlField.TYPE_INTEGER, -1, null, 20, 1);
        this.fmlBuffer[21] = new FmlField("DCI_ERROR_TYPE", FmlField.TYPE_SHORT, -1, null, 21, 1);
        this.fmlBuffer[22] = new FmlField("DCI_ERROR_TEXT", FmlField.TYPE_STRING, 81, null, 22, 1);
        this.fmlBuffer[23] = new FmlField("DCI_ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 23, 1);
        this.fmlBuffer[24] = new FmlField("DCI_MORE_ROWS", FmlField.TYPE_SHORT, -1, null, 24, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTALCOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTALCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTALCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[2].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'DISCOUNT_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'DISCOUNT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DISCOUNT_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DISCOUNT_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DISCOUNT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISCOUNT_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'DISC_BY_OPID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'DISC_BY_OPID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DISC_BY_OPID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DISC_BY_OPID' field in the FML buffer.
     *
     * @return Number of values defined for 'DISC_BY_OPID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISC_BY_OPID_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXPIRATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXPIRATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'DISC_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'DISC_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DISC_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DISC_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'DISC_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISC_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'CAMPAIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'CAMPAIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CAMPAIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CAMPAIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'CAMPAIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CAMPAIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'COMMIT_ORIG_NO_MONTH' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'COMMIT_ORIG_NO_MONTH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_COMMIT_ORIG_NO_MONTH(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[13].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'COMMIT_ORIG_NO_MONTH' field in the FML buffer.
     *
     * @return Number of values defined for 'COMMIT_ORIG_NO_MONTH' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMMIT_ORIG_NO_MONTH_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'POTENTIAL_SUBS_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'POTENTIAL_SUBS_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_POTENTIAL_SUBS_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'POTENTIAL_SUBS_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'POTENTIAL_SUBS_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POTENTIAL_SUBS_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_POTENT_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'LAST_POTENT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_POTENT_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_POTENT_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_POTENT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_POTENT_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'USERS_ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'USERS_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_USERS_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USERS_ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'USERS_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USERS_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'USER_SHORT_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'USER_SHORT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_USER_SHORT_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_SHORT_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_SHORT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_SHORT_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'USER_FULL_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'USER_FULL_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_USER_FULL_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_FULL_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_FULL_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_FULL_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'DISC_GROUP_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 100).
     * @return Value of 'DISC_GROUP_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DISC_GROUP_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DISC_GROUP_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'DISC_GROUP_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DISC_GROUP_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_CODE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_CODE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[20].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TYPE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[21].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TEXT' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DCI_ERROR_TEXT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'DCI_ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[23].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_MORE_ROWS' field in the FML buffer.
     *
     * @return Value of 'DCI_MORE_ROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_MORE_ROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[24].getValue(0)));
    }
}