package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsLsNpTrxOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsLsNpTrxOutput.
     *
     * @throws FMLManipulationException
     */
    public CsLsNpTrxOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsLsNpTrxOutput() {
    }

    /**
     * Creates a new instance of CsLsNpTrxOutput.
     *
     * @param ds Output dataset from CsLsNpTrx service.
     * @throws FMLManipulationException
     */
    public CsLsNpTrxOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[158];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("CUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("TRX_CODE", FmlField.TYPE_STRING, 4, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("TOTALCOUNT", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 4, 1);
        this.fmlBuffer[5] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 5, 1);
        this.fmlBuffer[6] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 6, 200);
        this.fmlBuffer[7] = new FmlField("NPTRXDETBUFTRX_CODE", FmlField.TYPE_SHORT, -1, null, 7, 200);
        this.fmlBuffer[8] = new FmlField("INT_ORDER_ID", FmlField.TYPE_DOUBLE, -1, null, 8, 200);
        this.fmlBuffer[9] = new FmlField("TRX_SOURCE", FmlField.TYPE_STRING, 4, null, 9, 200);
        this.fmlBuffer[10] = new FmlField("SYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 10, 200);
        this.fmlBuffer[11] = new FmlField("SYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 11, 200);
        this.fmlBuffer[12] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 12, 200);
        this.fmlBuffer[13] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 13, 200);
        this.fmlBuffer[14] = new FmlField("DL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 14, 200);
        this.fmlBuffer[15] = new FmlField("DL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 15, 200);
        this.fmlBuffer[16] = new FmlField("EXT_UNIQUE_ID", FmlField.TYPE_STRING, 13, null, 16, 200);
        this.fmlBuffer[17] = new FmlField("INT_TRX_SEQ", FmlField.TYPE_INTEGER, -1, null, 17, 200);
        this.fmlBuffer[18] = new FmlField("INITI_ORDER_SEQ", FmlField.TYPE_INTEGER, -1, null, 18, 200);
        this.fmlBuffer[19] = new FmlField("CONT_CATEGORY", FmlField.TYPE_STRING, 4, null, 19, 200);
        this.fmlBuffer[20] = new FmlField("EXT_ORDER_ID", FmlField.TYPE_DOUBLE, -1, null, 20, 200);
        this.fmlBuffer[21] = new FmlField("TRX_DATETIME", FmlField.TYPE_STRING, 15, null, 21, 200);
        this.fmlBuffer[22] = new FmlField("TRX_STATUS", FmlField.TYPE_BYTE, -1, null, 22, 200);
        this.fmlBuffer[23] = new FmlField("TRX_STS_DATE", FmlField.TYPE_STRING, 15, null, 23, 200);
        this.fmlBuffer[24] = new FmlField("CUSTOMER_NAME", FmlField.TYPE_STRING, 255, null, 24, 200);
        this.fmlBuffer[25] = new FmlField("NPTRXDETBUFCUSTOMER_ID", FmlField.TYPE_STRING, 61, null, 25, 200);
        this.fmlBuffer[26] = new FmlField("NP_PRODUCT_TYPE", FmlField.TYPE_STRING, 255, null, 26, 200);
        this.fmlBuffer[27] = new FmlField("NEW_NUM_TYPE", FmlField.TYPE_STRING, 255, null, 27, 200);
        this.fmlBuffer[28] = new FmlField("MAIN_NUMBER", FmlField.TYPE_STRING, 21, null, 28, 200);
        this.fmlBuffer[29] = new FmlField("ADDITIONAL_NUMBER_1", FmlField.TYPE_STRING, 255, null, 29, 200);
        this.fmlBuffer[30] = new FmlField("ADDITIONAL_NUMBER_2", FmlField.TYPE_STRING, 255, null, 30, 200);
        this.fmlBuffer[31] = new FmlField("ADDITIONAL_NUMBER_3", FmlField.TYPE_STRING, 255, null, 31, 200);
        this.fmlBuffer[32] = new FmlField("ADDITIONAL_NUMBER_4", FmlField.TYPE_STRING, 255, null, 32, 200);
        this.fmlBuffer[33] = new FmlField("ADDITIONAL_NUMBER_5", FmlField.TYPE_STRING, 255, null, 33, 200);
        this.fmlBuffer[34] = new FmlField("ADDITIONAL_NUMBER_6", FmlField.TYPE_STRING, 255, null, 34, 200);
        this.fmlBuffer[35] = new FmlField("ADDITIONAL_NUMBER_7", FmlField.TYPE_STRING, 255, null, 35, 200);
        this.fmlBuffer[36] = new FmlField("ADDITIONAL_NUMBER_8", FmlField.TYPE_STRING, 255, null, 36, 200);
        this.fmlBuffer[37] = new FmlField("ADDITIONAL_NUMBER_9", FmlField.TYPE_STRING, 255, null, 37, 200);
        this.fmlBuffer[38] = new FmlField("ADDITIONAL_NUMBER_10", FmlField.TYPE_STRING, 255, null, 38, 200);
        this.fmlBuffer[39] = new FmlField("PRIMARY_NUM", FmlField.TYPE_STRING, 21, null, 39, 200);
        this.fmlBuffer[40] = new FmlField("REQUEST_EXEC_DATE", FmlField.TYPE_STRING, 15, null, 40, 200);
        this.fmlBuffer[41] = new FmlField("CONF_EXEC_DATE", FmlField.TYPE_STRING, 15, null, 41, 200);
        this.fmlBuffer[42] = new FmlField("CONF_STATUS", FmlField.TYPE_STRING, 4, null, 42, 200);
        this.fmlBuffer[43] = new FmlField("ERROR_UNIQ_ID", FmlField.TYPE_INTEGER, -1, null, 43, 200);
        this.fmlBuffer[44] = new FmlField("SERIES_UNIQ_ID", FmlField.TYPE_INTEGER, -1, null, 44, 200);
        this.fmlBuffer[45] = new FmlField("CURR_SERV_OPER", FmlField.TYPE_STRING, 6, null, 45, 200);
        this.fmlBuffer[46] = new FmlField("RECIP_SERV_OPER", FmlField.TYPE_STRING, 6, null, 46, 200);
        this.fmlBuffer[47] = new FmlField("CURR_NET_OPER", FmlField.TYPE_STRING, 6, null, 47, 200);
        this.fmlBuffer[48] = new FmlField("RECIP_NET_OPER", FmlField.TYPE_STRING, 6, null, 48, 200);
        this.fmlBuffer[49] = new FmlField("INITI_ORDER_TP", FmlField.TYPE_STRING, 6, null, 49, 200);
        this.fmlBuffer[50] = new FmlField("TEXT_COMMENT", FmlField.TYPE_STRING, 256, null, 50, 200);
        this.fmlBuffer[51] = new FmlField("DELAY_IND", FmlField.TYPE_BYTE, -1, null, 51, 200);
        this.fmlBuffer[52] = new FmlField("FILE_NAME", FmlField.TYPE_STRING, 256, null, 52, 200);
        this.fmlBuffer[53] = new FmlField("MUNICIPALITY", FmlField.TYPE_STRING, 4, null, 53, 200);
        this.fmlBuffer[54] = new FmlField("EXT_TRX_STS", FmlField.TYPE_STRING, 11, null, 54, 200);
        this.fmlBuffer[55] = new FmlField("LAST_TRX_STS", FmlField.TYPE_STRING, 11, null, 55, 200);
        this.fmlBuffer[56] = new FmlField("INITI_TIMESTAMP", FmlField.TYPE_STRING, 15, null, 56, 200);
        this.fmlBuffer[57] = new FmlField("OTHER_OPERATOR", FmlField.TYPE_STRING, 6, null, 57, 200);
        this.fmlBuffer[58] = new FmlField("POINT_OF_CONNECTION", FmlField.TYPE_STRING, 61, null, 58, 200);
        this.fmlBuffer[59] = new FmlField("RANGE_UPD_TP", FmlField.TYPE_BYTE, -1, null, 59, 200);
        this.fmlBuffer[60] = new FmlField("CSNPSPC", FmlField.TYPE_STRING, 7, null, 60, 200);
        this.fmlBuffer[61] = new FmlField("ROUTING_INFO", FmlField.TYPE_STRING, 9, null, 61, 200);
        this.fmlBuffer[62] = new FmlField("RATING_TP", FmlField.TYPE_STRING, 5, null, 62, 200);
        this.fmlBuffer[63] = new FmlField("MAN_AUT", FmlField.TYPE_BYTE, -1, null, 63, 200);
        this.fmlBuffer[64] = new FmlField("TERM_CONF_DATE", FmlField.TYPE_STRING, 9, null, 64, 200);
        this.fmlBuffer[65] = new FmlField("SERVICE_PROVIDER", FmlField.TYPE_STRING, 6, null, 65, 200);
        this.fmlBuffer[66] = new FmlField("NP_CARD_STS", FmlField.TYPE_STRING, 13, null, 66, 200);
        this.fmlBuffer[67] = new FmlField("CHARGING_INFO", FmlField.TYPE_STRING, 9, null, 67, 200);
        this.fmlBuffer[68] = new FmlField("DIRECTORY_INFO", FmlField.TYPE_STRING, 14, null, 68, 200);
        this.fmlBuffer[69] = new FmlField("NUM_PORTED_IND", FmlField.TYPE_BYTE, -1, null, 69, 200);
        this.fmlBuffer[70] = new FmlField("PORTING_CASE", FmlField.TYPE_STRING, 61, null, 70, 200);
        this.fmlBuffer[71] = new FmlField("PORTING_TP", FmlField.TYPE_STRING, 61, null, 71, 200);
        this.fmlBuffer[72] = new FmlField("RANGE", FmlField.TYPE_STRING, 18, null, 72, 200);
        this.fmlBuffer[73] = new FmlField("SERIES_COUNT", FmlField.TYPE_STRING, 4, null, 73, 200);
        this.fmlBuffer[74] = new FmlField("EIDNODSIGN", FmlField.TYPE_STRING, 7, null, 74, 200);
        this.fmlBuffer[75] = new FmlField("EIDNTYP", FmlField.TYPE_STRING, 5, null, 75, 200);
        this.fmlBuffer[76] = new FmlField("EIDNTYPNUMB", FmlField.TYPE_STRING, 5, null, 76, 200);
        this.fmlBuffer[77] = new FmlField("NEIDNODSIGN", FmlField.TYPE_STRING, 7, null, 77, 200);
        this.fmlBuffer[78] = new FmlField("NEIDNTYP", FmlField.TYPE_STRING, 5, null, 78, 200);
        this.fmlBuffer[79] = new FmlField("NEIDNTYPNUMB", FmlField.TYPE_STRING, 5, null, 79, 200);
        this.fmlBuffer[80] = new FmlField("CONTACT_NAME", FmlField.TYPE_STRING, 255, null, 80, 200);
        this.fmlBuffer[81] = new FmlField("CONTACT_NUMBER", FmlField.TYPE_STRING, 255, null, 81, 200);
        this.fmlBuffer[82] = new FmlField("CONTACT_EMAIL", FmlField.TYPE_STRING, 255, null, 82, 200);
        this.fmlBuffer[83] = new FmlField("ERROR_CONTACT_NAME", FmlField.TYPE_STRING, 255, null, 83, 200);
        this.fmlBuffer[84] = new FmlField("ERROR_CONTACT_NUMBER", FmlField.TYPE_STRING, 255, null, 84, 200);
        this.fmlBuffer[85] = new FmlField("ERROR_CONTACT_EMAIL", FmlField.TYPE_STRING, 255, null, 85, 200);
        this.fmlBuffer[86] = new FmlField("TEXT_1", FmlField.TYPE_STRING, 255, null, 86, 200);
        this.fmlBuffer[87] = new FmlField("TEXT_2", FmlField.TYPE_STRING, 255, null, 87, 200);
        this.fmlBuffer[88] = new FmlField("TEXT_3", FmlField.TYPE_STRING, 255, null, 88, 200);
        this.fmlBuffer[89] = new FmlField("TEXT_4", FmlField.TYPE_STRING, 255, null, 89, 200);
        this.fmlBuffer[90] = new FmlField("TEXT_5", FmlField.TYPE_STRING, 255, null, 90, 200);
        this.fmlBuffer[91] = new FmlField("TEXT_6", FmlField.TYPE_STRING, 255, null, 91, 200);
        this.fmlBuffer[92] = new FmlField("TEXT_7", FmlField.TYPE_STRING, 255, null, 92, 200);
        this.fmlBuffer[93] = new FmlField("TEXT_8", FmlField.TYPE_STRING, 255, null, 93, 200);
        this.fmlBuffer[94] = new FmlField("TEXT_9", FmlField.TYPE_STRING, 255, null, 94, 200);
        this.fmlBuffer[95] = new FmlField("TEXT_10", FmlField.TYPE_STRING, 255, null, 95, 200);
        this.fmlBuffer[96] = new FmlField("RPSP", FmlField.TYPE_STRING, 255, null, 96, 200);
        this.fmlBuffer[97] = new FmlField("TRX_SENT_DATETIME", FmlField.TYPE_STRING, 15, null, 97, 200);
        this.fmlBuffer[98] = new FmlField("ORIGINATING_NUMBER", FmlField.TYPE_STRING, 255, null, 98, 200);
        this.fmlBuffer[99] = new FmlField("ICC", FmlField.TYPE_STRING, 61, null, 99, 200);
        this.fmlBuffer[100] = new FmlField("COORDINATION_IND", FmlField.TYPE_BYTE, -1, null, 100, 200);
        this.fmlBuffer[101] = new FmlField("PORT_ENDED", FmlField.TYPE_SHORT, -1, null, 101, 200);
        this.fmlBuffer[102] = new FmlField("PORT_ENDED_MAIN", FmlField.TYPE_SHORT, -1, null, 102, 200);
        this.fmlBuffer[103] = new FmlField("PORT_ENDED_ADDITIONAL1", FmlField.TYPE_SHORT, -1, null, 103, 200);
        this.fmlBuffer[104] = new FmlField("PORT_ENDED_ADDITIONAL2", FmlField.TYPE_SHORT, -1, null, 104, 200);
        this.fmlBuffer[105] = new FmlField("PORT_ENDED_ADDITIONAL3", FmlField.TYPE_SHORT, -1, null, 105, 200);
        this.fmlBuffer[106] = new FmlField("PORT_ENDED_ADDITIONAL4", FmlField.TYPE_SHORT, -1, null, 106, 200);
        this.fmlBuffer[107] = new FmlField("PORT_ENDED_ADDITIONAL5", FmlField.TYPE_SHORT, -1, null, 107, 200);
        this.fmlBuffer[108] = new FmlField("PORT_ENDED_ADDITIONAL6", FmlField.TYPE_SHORT, -1, null, 108, 200);
        this.fmlBuffer[109] = new FmlField("PORT_ENDED_ADDITIONAL7", FmlField.TYPE_SHORT, -1, null, 109, 200);
        this.fmlBuffer[110] = new FmlField("PORT_ENDED_ADDITIONAL8", FmlField.TYPE_SHORT, -1, null, 110, 200);
        this.fmlBuffer[111] = new FmlField("PORT_ENDED_ADDITIONAL9", FmlField.TYPE_SHORT, -1, null, 111, 200);
        this.fmlBuffer[112] = new FmlField("PORT_ENDED_ADDITIONAL10", FmlField.TYPE_SHORT, -1, null, 112, 200);
        this.fmlBuffer[113] = new FmlField("DTSP", FmlField.TYPE_STRING, 4, null, 113, 200);
        this.fmlBuffer[114] = new FmlField("RTSP", FmlField.TYPE_STRING, 4, null, 114, 200);
        this.fmlBuffer[115] = new FmlField("ORDID_STR_BUF", FmlField.TYPE_STRING, 21, null, 115, 200);
        this.fmlBuffer[116] = new FmlField("PNPORDBUFROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 116, 1);
        this.fmlBuffer[117] = new FmlField("NPORDDATRECROWID", FmlField.TYPE_STRING, 19, null, 117, 50);
        this.fmlBuffer[118] = new FmlField("NPORDDATRECINT_ORDER_ID", FmlField.TYPE_DOUBLE, -1, null, 118, 50);
        this.fmlBuffer[119] = new FmlField("NPORDDATRECSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 119, 50);
        this.fmlBuffer[120] = new FmlField("NPORDDATRECSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 120, 50);
        this.fmlBuffer[121] = new FmlField("NPORDDATRECOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 121, 50);
        this.fmlBuffer[122] = new FmlField("NPORDDATRECAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 122, 50);
        this.fmlBuffer[123] = new FmlField("NPORDDATRECDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 123, 50);
        this.fmlBuffer[124] = new FmlField("NPORDDATRECDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 124, 50);
        this.fmlBuffer[125] = new FmlField("ORDER_STATUS", FmlField.TYPE_BYTE, -1, null, 125, 50);
        this.fmlBuffer[126] = new FmlField("LAST_STS_DATE", FmlField.TYPE_STRING, 9, null, 126, 50);
        this.fmlBuffer[127] = new FmlField("ORD_EXT_ID", FmlField.TYPE_DOUBLE, -1, null, 127, 50);
        this.fmlBuffer[128] = new FmlField("ORDID_STR", FmlField.TYPE_STRING, 21, null, 128, 50);
        this.fmlBuffer[129] = new FmlField("TEMPORARY_MSISDN", FmlField.TYPE_STRING, 21, null, 129, 50);
        this.fmlBuffer[130] = new FmlField("PNPERRBUFROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 130, 1);
        this.fmlBuffer[131] = new FmlField("NPTRXERRBUFROWID", FmlField.TYPE_STRING, 19, null, 131, 500);
        this.fmlBuffer[132] = new FmlField("NPTRXERRBUFERROR_UNIQ_ID", FmlField.TYPE_INTEGER, -1, null, 132, 500);
        this.fmlBuffer[133] = new FmlField("REJ_ERR_SEQ", FmlField.TYPE_INTEGER, -1, null, 133, 500);
        this.fmlBuffer[134] = new FmlField("NPTRXERRBUFSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 134, 500);
        this.fmlBuffer[135] = new FmlField("NPTRXERRBUFSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 135, 500);
        this.fmlBuffer[136] = new FmlField("NPTRXERRBUFOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 136, 500);
        this.fmlBuffer[137] = new FmlField("NPTRXERRBUFAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 137, 500);
        this.fmlBuffer[138] = new FmlField("NPTRXERRBUFDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 138, 500);
        this.fmlBuffer[139] = new FmlField("NPTRXERRBUFDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 139, 500);
        this.fmlBuffer[140] = new FmlField("REJ_ERR_CD", FmlField.TYPE_INTEGER, -1, null, 140, 500);
        this.fmlBuffer[141] = new FmlField("REJ_ERR_TXT", FmlField.TYPE_STRING, 256, null, 141, 500);
        this.fmlBuffer[142] = new FmlField("ERR_FIELD", FmlField.TYPE_STRING, 256, null, 142, 500);
        this.fmlBuffer[143] = new FmlField("DCI_ERROR_CODE", FmlField.TYPE_INTEGER, -1, null, 143, 1);
        this.fmlBuffer[144] = new FmlField("DCI_ERROR_TYPE", FmlField.TYPE_SHORT, -1, null, 144, 1);
        this.fmlBuffer[145] = new FmlField("DCI_ERROR_TEXT", FmlField.TYPE_STRING, 81, null, 145, 1);
        this.fmlBuffer[146] = new FmlField("DCI_ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 146, 1);
        this.fmlBuffer[147] = new FmlField("DCI_MORE_ROWS", FmlField.TYPE_SHORT, -1, null, 147, 1);
        this.fmlBuffer[148] = new FmlField("PNPSERBUFROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 148, 1);
        this.fmlBuffer[149] = new FmlField("NPTRXSERBUFROWID", FmlField.TYPE_STRING, 19, null, 149, 500);
        this.fmlBuffer[150] = new FmlField("NPTRXSERBUFSERIES_UNIQ_ID", FmlField.TYPE_INTEGER, -1, null, 150, 500);
        this.fmlBuffer[151] = new FmlField("SERIES", FmlField.TYPE_STRING, 18, null, 151, 500);
        this.fmlBuffer[152] = new FmlField("NPTRXSERBUFSYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 152, 500);
        this.fmlBuffer[153] = new FmlField("NPTRXSERBUFSYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 153, 500);
        this.fmlBuffer[154] = new FmlField("NPTRXSERBUFOPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 154, 500);
        this.fmlBuffer[155] = new FmlField("NPTRXSERBUFAPPLICATION_ID", FmlField.TYPE_STRING, 7, null, 155, 500);
        this.fmlBuffer[156] = new FmlField("NPTRXSERBUFDL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 156, 500);
        this.fmlBuffer[157] = new FmlField("NPTRXSERBUFDL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 157, 500);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'CUSTOMER_ID' field in the FML buffer.
     *
     * @return Value of 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CUSTOMER_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'TRX_CODE' field in the FML buffer.
     *
     * @return Value of 'TRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'TOTALCOUNT' field in the FML buffer.
     *
     * @return Value of 'TOTALCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTALCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[4].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[5].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETBUFTRX_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NPTRXDETBUFTRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXDETBUFTRX_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[7].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETBUFTRX_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETBUFTRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETBUFTRX_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'INT_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'INT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_INT_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INT_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'INT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INT_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_SOURCE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TRX_SOURCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_SOURCE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_SOURCE' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_SOURCE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_SOURCE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_APPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[15].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'EXT_UNIQUE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'EXT_UNIQUE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXT_UNIQUE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXT_UNIQUE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'EXT_UNIQUE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXT_UNIQUE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'INT_TRX_SEQ' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'INT_TRX_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_INT_TRX_SEQ(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INT_TRX_SEQ' field in the FML buffer.
     *
     * @return Number of values defined for 'INT_TRX_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INT_TRX_SEQ_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'INITI_ORDER_SEQ' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'INITI_ORDER_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_INITI_ORDER_SEQ(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INITI_ORDER_SEQ' field in the FML buffer.
     *
     * @return Number of values defined for 'INITI_ORDER_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INITI_ORDER_SEQ_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'CONT_CATEGORY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CONT_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONT_CATEGORY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONT_CATEGORY' field in the FML buffer.
     *
     * @return Number of values defined for 'CONT_CATEGORY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONT_CATEGORY_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'EXT_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'EXT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_EXT_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXT_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'EXT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXT_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_DATETIME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TRX_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_DATETIME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_DATETIME' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_DATETIME_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TRX_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[22].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TRX_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_STS_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TRX_STS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_STS_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_STS_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_STS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_STS_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'CUSTOMER_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CUSTOMER_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUSTOMER_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CUSTOMER_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'CUSTOMER_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUSTOMER_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXDETBUFCUSTOMER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NPTRXDETBUFCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXDETBUFCUSTOMER_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXDETBUFCUSTOMER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXDETBUFCUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXDETBUFCUSTOMER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'NP_PRODUCT_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NP_PRODUCT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NP_PRODUCT_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NP_PRODUCT_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'NP_PRODUCT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NP_PRODUCT_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'NEW_NUM_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NEW_NUM_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEW_NUM_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEW_NUM_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'NEW_NUM_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEW_NUM_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'MAIN_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'MAIN_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MAIN_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MAIN_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'MAIN_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAIN_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_1' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_2' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_3(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_3' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_4(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_4' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_5(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[33].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_5' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_6(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_6' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_7(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_7' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_7_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_8(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[36].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_8' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_8_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_9(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[37].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_9' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_9_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'ADDITIONAL_NUMBER_10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ADDITIONAL_NUMBER_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADDITIONAL_NUMBER_10(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[38].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADDITIONAL_NUMBER_10' field in the FML buffer.
     *
     * @return Number of values defined for 'ADDITIONAL_NUMBER_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADDITIONAL_NUMBER_10_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'PRIMARY_NUM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PRIMARY_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRIMARY_NUM(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[39].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRIMARY_NUM' field in the FML buffer.
     *
     * @return Number of values defined for 'PRIMARY_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRIMARY_NUM_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'REQUEST_EXEC_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'REQUEST_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REQUEST_EXEC_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[40].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REQUEST_EXEC_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'REQUEST_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REQUEST_EXEC_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'CONF_EXEC_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CONF_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONF_EXEC_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[41].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONF_EXEC_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CONF_EXEC_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONF_EXEC_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'CONF_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CONF_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONF_STATUS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[42].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONF_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'CONF_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONF_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_UNIQ_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ERROR_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ERROR_UNIQ_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[43].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_UNIQ_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_UNIQ_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'SERIES_UNIQ_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'SERIES_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SERIES_UNIQ_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[44].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERIES_UNIQ_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'SERIES_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERIES_UNIQ_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'CURR_SERV_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CURR_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURR_SERV_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CURR_SERV_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'CURR_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURR_SERV_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'RECIP_SERV_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RECIP_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RECIP_SERV_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RECIP_SERV_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'RECIP_SERV_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECIP_SERV_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'CURR_NET_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CURR_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURR_NET_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[47].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CURR_NET_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'CURR_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURR_NET_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[47].getCount());
    }

    /**
     * Retrieves the value of the 'RECIP_NET_OPER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RECIP_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RECIP_NET_OPER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[48].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RECIP_NET_OPER' field in the FML buffer.
     *
     * @return Number of values defined for 'RECIP_NET_OPER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECIP_NET_OPER_size() throws FMLManipulationException {
        return (this.fmlBuffer[48].getCount());
    }

    /**
     * Retrieves the value of the 'INITI_ORDER_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'INITI_ORDER_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INITI_ORDER_TP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[49].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INITI_ORDER_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'INITI_ORDER_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INITI_ORDER_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[49].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_COMMENT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_COMMENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_COMMENT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[50].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_COMMENT' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_COMMENT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_COMMENT_size() throws FMLManipulationException {
        return (this.fmlBuffer[50].getCount());
    }

    /**
     * Retrieves the value of the 'DELAY_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'DELAY_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DELAY_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[51].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DELAY_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'DELAY_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DELAY_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[51].getCount());
    }

    /**
     * Retrieves the value of the 'FILE_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'FILE_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FILE_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[52].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FILE_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'FILE_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FILE_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[52].getCount());
    }

    /**
     * Retrieves the value of the 'MUNICIPALITY' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'MUNICIPALITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MUNICIPALITY(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[53].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'MUNICIPALITY' field in the FML buffer.
     *
     * @return Number of values defined for 'MUNICIPALITY' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MUNICIPALITY_size() throws FMLManipulationException {
        return (this.fmlBuffer[53].getCount());
    }

    /**
     * Retrieves the value of the 'EXT_TRX_STS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'EXT_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXT_TRX_STS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[54].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXT_TRX_STS' field in the FML buffer.
     *
     * @return Number of values defined for 'EXT_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXT_TRX_STS_size() throws FMLManipulationException {
        return (this.fmlBuffer[54].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_STS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'LAST_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_TRX_STS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[55].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_STS' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_STS_size() throws FMLManipulationException {
        return (this.fmlBuffer[55].getCount());
    }

    /**
     * Retrieves the value of the 'INITI_TIMESTAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'INITI_TIMESTAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_INITI_TIMESTAMP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[56].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'INITI_TIMESTAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'INITI_TIMESTAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_INITI_TIMESTAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[56].getCount());
    }

    /**
     * Retrieves the value of the 'OTHER_OPERATOR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'OTHER_OPERATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OTHER_OPERATOR(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[57].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'OTHER_OPERATOR' field in the FML buffer.
     *
     * @return Number of values defined for 'OTHER_OPERATOR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OTHER_OPERATOR_size() throws FMLManipulationException {
        return (this.fmlBuffer[57].getCount());
    }

    /**
     * Retrieves the value of the 'POINT_OF_CONNECTION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'POINT_OF_CONNECTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POINT_OF_CONNECTION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[58].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'POINT_OF_CONNECTION' field in the FML buffer.
     *
     * @return Number of values defined for 'POINT_OF_CONNECTION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POINT_OF_CONNECTION_size() throws FMLManipulationException {
        return (this.fmlBuffer[58].getCount());
    }

    /**
     * Retrieves the value of the 'RANGE_UPD_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RANGE_UPD_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RANGE_UPD_TP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[59].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'RANGE_UPD_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'RANGE_UPD_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RANGE_UPD_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[59].getCount());
    }

    /**
     * Retrieves the value of the 'CSNPSPC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CSNPSPC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CSNPSPC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[60].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CSNPSPC' field in the FML buffer.
     *
     * @return Number of values defined for 'CSNPSPC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CSNPSPC_size() throws FMLManipulationException {
        return (this.fmlBuffer[60].getCount());
    }

    /**
     * Retrieves the value of the 'ROUTING_INFO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ROUTING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROUTING_INFO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[61].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROUTING_INFO' field in the FML buffer.
     *
     * @return Number of values defined for 'ROUTING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROUTING_INFO_size() throws FMLManipulationException {
        return (this.fmlBuffer[61].getCount());
    }

    /**
     * Retrieves the value of the 'RATING_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RATING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RATING_TP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[62].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RATING_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'RATING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RATING_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[62].getCount());
    }

    /**
     * Retrieves the value of the 'MAN_AUT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'MAN_AUT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MAN_AUT(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[63].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'MAN_AUT' field in the FML buffer.
     *
     * @return Number of values defined for 'MAN_AUT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MAN_AUT_size() throws FMLManipulationException {
        return (this.fmlBuffer[63].getCount());
    }

    /**
     * Retrieves the value of the 'TERM_CONF_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TERM_CONF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TERM_CONF_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[64].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TERM_CONF_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'TERM_CONF_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TERM_CONF_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[64].getCount());
    }

    /**
     * Retrieves the value of the 'SERVICE_PROVIDER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'SERVICE_PROVIDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERVICE_PROVIDER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[65].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERVICE_PROVIDER' field in the FML buffer.
     *
     * @return Number of values defined for 'SERVICE_PROVIDER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERVICE_PROVIDER_size() throws FMLManipulationException {
        return (this.fmlBuffer[65].getCount());
    }

    /**
     * Retrieves the value of the 'NP_CARD_STS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NP_CARD_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NP_CARD_STS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[66].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NP_CARD_STS' field in the FML buffer.
     *
     * @return Number of values defined for 'NP_CARD_STS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NP_CARD_STS_size() throws FMLManipulationException {
        return (this.fmlBuffer[66].getCount());
    }

    /**
     * Retrieves the value of the 'CHARGING_INFO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CHARGING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHARGING_INFO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[67].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHARGING_INFO' field in the FML buffer.
     *
     * @return Number of values defined for 'CHARGING_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHARGING_INFO_size() throws FMLManipulationException {
        return (this.fmlBuffer[67].getCount());
    }

    /**
     * Retrieves the value of the 'DIRECTORY_INFO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'DIRECTORY_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DIRECTORY_INFO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[68].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DIRECTORY_INFO' field in the FML buffer.
     *
     * @return Number of values defined for 'DIRECTORY_INFO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DIRECTORY_INFO_size() throws FMLManipulationException {
        return (this.fmlBuffer[68].getCount());
    }

    /**
     * Retrieves the value of the 'NUM_PORTED_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NUM_PORTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NUM_PORTED_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[69].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NUM_PORTED_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'NUM_PORTED_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NUM_PORTED_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[69].getCount());
    }

    /**
     * Retrieves the value of the 'PORTING_CASE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORTING_CASE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORTING_CASE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[70].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PORTING_CASE' field in the FML buffer.
     *
     * @return Number of values defined for 'PORTING_CASE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORTING_CASE_size() throws FMLManipulationException {
        return (this.fmlBuffer[70].getCount());
    }

    /**
     * Retrieves the value of the 'PORTING_TP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORTING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PORTING_TP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[71].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PORTING_TP' field in the FML buffer.
     *
     * @return Number of values defined for 'PORTING_TP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORTING_TP_size() throws FMLManipulationException {
        return (this.fmlBuffer[71].getCount());
    }

    /**
     * Retrieves the value of the 'RANGE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RANGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RANGE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[72].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RANGE' field in the FML buffer.
     *
     * @return Number of values defined for 'RANGE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RANGE_size() throws FMLManipulationException {
        return (this.fmlBuffer[72].getCount());
    }

    /**
     * Retrieves the value of the 'SERIES_COUNT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'SERIES_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERIES_COUNT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[73].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERIES_COUNT' field in the FML buffer.
     *
     * @return Number of values defined for 'SERIES_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERIES_COUNT_size() throws FMLManipulationException {
        return (this.fmlBuffer[73].getCount());
    }

    /**
     * Retrieves the value of the 'EIDNODSIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'EIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EIDNODSIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[74].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EIDNODSIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'EIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EIDNODSIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[74].getCount());
    }

    /**
     * Retrieves the value of the 'EIDNTYP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'EIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EIDNTYP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[75].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EIDNTYP' field in the FML buffer.
     *
     * @return Number of values defined for 'EIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EIDNTYP_size() throws FMLManipulationException {
        return (this.fmlBuffer[75].getCount());
    }

    /**
     * Retrieves the value of the 'EIDNTYPNUMB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'EIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EIDNTYPNUMB(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[76].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EIDNTYPNUMB' field in the FML buffer.
     *
     * @return Number of values defined for 'EIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EIDNTYPNUMB_size() throws FMLManipulationException {
        return (this.fmlBuffer[76].getCount());
    }

    /**
     * Retrieves the value of the 'NEIDNODSIGN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NEIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEIDNODSIGN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[77].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEIDNODSIGN' field in the FML buffer.
     *
     * @return Number of values defined for 'NEIDNODSIGN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEIDNODSIGN_size() throws FMLManipulationException {
        return (this.fmlBuffer[77].getCount());
    }

    /**
     * Retrieves the value of the 'NEIDNTYP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NEIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEIDNTYP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[78].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEIDNTYP' field in the FML buffer.
     *
     * @return Number of values defined for 'NEIDNTYP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEIDNTYP_size() throws FMLManipulationException {
        return (this.fmlBuffer[78].getCount());
    }

    /**
     * Retrieves the value of the 'NEIDNTYPNUMB' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'NEIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEIDNTYPNUMB(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[79].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NEIDNTYPNUMB' field in the FML buffer.
     *
     * @return Number of values defined for 'NEIDNTYPNUMB' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEIDNTYPNUMB_size() throws FMLManipulationException {
        return (this.fmlBuffer[79].getCount());
    }

    /**
     * Retrieves the value of the 'CONTACT_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTACT_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[80].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTACT_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTACT_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[80].getCount());
    }

    /**
     * Retrieves the value of the 'CONTACT_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTACT_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[81].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTACT_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTACT_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[81].getCount());
    }

    /**
     * Retrieves the value of the 'CONTACT_EMAIL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CONTACT_EMAIL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[82].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CONTACT_EMAIL' field in the FML buffer.
     *
     * @return Number of values defined for 'CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONTACT_EMAIL_size() throws FMLManipulationException {
        return (this.fmlBuffer[82].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_CONTACT_NAME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ERROR_CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERROR_CONTACT_NAME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[83].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_CONTACT_NAME' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_CONTACT_NAME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_CONTACT_NAME_size() throws FMLManipulationException {
        return (this.fmlBuffer[83].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_CONTACT_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ERROR_CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERROR_CONTACT_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[84].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_CONTACT_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_CONTACT_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_CONTACT_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[84].getCount());
    }

    /**
     * Retrieves the value of the 'ERROR_CONTACT_EMAIL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ERROR_CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERROR_CONTACT_EMAIL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[85].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERROR_CONTACT_EMAIL' field in the FML buffer.
     *
     * @return Number of values defined for 'ERROR_CONTACT_EMAIL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERROR_CONTACT_EMAIL_size() throws FMLManipulationException {
        return (this.fmlBuffer[85].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[86].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_1' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_1_size() throws FMLManipulationException {
        return (this.fmlBuffer[86].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_2(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[87].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_2' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_2_size() throws FMLManipulationException {
        return (this.fmlBuffer[87].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_3(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[88].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_3' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_3_size() throws FMLManipulationException {
        return (this.fmlBuffer[88].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_4(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[89].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_4' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_4_size() throws FMLManipulationException {
        return (this.fmlBuffer[89].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_5(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[90].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_5' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_5_size() throws FMLManipulationException {
        return (this.fmlBuffer[90].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_6(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[91].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_6' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_6_size() throws FMLManipulationException {
        return (this.fmlBuffer[91].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_7(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[92].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_7' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_7_size() throws FMLManipulationException {
        return (this.fmlBuffer[92].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_8(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[93].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_8' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_8_size() throws FMLManipulationException {
        return (this.fmlBuffer[93].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_9(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[94].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_9' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_9_size() throws FMLManipulationException {
        return (this.fmlBuffer[94].getCount());
    }

    /**
     * Retrieves the value of the 'TEXT_10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TEXT_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEXT_10(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[95].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEXT_10' field in the FML buffer.
     *
     * @return Number of values defined for 'TEXT_10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEXT_10_size() throws FMLManipulationException {
        return (this.fmlBuffer[95].getCount());
    }

    /**
     * Retrieves the value of the 'RPSP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RPSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RPSP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[96].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RPSP' field in the FML buffer.
     *
     * @return Number of values defined for 'RPSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RPSP_size() throws FMLManipulationException {
        return (this.fmlBuffer[96].getCount());
    }

    /**
     * Retrieves the value of the 'TRX_SENT_DATETIME' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'TRX_SENT_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRX_SENT_DATETIME(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[97].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TRX_SENT_DATETIME' field in the FML buffer.
     *
     * @return Number of values defined for 'TRX_SENT_DATETIME' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TRX_SENT_DATETIME_size() throws FMLManipulationException {
        return (this.fmlBuffer[97].getCount());
    }

    /**
     * Retrieves the value of the 'ORIGINATING_NUMBER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ORIGINATING_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORIGINATING_NUMBER(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[98].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORIGINATING_NUMBER' field in the FML buffer.
     *
     * @return Number of values defined for 'ORIGINATING_NUMBER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORIGINATING_NUMBER_size() throws FMLManipulationException {
        return (this.fmlBuffer[98].getCount());
    }

    /**
     * Retrieves the value of the 'ICC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ICC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ICC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[99].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ICC' field in the FML buffer.
     *
     * @return Number of values defined for 'ICC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ICC_size() throws FMLManipulationException {
        return (this.fmlBuffer[99].getCount());
    }

    /**
     * Retrieves the value of the 'COORDINATION_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'COORDINATION_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COORDINATION_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[100].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'COORDINATION_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'COORDINATION_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COORDINATION_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[100].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[101].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_size() throws FMLManipulationException {
        return (this.fmlBuffer[101].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_MAIN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_MAIN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_MAIN(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[102].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_MAIN' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_MAIN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_MAIN_size() throws FMLManipulationException {
        return (this.fmlBuffer[102].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL1(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[103].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL1' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL1_size() throws FMLManipulationException {
        return (this.fmlBuffer[103].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL2(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[104].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL2' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL2_size() throws FMLManipulationException {
        return (this.fmlBuffer[104].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL3' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL3(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[105].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL3' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL3' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL3_size() throws FMLManipulationException {
        return (this.fmlBuffer[105].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL4' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL4(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[106].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL4' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL4' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL4_size() throws FMLManipulationException {
        return (this.fmlBuffer[106].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL5' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL5(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[107].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL5' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL5' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL5_size() throws FMLManipulationException {
        return (this.fmlBuffer[107].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL6' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL6(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[108].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL6' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL6' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL6_size() throws FMLManipulationException {
        return (this.fmlBuffer[108].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL7' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL7(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[109].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL7' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL7' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL7_size() throws FMLManipulationException {
        return (this.fmlBuffer[109].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL8' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL8(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[110].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL8' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL8' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL8_size() throws FMLManipulationException {
        return (this.fmlBuffer[110].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL9' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL9(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[111].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL9' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL9' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL9_size() throws FMLManipulationException {
        return (this.fmlBuffer[111].getCount());
    }

    /**
     * Retrieves the value of the 'PORT_ENDED_ADDITIONAL10' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'PORT_ENDED_ADDITIONAL10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PORT_ENDED_ADDITIONAL10(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[112].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PORT_ENDED_ADDITIONAL10' field in the FML buffer.
     *
     * @return Number of values defined for 'PORT_ENDED_ADDITIONAL10' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PORT_ENDED_ADDITIONAL10_size() throws FMLManipulationException {
        return (this.fmlBuffer[112].getCount());
    }

    /**
     * Retrieves the value of the 'DTSP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'DTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DTSP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[113].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DTSP' field in the FML buffer.
     *
     * @return Number of values defined for 'DTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DTSP_size() throws FMLManipulationException {
        return (this.fmlBuffer[113].getCount());
    }

    /**
     * Retrieves the value of the 'RTSP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'RTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RTSP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[114].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RTSP' field in the FML buffer.
     *
     * @return Number of values defined for 'RTSP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RTSP_size() throws FMLManipulationException {
        return (this.fmlBuffer[114].getCount());
    }

    /**
     * Retrieves the value of the 'ORDID_STR_BUF' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 200).
     * @return Value of 'ORDID_STR_BUF' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORDID_STR_BUF(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[115].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORDID_STR_BUF' field in the FML buffer.
     *
     * @return Number of values defined for 'ORDID_STR_BUF' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORDID_STR_BUF_size() throws FMLManipulationException {
        return (this.fmlBuffer[115].getCount());
    }

    /**
     * Retrieves the value of the 'PNPORDBUFROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'PNPORDBUFROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PNPORDBUFROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[116].getValue(0));
    }

    /**
     * Retrieves the value of the 'NPORDDATRECROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPORDDATRECROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[117].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[117].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECINT_ORDER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECINT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_NPORDDATRECINT_ORDER_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[118].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECINT_ORDER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECINT_ORDER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECINT_ORDER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[118].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPORDDATRECSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[119].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[119].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPORDDATRECSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[120].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[120].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPORDDATRECOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[121].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[121].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPORDDATRECAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[122].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[122].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPORDDATRECDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[123].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[123].getCount());
    }

    /**
     * Retrieves the value of the 'NPORDDATRECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NPORDDATRECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPORDDATRECDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[124].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NPORDDATRECDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'NPORDDATRECDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPORDDATRECDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[124].getCount());
    }

    /**
     * Retrieves the value of the 'ORDER_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ORDER_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORDER_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[125].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ORDER_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'ORDER_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORDER_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[125].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_STS_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'LAST_STS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_STS_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[126].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_STS_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_STS_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_STS_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[126].getCount());
    }

    /**
     * Retrieves the value of the 'ORD_EXT_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ORD_EXT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ORD_EXT_ID(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[127].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORD_EXT_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ORD_EXT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORD_EXT_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[127].getCount());
    }

    /**
     * Retrieves the value of the 'ORDID_STR' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ORDID_STR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ORDID_STR(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[128].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORDID_STR' field in the FML buffer.
     *
     * @return Number of values defined for 'ORDID_STR' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORDID_STR_size() throws FMLManipulationException {
        return (this.fmlBuffer[128].getCount());
    }

    /**
     * Retrieves the value of the 'TEMPORARY_MSISDN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'TEMPORARY_MSISDN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TEMPORARY_MSISDN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[129].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'TEMPORARY_MSISDN' field in the FML buffer.
     *
     * @return Number of values defined for 'TEMPORARY_MSISDN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TEMPORARY_MSISDN_size() throws FMLManipulationException {
        return (this.fmlBuffer[129].getCount());
    }

    /**
     * Retrieves the value of the 'PNPERRBUFROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'PNPERRBUFROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PNPERRBUFROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[130].getValue(0));
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXERRBUFROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[131].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[131].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFERROR_UNIQ_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFERROR_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXERRBUFERROR_UNIQ_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[132].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFERROR_UNIQ_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFERROR_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFERROR_UNIQ_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[132].getCount());
    }

    /**
     * Retrieves the value of the 'REJ_ERR_SEQ' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'REJ_ERR_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_REJ_ERR_SEQ(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[133].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REJ_ERR_SEQ' field in the FML buffer.
     *
     * @return Number of values defined for 'REJ_ERR_SEQ' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REJ_ERR_SEQ_size() throws FMLManipulationException {
        return (this.fmlBuffer[133].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXERRBUFSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[134].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[134].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXERRBUFSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[135].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[135].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXERRBUFOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[136].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[136].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXERRBUFAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[137].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[137].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXERRBUFDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[138].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[138].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXERRBUFDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXERRBUFDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXERRBUFDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[139].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NPTRXERRBUFDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXERRBUFDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXERRBUFDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[139].getCount());
    }

    /**
     * Retrieves the value of the 'REJ_ERR_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'REJ_ERR_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_REJ_ERR_CD(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[140].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REJ_ERR_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'REJ_ERR_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REJ_ERR_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[140].getCount());
    }

    /**
     * Retrieves the value of the 'REJ_ERR_TXT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'REJ_ERR_TXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REJ_ERR_TXT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[141].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REJ_ERR_TXT' field in the FML buffer.
     *
     * @return Number of values defined for 'REJ_ERR_TXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REJ_ERR_TXT_size() throws FMLManipulationException {
        return (this.fmlBuffer[141].getCount());
    }

    /**
     * Retrieves the value of the 'ERR_FIELD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'ERR_FIELD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ERR_FIELD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[142].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ERR_FIELD' field in the FML buffer.
     *
     * @return Number of values defined for 'ERR_FIELD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ERR_FIELD_size() throws FMLManipulationException {
        return (this.fmlBuffer[142].getCount());
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_CODE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_CODE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[143].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TYPE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[144].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TEXT' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DCI_ERROR_TEXT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[145].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'DCI_ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[146].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_MORE_ROWS' field in the FML buffer.
     *
     * @return Value of 'DCI_MORE_ROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_MORE_ROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[147].getValue(0)));
    }

    /**
     * Retrieves the value of the 'PNPSERBUFROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'PNPSERBUFROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PNPSERBUFROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[148].getValue(0));
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXSERBUFROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[149].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[149].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFSERIES_UNIQ_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFSERIES_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXSERBUFSERIES_UNIQ_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[150].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFSERIES_UNIQ_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFSERIES_UNIQ_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFSERIES_UNIQ_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[150].getCount());
    }

    /**
     * Retrieves the value of the 'SERIES' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'SERIES' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SERIES(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[151].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SERIES' field in the FML buffer.
     *
     * @return Number of values defined for 'SERIES' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SERIES_size() throws FMLManipulationException {
        return (this.fmlBuffer[151].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFSYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXSERBUFSYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[152].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFSYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFSYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFSYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[152].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXSERBUFSYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[153].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFSYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFSYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFSYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[153].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFOPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXSERBUFOPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[154].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFOPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFOPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFOPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[154].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFAPPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXSERBUFAPPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[155].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFAPPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFAPPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFAPPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[155].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFDL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NPTRXSERBUFDL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[156].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFDL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFDL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFDL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[156].getCount());
    }

    /**
     * Retrieves the value of the 'NPTRXSERBUFDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 500).
     * @return Value of 'NPTRXSERBUFDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NPTRXSERBUFDL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[157].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NPTRXSERBUFDL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'NPTRXSERBUFDL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NPTRXSERBUFDL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[157].getCount());
    }
}