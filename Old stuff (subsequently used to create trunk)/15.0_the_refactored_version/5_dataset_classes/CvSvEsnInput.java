package no.netcom.ninja.core.system.tuxedo.service.parameters;

import no.netcom.ninja.core.system.tuxedo.exception.EnvironmentException;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

import java.util.HashSet;


/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CvSvEsnInput extends ServiceInput implements Conversable {
    //// Indicates whether the default values has been loaded from the DB or not
    //private static Boolean defaultValuesPopulated = Boolean.FALSE;
    //// Holds default values for fields in FML buffer
    //private static String defaultValues[] = null;

    // List of fields not to be copied to same-named fields in CsApiBan.
    private static HashSet fieldsNotToBeDirectlyCopied = new HashSet();

    static {
        fieldsNotToBeDirectlyCopied.add("BAN");
        fieldsNotToBeDirectlyCopied.add("CUSTOMER_ID");
        fieldsNotToBeDirectlyCopied.add("ROWCOUNT");
        fieldsNotToBeDirectlyCopied.add("EXPIRATION_DATE");
        fieldsNotToBeDirectlyCopied.add("EFFECTIVE_DATE");
        fieldsNotToBeDirectlyCopied.add("DEALER_CODE");
    }


    /**
     * Creates a new instance of CvSvEsnInput
     *
     * @throws EnvironmentException
     * @throws FMLManipulationException
     */
    public CvSvEsnInput() throws EnvironmentException, FMLManipulationException {
        // Initialise FML buffer
        fmlBuffer = new FmlField[69];

        //// Get default values from DB
        //synchronized (this.defaultValuesPopulated) {
        //    if (this.defaultValuesPopulated.equals(Boolean.FALSE)) {
        //        defaultValues = getDefaultValues("cvSvEsn", 69);
        //        this.defaultValuesPopulated = Boolean.TRUE;
        //    }
        //}

        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("DIRECTIVE", FmlField.TYPE_INTEGER, -1, "0", 1, 1);
        this.fmlBuffer[2] = new FmlField("FIRST_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("SECOND_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, "200900", 4, 1);
        this.fmlBuffer[5] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, "Ninja", 5, 1);
        this.fmlBuffer[6] = new FmlField("TRANSACTION_MODE", FmlField.TYPE_BYTE, -1, "O", 6, 1);
        this.fmlBuffer[7] = new FmlField("RUN_DATE", FmlField.TYPE_STRING, 9, null, 7, 1);
        this.fmlBuffer[8] = new FmlField("MARKET_CODE", FmlField.TYPE_STRING, 4, "NTC", 8, 1);
        this.fmlBuffer[9] = new FmlField("SVC_STATUS", FmlField.TYPE_BYTE, -1, null, 9, 1);
        this.fmlBuffer[10] = new FmlField("LAST_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 10, 1);
        this.fmlBuffer[11] = new FmlField("LAST_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 11, 1);
        this.fmlBuffer[12] = new FmlField("ENV_CODE", FmlField.TYPE_STRING, 11, "PRDENV", 12, 1);
        this.fmlBuffer[13] = new FmlField("SESSION_ID", FmlField.TYPE_INTEGER, -1, "0", 13, 1);
        this.fmlBuffer[14] = new FmlField("ONLINE_TRX_NO", FmlField.TYPE_INTEGER, -1, "0", 14, 1);
        this.fmlBuffer[15] = new FmlField("GROUP_TRX_ID", FmlField.TYPE_INTEGER, -1, null, 15, 1);
        this.fmlBuffer[16] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 16, 1);
        this.fmlBuffer[17] = new FmlField("BAN_ROWID", FmlField.TYPE_STRING, 19, null, 17, 1);
        this.fmlBuffer[18] = new FmlField("CUSTOMER_ID", FmlField.TYPE_INTEGER, -1, null, 18, 1);
        this.fmlBuffer[19] = new FmlField("CUSTOMER_ROWID", FmlField.TYPE_STRING, 19, null, 19, 1);
        this.fmlBuffer[20] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 20, 1);
        this.fmlBuffer[21] = new FmlField("CTN_ROWID", FmlField.TYPE_STRING, 19, null, 21, 1);
        this.fmlBuffer[22] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 22, 1);
        this.fmlBuffer[23] = new FmlField("EQUIPMENT_NO", FmlField.TYPE_STRING, 21, null, 23, 50);
        this.fmlBuffer[24] = new FmlField("PHD_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 24, 50);
        this.fmlBuffer[25] = new FmlField("EQUIPMENT_LEVEL", FmlField.TYPE_SHORT, -1, null, 25, 50);
        this.fmlBuffer[26] = new FmlField("IMSI", FmlField.TYPE_STRING, 16, null, 26, 50);
        this.fmlBuffer[27] = new FmlField("EXPIRATION_DATE", FmlField.TYPE_STRING, 15, null, 27, 50);
        this.fmlBuffer[28] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 15, null, 28, 50);
        this.fmlBuffer[29] = new FmlField("OWNERSHIP_CODE", FmlField.TYPE_STRING, 3, null, 29, 50);
        this.fmlBuffer[30] = new FmlField("SW_STATE_IND", FmlField.TYPE_BYTE, -1, null, 30, 50);
        this.fmlBuffer[31] = new FmlField("LAST_SW_ACTV_DATE", FmlField.TYPE_STRING, 9, null, 31, 50);
        this.fmlBuffer[32] = new FmlField("NEXT_ACTV_CODE", FmlField.TYPE_BYTE, -1, null, 32, 50);
        this.fmlBuffer[33] = new FmlField("NEXT_ACTV_DATE", FmlField.TYPE_STRING, 9, null, 33, 50);
        this.fmlBuffer[34] = new FmlField("NEXT_ACTV_ISSUE_DT", FmlField.TYPE_STRING, 9, null, 34, 50);
        this.fmlBuffer[35] = new FmlField("DEVICE_TYPE", FmlField.TYPE_BYTE, -1, null, 35, 50);
        this.fmlBuffer[36] = new FmlField("ESN_MODE", FmlField.TYPE_BYTE, -1, null, 36, 50);
        this.fmlBuffer[37] = new FmlField("ITEM_ID", FmlField.TYPE_STRING, 16, null, 37, 50);
        this.fmlBuffer[38] = new FmlField("POOL", FmlField.TYPE_STRING, 3, null, 38, 50);
        this.fmlBuffer[39] = new FmlField("LOCATION_ID", FmlField.TYPE_STRING, 5, null, 39, 50);
        this.fmlBuffer[40] = new FmlField("ACTIVITY_CODE", FmlField.TYPE_STRING, 5, null, 40, 50);
        this.fmlBuffer[41] = new FmlField("ACTIVITY_DATE", FmlField.TYPE_STRING, 15, null, 41, 50);
        this.fmlBuffer[42] = new FmlField("OPERATION_STATUS", FmlField.TYPE_BYTE, -1, null, 42, 50);
        this.fmlBuffer[43] = new FmlField("ITEM_OWNERSHIP", FmlField.TYPE_BYTE, -1, null, 43, 50);
        this.fmlBuffer[44] = new FmlField("ITEM_OWNERSHIP_DT", FmlField.TYPE_STRING, 15, null, 44, 50);
        this.fmlBuffer[45] = new FmlField("CURR_POSSESSION", FmlField.TYPE_BYTE, -1, null, 45, 50);
        this.fmlBuffer[46] = new FmlField("CURR_POSSESSION_DT", FmlField.TYPE_STRING, 15, null, 46, 50);
        this.fmlBuffer[47] = new FmlField("MISSING_IND", FmlField.TYPE_BYTE, -1, null, 47, 50);
        this.fmlBuffer[48] = new FmlField("IN_REPAIR_IND", FmlField.TYPE_BYTE, -1, null, 48, 50);
        this.fmlBuffer[49] = new FmlField("IN_TRANSIT_IND", FmlField.TYPE_BYTE, -1, null, 49, 50);
        this.fmlBuffer[50] = new FmlField("COMITED_TO_POS_IND", FmlField.TYPE_BYTE, -1, null, 50, 50);
        this.fmlBuffer[51] = new FmlField("COMITED_DATE", FmlField.TYPE_STRING, 15, null, 51, 50);
        this.fmlBuffer[52] = new FmlField("ACTIVITY_REASON", FmlField.TYPE_STRING, 4, null, 52, 50);
        this.fmlBuffer[53] = new FmlField("UPGRADE_IND", FmlField.TYPE_BYTE, -1, null, 53, 50);
        this.fmlBuffer[54] = new FmlField("EXPECTED_RTRN_DATE", FmlField.TYPE_STRING, 15, null, 54, 50);
        this.fmlBuffer[55] = new FmlField("POLICE_REPORT_NO", FmlField.TYPE_STRING, 16, null, 55, 50);
        this.fmlBuffer[56] = new FmlField("POLICE_REPORT_DATE", FmlField.TYPE_STRING, 15, null, 56, 50);
        this.fmlBuffer[57] = new FmlField("POLICE_STATION", FmlField.TYPE_STRING, 31, null, 57, 50);
        this.fmlBuffer[58] = new FmlField("PUK", FmlField.TYPE_INTEGER, -1, null, 58, 50);
        this.fmlBuffer[59] = new FmlField("PUK2", FmlField.TYPE_INTEGER, -1, null, 59, 50);
        this.fmlBuffer[60] = new FmlField("FIRST_USED_DATE", FmlField.TYPE_STRING, 15, null, 60, 50);
        this.fmlBuffer[61] = new FmlField("SIM_STATUS", FmlField.TYPE_BYTE, -1, null, 61, 50);
        this.fmlBuffer[62] = new FmlField("SUSPEND_IND", FmlField.TYPE_BYTE, -1, null, 62, 50);
        this.fmlBuffer[63] = new FmlField("SUSPEND_DATE", FmlField.TYPE_STRING, 15, null, 63, 50);
        this.fmlBuffer[64] = new FmlField("SENT_TO_AUC_IND", FmlField.TYPE_BYTE, -1, null, 64, 50);
        this.fmlBuffer[65] = new FmlField("HLR_CD", FmlField.TYPE_STRING, 4, null, 65, 50);
        this.fmlBuffer[66] = new FmlField("K4ID", FmlField.TYPE_STRING, 41, null, 66, 50);
        this.fmlBuffer[67] = new FmlField("DEALER_CODE", FmlField.TYPE_STRING, 6, null, 67, 50);
        this.fmlBuffer[68] = new FmlField("RSNCODE", FmlField.TYPE_STRING, 5, null, 68, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Sets the value of the 'GENERATION' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_GENERATION(Integer value) throws FMLManipulationException {
        this.fmlBuffer[0].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Sets the value of the 'DIRECTIVE' field in the FML buffer.
     *
     * @param value Default value: 0.
     * @throws FMLManipulationException
     */
    public void set_DIRECTIVE(Integer value) throws FMLManipulationException {
        this.fmlBuffer[1].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'FIRST_DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'FIRST_DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FIRST_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Sets the value of the 'FIRST_DIRECTIVE' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_FIRST_DIRECTIVE(Integer value) throws FMLManipulationException {
        this.fmlBuffer[2].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'SECOND_DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'SECOND_DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SECOND_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Sets the value of the 'SECOND_DIRECTIVE' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_SECOND_DIRECTIVE(Integer value) throws FMLManipulationException {
        this.fmlBuffer[3].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(0));
    }

    /**
     * Sets the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @param value Default value: 200900.
     * @throws FMLManipulationException
     */
    public void set_OPERATOR_ID(Integer value) throws FMLManipulationException {
        this.fmlBuffer[4].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(0));
    }

    /**
     * Sets the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @param value Default value: Ninja, Maximum length: 7.
     * @throws FMLManipulationException
     */
    public void set_APPLICATION_ID(String value) throws FMLManipulationException {
        this.fmlBuffer[5].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'TRANSACTION_MODE' field in the FML buffer.
     *
     * @return Value of 'TRANSACTION_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRANSACTION_MODE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[6].getValue(0)));
    }

    /**
     * Sets the value of the 'TRANSACTION_MODE' field in the FML buffer.
     *
     * @param value Default value: O.
     * @throws FMLManipulationException
     */
    public void set_TRANSACTION_MODE(String value) throws FMLManipulationException {
        this.fmlBuffer[6].setValue(0, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves the value of the 'RUN_DATE' field in the FML buffer.
     *
     * @return Value of 'RUN_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RUN_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(0));
    }

    /**
     * Sets the value of the 'RUN_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 9.
     * @throws FMLManipulationException
     */
    public void set_RUN_DATE(String value) throws FMLManipulationException {
        this.fmlBuffer[7].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'MARKET_CODE' field in the FML buffer.
     *
     * @return Value of 'MARKET_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MARKET_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(0));
    }

    /**
     * Sets the value of the 'MARKET_CODE' field in the FML buffer.
     *
     * @param value Default value: NTC, Maximum length: 4.
     * @throws FMLManipulationException
     */
    public void set_MARKET_CODE(String value) throws FMLManipulationException {
        this.fmlBuffer[8].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'SVC_STATUS' field in the FML buffer.
     *
     * @return Value of 'SVC_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SVC_STATUS() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[9].getValue(0)));
    }

    /**
     * Sets the value of the 'SVC_STATUS' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_SVC_STATUS(String value) throws FMLManipulationException {
        this.fmlBuffer[9].setValue(0, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves the value of the 'LAST_UPDATE_DATE' field in the FML buffer.
     *
     * @return Value of 'LAST_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_UPDATE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(0));
    }

    /**
     * Sets the value of the 'LAST_UPDATE_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @throws FMLManipulationException
     */
    public void set_LAST_UPDATE_DATE(String value) throws FMLManipulationException {
        this.fmlBuffer[10].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'LAST_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Value of 'LAST_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_UPDATE_STAMP() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[11].getValue(0)));
    }

    /**
     * Sets the value of the 'LAST_UPDATE_STAMP' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_LAST_UPDATE_STAMP(Integer value) throws FMLManipulationException {
        this.fmlBuffer[11].setValue(0, TypeConverter.integerToShort(value));
    }

    /**
     * Retrieves the value of the 'ENV_CODE' field in the FML buffer.
     *
     * @return Value of 'ENV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ENV_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(0));
    }

    /**
     * Sets the value of the 'ENV_CODE' field in the FML buffer.
     *
     * @param value Default value: PRDENV, Maximum length: 11.
     * @throws FMLManipulationException
     */
    public void set_ENV_CODE(String value) throws FMLManipulationException {
        this.fmlBuffer[12].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'SESSION_ID' field in the FML buffer.
     *
     * @return Value of 'SESSION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SESSION_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[13].getValue(0));
    }

    /**
     * Sets the value of the 'SESSION_ID' field in the FML buffer.
     *
     * @param value Default value: 0.
     * @throws FMLManipulationException
     */
    public void set_SESSION_ID(Integer value) throws FMLManipulationException {
        this.fmlBuffer[13].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'ONLINE_TRX_NO' field in the FML buffer.
     *
     * @return Value of 'ONLINE_TRX_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ONLINE_TRX_NO() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[14].getValue(0));
    }

    /**
     * Sets the value of the 'ONLINE_TRX_NO' field in the FML buffer.
     *
     * @param value Default value: 0.
     * @throws FMLManipulationException
     */
    public void set_ONLINE_TRX_NO(Integer value) throws FMLManipulationException {
        this.fmlBuffer[14].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'GROUP_TRX_ID' field in the FML buffer.
     *
     * @return Value of 'GROUP_TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GROUP_TRX_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[15].getValue(0));
    }

    /**
     * Sets the value of the 'GROUP_TRX_ID' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_GROUP_TRX_ID(Integer value) throws FMLManipulationException {
        this.fmlBuffer[15].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[16].getValue(0));
    }

    /**
     * Sets the value of the 'BAN' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_BAN(Integer value) throws FMLManipulationException {
        this.fmlBuffer[16].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'BAN_ROWID' field in the FML buffer.
     *
     * @return Value of 'BAN_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BAN_ROWID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(0));
    }

    /**
     * Sets the value of the 'BAN_ROWID' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 19.
     * @throws FMLManipulationException
     */
    public void set_BAN_ROWID(String value) throws FMLManipulationException {
        this.fmlBuffer[17].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'CUSTOMER_ID' field in the FML buffer.
     *
     * @return Value of 'CUSTOMER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CUSTOMER_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[18].getValue(0));
    }

    /**
     * Sets the value of the 'CUSTOMER_ID' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_CUSTOMER_ID(Integer value) throws FMLManipulationException {
        this.fmlBuffer[18].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'CUSTOMER_ROWID' field in the FML buffer.
     *
     * @return Value of 'CUSTOMER_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUSTOMER_ROWID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(0));
    }

    /**
     * Sets the value of the 'CUSTOMER_ROWID' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 19.
     * @throws FMLManipulationException
     */
    public void set_CUSTOMER_ROWID(String value) throws FMLManipulationException {
        this.fmlBuffer[19].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(0));
    }

    /**
     * Sets the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 21.
     * @throws FMLManipulationException
     */
    public void set_SUBSCRIBER_NO(String value) throws FMLManipulationException {
        this.fmlBuffer[20].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'CTN_ROWID' field in the FML buffer.
     *
     * @return Value of 'CTN_ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CTN_ROWID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(0));
    }

    /**
     * Sets the value of the 'CTN_ROWID' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 19.
     * @throws FMLManipulationException
     */
    public void set_CTN_ROWID(String value) throws FMLManipulationException {
        this.fmlBuffer[21].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[22].getValue(0));
    }

    /**
     * Sets the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @param value Default value: null.
     * @throws FMLManipulationException
     */
    public void set_ROWCOUNT(Integer value) throws FMLManipulationException {
        this.fmlBuffer[22].setValue(0, value);
    }

    /**
     * Retrieves the value of the 'EQUIPMENT_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'EQUIPMENT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EQUIPMENT_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Sets the value of the 'EQUIPMENT_NO' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 21.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_EQUIPMENT_NO(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[23].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'EQUIPMENT_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'EQUIPMENT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EQUIPMENT_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'PHD_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'PHD_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PHD_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Sets the value of the 'PHD_SEQ_NO' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_PHD_SEQ_NO(int nIndex, Integer value) throws FMLManipulationException {
        this.fmlBuffer[24].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'PHD_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'PHD_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PHD_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'EQUIPMENT_LEVEL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'EQUIPMENT_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_EQUIPMENT_LEVEL(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[25].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'EQUIPMENT_LEVEL' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_EQUIPMENT_LEVEL(int nIndex, Integer value) throws FMLManipulationException {
        this.fmlBuffer[25].setValue(nIndex, TypeConverter.integerToShort(value));
    }

    /**
     * Retrieves number of values defined for 'EQUIPMENT_LEVEL' field in the FML buffer.
     *
     * @return Number of values defined for 'EQUIPMENT_LEVEL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EQUIPMENT_LEVEL_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'IMSI' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'IMSI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_IMSI(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Sets the value of the 'IMSI' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 16.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_IMSI(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[26].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'IMSI' field in the FML buffer.
     *
     * @return Number of values defined for 'IMSI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IMSI_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXPIRATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Sets the value of the 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_EXPIRATION_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[27].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'EXPIRATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXPIRATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXPIRATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Sets the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_EFFECTIVE_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[28].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'OWNERSHIP_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'OWNERSHIP_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OWNERSHIP_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Sets the value of the 'OWNERSHIP_CODE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 3.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_OWNERSHIP_CODE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[29].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'OWNERSHIP_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'OWNERSHIP_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OWNERSHIP_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'SW_STATE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SW_STATE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SW_STATE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[30].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'SW_STATE_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_SW_STATE_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[30].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'SW_STATE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'SW_STATE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SW_STATE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_SW_ACTV_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'LAST_SW_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_SW_ACTV_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Sets the value of the 'LAST_SW_ACTV_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 9.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_LAST_SW_ACTV_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[31].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'LAST_SW_ACTV_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_SW_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_SW_ACTV_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'NEXT_ACTV_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NEXT_ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_ACTV_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[32].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'NEXT_ACTV_CODE' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_NEXT_ACTV_CODE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[32].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'NEXT_ACTV_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'NEXT_ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEXT_ACTV_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'NEXT_ACTV_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NEXT_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_ACTV_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[33].getValue(nIndex));
    }

    /**
     * Sets the value of the 'NEXT_ACTV_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 9.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_NEXT_ACTV_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[33].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'NEXT_ACTV_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'NEXT_ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEXT_ACTV_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'NEXT_ACTV_ISSUE_DT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NEXT_ACTV_ISSUE_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NEXT_ACTV_ISSUE_DT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(nIndex));
    }

    /**
     * Sets the value of the 'NEXT_ACTV_ISSUE_DT' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 9.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_NEXT_ACTV_ISSUE_DT(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[34].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'NEXT_ACTV_ISSUE_DT' field in the FML buffer.
     *
     * @return Number of values defined for 'NEXT_ACTV_ISSUE_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NEXT_ACTV_ISSUE_DT_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'DEVICE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'DEVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEVICE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[35].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'DEVICE_TYPE' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_DEVICE_TYPE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[35].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'DEVICE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEVICE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEVICE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'ESN_MODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ESN_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ESN_MODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[36].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'ESN_MODE' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ESN_MODE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[36].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'ESN_MODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ESN_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ESN_MODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'ITEM_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ITEM_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ITEM_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[37].getValue(nIndex));
    }

    /**
     * Sets the value of the 'ITEM_ID' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 16.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ITEM_ID(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[37].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'ITEM_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ITEM_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ITEM_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'POOL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'POOL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POOL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[38].getValue(nIndex));
    }

    /**
     * Sets the value of the 'POOL' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 3.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_POOL(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[38].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'POOL' field in the FML buffer.
     *
     * @return Number of values defined for 'POOL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POOL_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'LOCATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'LOCATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LOCATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[39].getValue(nIndex));
    }

    /**
     * Sets the value of the 'LOCATION_ID' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 5.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_LOCATION_ID(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[39].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'LOCATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'LOCATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LOCATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'ACTIVITY_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ACTIVITY_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTIVITY_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[40].getValue(nIndex));
    }

    /**
     * Sets the value of the 'ACTIVITY_CODE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 5.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ACTIVITY_CODE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[40].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'ACTIVITY_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTIVITY_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTIVITY_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'ACTIVITY_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ACTIVITY_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTIVITY_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[41].getValue(nIndex));
    }

    /**
     * Sets the value of the 'ACTIVITY_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ACTIVITY_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[41].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'ACTIVITY_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTIVITY_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTIVITY_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'OPERATION_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'OPERATION_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OPERATION_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[42].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'OPERATION_STATUS' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_OPERATION_STATUS(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[42].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'OPERATION_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'OPERATION_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OPERATION_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'ITEM_OWNERSHIP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ITEM_OWNERSHIP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ITEM_OWNERSHIP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[43].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'ITEM_OWNERSHIP' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ITEM_OWNERSHIP(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[43].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'ITEM_OWNERSHIP' field in the FML buffer.
     *
     * @return Number of values defined for 'ITEM_OWNERSHIP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ITEM_OWNERSHIP_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'ITEM_OWNERSHIP_DT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ITEM_OWNERSHIP_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ITEM_OWNERSHIP_DT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[44].getValue(nIndex));
    }

    /**
     * Sets the value of the 'ITEM_OWNERSHIP_DT' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ITEM_OWNERSHIP_DT(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[44].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'ITEM_OWNERSHIP_DT' field in the FML buffer.
     *
     * @return Number of values defined for 'ITEM_OWNERSHIP_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ITEM_OWNERSHIP_DT_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'CURR_POSSESSION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CURR_POSSESSION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURR_POSSESSION(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[45].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'CURR_POSSESSION' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_CURR_POSSESSION(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[45].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'CURR_POSSESSION' field in the FML buffer.
     *
     * @return Number of values defined for 'CURR_POSSESSION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURR_POSSESSION_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'CURR_POSSESSION_DT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CURR_POSSESSION_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CURR_POSSESSION_DT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Sets the value of the 'CURR_POSSESSION_DT' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_CURR_POSSESSION_DT(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[46].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'CURR_POSSESSION_DT' field in the FML buffer.
     *
     * @return Number of values defined for 'CURR_POSSESSION_DT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CURR_POSSESSION_DT_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'MISSING_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'MISSING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MISSING_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[47].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'MISSING_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_MISSING_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[47].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'MISSING_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'MISSING_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_MISSING_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[47].getCount());
    }

    /**
     * Retrieves the value of the 'IN_REPAIR_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'IN_REPAIR_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_IN_REPAIR_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[48].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'IN_REPAIR_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_IN_REPAIR_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[48].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'IN_REPAIR_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'IN_REPAIR_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IN_REPAIR_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[48].getCount());
    }

    /**
     * Retrieves the value of the 'IN_TRANSIT_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'IN_TRANSIT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_IN_TRANSIT_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[49].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'IN_TRANSIT_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_IN_TRANSIT_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[49].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'IN_TRANSIT_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'IN_TRANSIT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_IN_TRANSIT_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[49].getCount());
    }

    /**
     * Retrieves the value of the 'COMITED_TO_POS_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'COMITED_TO_POS_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMITED_TO_POS_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[50].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'COMITED_TO_POS_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_COMITED_TO_POS_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[50].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'COMITED_TO_POS_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'COMITED_TO_POS_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMITED_TO_POS_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[50].getCount());
    }

    /**
     * Retrieves the value of the 'COMITED_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'COMITED_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_COMITED_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[51].getValue(nIndex));
    }

    /**
     * Sets the value of the 'COMITED_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_COMITED_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[51].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'COMITED_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'COMITED_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_COMITED_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[51].getCount());
    }

    /**
     * Retrieves the value of the 'ACTIVITY_REASON' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ACTIVITY_REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTIVITY_REASON(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[52].getValue(nIndex));
    }

    /**
     * Sets the value of the 'ACTIVITY_REASON' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 4.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_ACTIVITY_REASON(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[52].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'ACTIVITY_REASON' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTIVITY_REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTIVITY_REASON_size() throws FMLManipulationException {
        return (this.fmlBuffer[52].getCount());
    }

    /**
     * Retrieves the value of the 'UPGRADE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'UPGRADE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_UPGRADE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[53].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'UPGRADE_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_UPGRADE_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[53].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'UPGRADE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'UPGRADE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_UPGRADE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[53].getCount());
    }

    /**
     * Retrieves the value of the 'EXPECTED_RTRN_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'EXPECTED_RTRN_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXPECTED_RTRN_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[54].getValue(nIndex));
    }

    /**
     * Sets the value of the 'EXPECTED_RTRN_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_EXPECTED_RTRN_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[54].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'EXPECTED_RTRN_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXPECTED_RTRN_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXPECTED_RTRN_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[54].getCount());
    }

    /**
     * Retrieves the value of the 'POLICE_REPORT_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'POLICE_REPORT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POLICE_REPORT_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[55].getValue(nIndex));
    }

    /**
     * Sets the value of the 'POLICE_REPORT_NO' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 16.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_POLICE_REPORT_NO(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[55].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'POLICE_REPORT_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'POLICE_REPORT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POLICE_REPORT_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[55].getCount());
    }

    /**
     * Retrieves the value of the 'POLICE_REPORT_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'POLICE_REPORT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POLICE_REPORT_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[56].getValue(nIndex));
    }

    /**
     * Sets the value of the 'POLICE_REPORT_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_POLICE_REPORT_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[56].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'POLICE_REPORT_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'POLICE_REPORT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POLICE_REPORT_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[56].getCount());
    }

    /**
     * Retrieves the value of the 'POLICE_STATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'POLICE_STATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_POLICE_STATION(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[57].getValue(nIndex));
    }

    /**
     * Sets the value of the 'POLICE_STATION' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 31.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_POLICE_STATION(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[57].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'POLICE_STATION' field in the FML buffer.
     *
     * @return Number of values defined for 'POLICE_STATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_POLICE_STATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[57].getCount());
    }

    /**
     * Retrieves the value of the 'PUK' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'PUK' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PUK(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[58].getValue(nIndex));
    }

    /**
     * Sets the value of the 'PUK' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_PUK(int nIndex, Integer value) throws FMLManipulationException {
        this.fmlBuffer[58].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'PUK' field in the FML buffer.
     *
     * @return Number of values defined for 'PUK' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PUK_size() throws FMLManipulationException {
        return (this.fmlBuffer[58].getCount());
    }

    /**
     * Retrieves the value of the 'PUK2' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'PUK2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PUK2(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[59].getValue(nIndex));
    }

    /**
     * Sets the value of the 'PUK2' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_PUK2(int nIndex, Integer value) throws FMLManipulationException {
        this.fmlBuffer[59].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'PUK2' field in the FML buffer.
     *
     * @return Number of values defined for 'PUK2' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PUK2_size() throws FMLManipulationException {
        return (this.fmlBuffer[59].getCount());
    }

    /**
     * Retrieves the value of the 'FIRST_USED_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'FIRST_USED_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FIRST_USED_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[60].getValue(nIndex));
    }

    /**
     * Sets the value of the 'FIRST_USED_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_FIRST_USED_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[60].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'FIRST_USED_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'FIRST_USED_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FIRST_USED_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[60].getCount());
    }

    /**
     * Retrieves the value of the 'SIM_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SIM_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SIM_STATUS(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[61].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'SIM_STATUS' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_SIM_STATUS(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[61].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'SIM_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'SIM_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SIM_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[61].getCount());
    }

    /**
     * Retrieves the value of the 'SUSPEND_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SUSPEND_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUSPEND_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[62].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'SUSPEND_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_SUSPEND_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[62].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'SUSPEND_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'SUSPEND_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUSPEND_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[62].getCount());
    }

    /**
     * Retrieves the value of the 'SUSPEND_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SUSPEND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUSPEND_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[63].getValue(nIndex));
    }

    /**
     * Sets the value of the 'SUSPEND_DATE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 15.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_SUSPEND_DATE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[63].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'SUSPEND_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SUSPEND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUSPEND_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[63].getCount());
    }

    /**
     * Retrieves the value of the 'SENT_TO_AUC_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SENT_TO_AUC_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SENT_TO_AUC_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[64].getValue(nIndex)));
    }

    /**
     * Sets the value of the 'SENT_TO_AUC_IND' field in the FML buffer.
     *
     * @param value Default value: null.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_SENT_TO_AUC_IND(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[64].setValue(nIndex, TypeConverter.stringToByte(value));
    }

    /**
     * Retrieves number of values defined for 'SENT_TO_AUC_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'SENT_TO_AUC_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SENT_TO_AUC_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[64].getCount());
    }

    /**
     * Retrieves the value of the 'HLR_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'HLR_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_HLR_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[65].getValue(nIndex));
    }

    /**
     * Sets the value of the 'HLR_CD' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 4.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_HLR_CD(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[65].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'HLR_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'HLR_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_HLR_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[65].getCount());
    }

    /**
     * Retrieves the value of the 'K4ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'K4ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_K4ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[66].getValue(nIndex));
    }

    /**
     * Sets the value of the 'K4ID' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 41.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_K4ID(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[66].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'K4ID' field in the FML buffer.
     *
     * @return Number of values defined for 'K4ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_K4ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[66].getCount());
    }

    /**
     * Retrieves the value of the 'DEALER_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'DEALER_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEALER_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[67].getValue(nIndex));
    }

    /**
     * Sets the value of the 'DEALER_CODE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 6.
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @throws FMLManipulationException
     */
    public void set_DEALER_CODE(int nIndex, String value) throws FMLManipulationException {
        this.fmlBuffer[67].setValue(nIndex, value);
    }

    /**
     * Retrieves number of values defined for 'DEALER_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEALER_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEALER_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[67].getCount());
    }

    /**
     * Retrieves the value of the 'RSNCODE' field in the FML buffer.
     *
     * @return Value of 'RSNCODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RSNCODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[68].getValue(0));
    }

    /**
     * Sets the value of the 'RSNCODE' field in the FML buffer.
     *
     * @param value Default value: null, Maximum length: 5.
     * @throws FMLManipulationException
     */
    public void set_RSNCODE(String value) throws FMLManipulationException {
        this.fmlBuffer[68].setValue(0, value);
    }

    public void populateCsApiBan(CsApiBanInput csApiBanInput) throws FMLManipulationException {

        // Special mapping (ie copy between not same-named fields) from this buffer to CsApiBan input.
        // TODO: How do we know which fields to map to which others?
        if (csApiBanInput.get_PCTNAGRPRMRECBAN() == null) {
            csApiBanInput.set_PCTNAGRPRMRECBAN(this.get_BAN());
        }
        if (csApiBanInput.get_PCTNAGRPRMRECCUSTOMER_ID() == null) {
            csApiBanInput.set_PCTNAGRPRMRECCUSTOMER_ID(this.get_CUSTOMER_ID());
        }
        if (csApiBanInput.get_PESNBUFROWCOUNT() == null) {
            csApiBanInput.set_PESNBUFROWCOUNT(this.get_ROWCOUNT());
        }
        for (int i = 0; i < this.get_EXPIRATION_DATE_size(); i++) {
            csApiBanInput.set_PHYDEVARRAYEXPIRATION_DATE(i, this.get_EXPIRATION_DATE(i));
        }
        for (int i = 0; i < this.get_EFFECTIVE_DATE_size(); i++) {
            csApiBanInput.set_PHYDEVARRAYEFFECTIVE_DATE(i, this.get_EFFECTIVE_DATE(i));
        }
        for (int i = 0; i < this.get_DEALER_CODE_size(); i++) {
            csApiBanInput.set_PHYDEVARRAYDEALER_CODE(i, this.get_DEALER_CODE(i));
        }

        // General mapping (ie copy between same-named fields) from this buffer to CsApiBan input.
        ServiceParameter.copyFmlBuffer(this, csApiBanInput, fieldsNotToBeDirectlyCopied);
    }
}