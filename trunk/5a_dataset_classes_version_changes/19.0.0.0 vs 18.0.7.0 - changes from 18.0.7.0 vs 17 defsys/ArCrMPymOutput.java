package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class ArCrMPymOutput extends ServiceOutput {

    /**
     * Creates a new instance of ArCrMPymOutput.
     *
     * @throws FMLManipulationException
     */
    public ArCrMPymOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public ArCrMPymOutput() {
    }

    /**
     * Creates a new instance of ArCrMPymOutput.
     *
     * @param ds Output dataset from ArCrMPym service.
     * @throws FMLManipulationException
     */
    public ArCrMPymOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        if ("19.0.0.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[63];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("FIRST_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("SECOND_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 3, 1);
            this.fmlBuffer[4] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 4, 1);
            this.fmlBuffer[5] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 5, 1);
            this.fmlBuffer[6] = new FmlField("TRANSACTION_MODE", FmlField.TYPE_BYTE, -1, null, 6, 1);
            this.fmlBuffer[7] = new FmlField("RUN_DATE", FmlField.TYPE_STRING, 9, null, 7, 1);
            this.fmlBuffer[8] = new FmlField("MARKET_CODE", FmlField.TYPE_STRING, 4, null, 8, 1);
            this.fmlBuffer[9] = new FmlField("SVC_STATUS", FmlField.TYPE_BYTE, -1, null, 9, 1);
            this.fmlBuffer[10] = new FmlField("LAST_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 10, 1);
            this.fmlBuffer[11] = new FmlField("LAST_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 11, 1);
            this.fmlBuffer[12] = new FmlField("ENV_CODE", FmlField.TYPE_STRING, 11, null, 12, 1);
            this.fmlBuffer[13] = new FmlField("SESSION_ID", FmlField.TYPE_INTEGER, -1, null, 13, 1);
            this.fmlBuffer[14] = new FmlField("ONLINE_TRX_NO", FmlField.TYPE_INTEGER, -1, null, 14, 1);
            this.fmlBuffer[15] = new FmlField("GROUP_TRX_ID", FmlField.TYPE_INTEGER, -1, null, 15, 1);
            this.fmlBuffer[16] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 16, 1);
            this.fmlBuffer[17] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 17, 2000);
            this.fmlBuffer[18] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 18, 2000);
            this.fmlBuffer[19] = new FmlField("PYM_INFOROWID", FmlField.TYPE_STRING, 19, null, 19, 2000);
            this.fmlBuffer[20] = new FmlField("DEPOSIT_DATE", FmlField.TYPE_STRING, 9, null, 20, 2000);
            this.fmlBuffer[21] = new FmlField("DEPOSIT_BANK_CODE", FmlField.TYPE_STRING, 11, null, 21, 2000);
            this.fmlBuffer[22] = new FmlField("DEPOSIT_BNK_BRANCH_CD", FmlField.TYPE_STRING, 11, null, 22, 2000);
            this.fmlBuffer[23] = new FmlField("DD_CONTRACT_NO", FmlField.TYPE_STRING, 10, null, 23, 2000);
            this.fmlBuffer[24] = new FmlField("PYM_METHOD", FmlField.TYPE_STRING, 3, null, 24, 2000);
            this.fmlBuffer[25] = new FmlField("PYM_SUB_METHOD", FmlField.TYPE_STRING, 3, null, 25, 2000);
            this.fmlBuffer[26] = new FmlField("BANK_CODE", FmlField.TYPE_STRING, 11, null, 26, 2000);
            this.fmlBuffer[27] = new FmlField("BANK_BRANCH_CODE", FmlField.TYPE_STRING, 11, null, 27, 2000);
            this.fmlBuffer[28] = new FmlField("BANK_ACCOUNT_NO", FmlField.TYPE_STRING, 21, null, 28, 2000);
            this.fmlBuffer[29] = new FmlField("CHECK_NO", FmlField.TYPE_STRING, 16, null, 29, 2000);
            this.fmlBuffer[30] = new FmlField("CR_CARD_NO", FmlField.TYPE_STRING, 21, null, 30, 2000);
            this.fmlBuffer[31] = new FmlField("DIRCT_DBT_VOUCHER", FmlField.TYPE_INTEGER, -1, null, 31, 2000);
            this.fmlBuffer[32] = new FmlField("ORIGINAL_AMT", FmlField.TYPE_DOUBLE, -1, null, 32, 2000);
            this.fmlBuffer[33] = new FmlField("ORIGINAL_BAN", FmlField.TYPE_INTEGER, -1, null, 33, 2000);
            this.fmlBuffer[34] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 34, 2000);
            this.fmlBuffer[35] = new FmlField("AMT_DUE", FmlField.TYPE_DOUBLE, -1, null, 35, 2000);
            this.fmlBuffer[36] = new FmlField("SOURCE_TYPE", FmlField.TYPE_BYTE, -1, null, 36, 2000);
            this.fmlBuffer[37] = new FmlField("SOURCE_ID", FmlField.TYPE_STRING, 9, null, 37, 2000);
            this.fmlBuffer[38] = new FmlField("FILE_SEQ_NO", FmlField.TYPE_DOUBLE, -1, null, 38, 2000);
            this.fmlBuffer[39] = new FmlField("BATCH_NO", FmlField.TYPE_INTEGER, -1, null, 39, 2000);
            this.fmlBuffer[40] = new FmlField("BATCH_LINE_NO", FmlField.TYPE_INTEGER, -1, null, 40, 2000);
            this.fmlBuffer[41] = new FmlField("DEALER_COMP_CODE", FmlField.TYPE_STRING, 6, null, 41, 2000);
            this.fmlBuffer[42] = new FmlField("PYM_REFERENCE1", FmlField.TYPE_STRING, 11, null, 42, 2000);
            this.fmlBuffer[43] = new FmlField("RECEIPT_ID", FmlField.TYPE_INTEGER, -1, null, 43, 2000);
            this.fmlBuffer[44] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 44, 2000);
            this.fmlBuffer[45] = new FmlField("RMS_REF_STORE_ID", FmlField.TYPE_STRING, 5, null, 45, 2000);
            this.fmlBuffer[46] = new FmlField("RMS_REF_ID", FmlField.TYPE_INTEGER, -1, null, 46, 2000);
            this.fmlBuffer[47] = new FmlField("RMS_REF_ACTV_TYPE", FmlField.TYPE_BYTE, -1, null, 47, 2000);
            this.fmlBuffer[48] = new FmlField("DESIGNATION", FmlField.TYPE_BYTE, -1, null, 48, 2000);
            this.fmlBuffer[49] = new FmlField("CR_CARD_EXP_DATE", FmlField.TYPE_STRING, 9, null, 49, 2000);
            this.fmlBuffer[50] = new FmlField("CUSTOMER_PYM_DATE", FmlField.TYPE_STRING, 9, null, 50, 2000);
            this.fmlBuffer[51] = new FmlField("DESIGNATED_INV", FmlField.TYPE_STRING, 14, null, 51, 2000);
            this.fmlBuffer[52] = new FmlField("PYM_ACT_INFOROWID", FmlField.TYPE_STRING, 19, null, 52, 2000);
            this.fmlBuffer[53] = new FmlField("CR_CARD_AUTH_CODE", FmlField.TYPE_STRING, 21, null, 53, 2000);
            this.fmlBuffer[54] = new FmlField("CR_CARD_AUTH_TYPE", FmlField.TYPE_BYTE, -1, null, 54, 2000);
            this.fmlBuffer[55] = new FmlField("CR_CARD_REF_NO", FmlField.TYPE_INTEGER, -1, null, 55, 2000);
            this.fmlBuffer[56] = new FmlField("VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 56, 2000);
            this.fmlBuffer[57] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 57, 2000);
            this.fmlBuffer[58] = new FmlField("PYM_AMT", FmlField.TYPE_DOUBLE, -1, null, 58, 2000);
            this.fmlBuffer[59] = new FmlField("PYM_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 59, 2000);
            this.fmlBuffer[60] = new FmlField("PREPAYMENT_IND", FmlField.TYPE_BYTE, -1, null, 60, 2000);
            this.fmlBuffer[61] = new FmlField("OUTPUT_VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 61, 1);
            this.fmlBuffer[62] = new FmlField("PAYMENT_MODE", FmlField.TYPE_BYTE, -1, null, 62, 1);
        } else if ("18.0.7.0".equals(this.getNinjaVersion())) {
            this.fmlBuffer = new FmlField[63];
            this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
            this.fmlBuffer[1] = new FmlField("DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 1, 1);
            this.fmlBuffer[2] = new FmlField("FIRST_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 2, 1);
            this.fmlBuffer[3] = new FmlField("SECOND_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 3, 1);
            this.fmlBuffer[4] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 4, 1);
            this.fmlBuffer[5] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 5, 1);
            this.fmlBuffer[6] = new FmlField("TRANSACTION_MODE", FmlField.TYPE_BYTE, -1, null, 6, 1);
            this.fmlBuffer[7] = new FmlField("RUN_DATE", FmlField.TYPE_STRING, 9, null, 7, 1);
            this.fmlBuffer[8] = new FmlField("MARKET_CODE", FmlField.TYPE_STRING, 4, null, 8, 1);
            this.fmlBuffer[9] = new FmlField("SVC_STATUS", FmlField.TYPE_BYTE, -1, null, 9, 1);
            this.fmlBuffer[10] = new FmlField("LAST_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 10, 1);
            this.fmlBuffer[11] = new FmlField("LAST_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 11, 1);
            this.fmlBuffer[12] = new FmlField("ENV_CODE", FmlField.TYPE_STRING, 11, null, 12, 1);
            this.fmlBuffer[13] = new FmlField("SESSION_ID", FmlField.TYPE_INTEGER, -1, null, 13, 1);
            this.fmlBuffer[14] = new FmlField("ONLINE_TRX_NO", FmlField.TYPE_INTEGER, -1, null, 14, 1);
            this.fmlBuffer[15] = new FmlField("GROUP_TRX_ID", FmlField.TYPE_INTEGER, -1, null, 15, 1);
            this.fmlBuffer[16] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 16, 1);
            this.fmlBuffer[17] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 17, 300);
            this.fmlBuffer[18] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 18, 300);
            this.fmlBuffer[19] = new FmlField("PYM_INFOROWID", FmlField.TYPE_STRING, 19, null, 19, 300);
            this.fmlBuffer[20] = new FmlField("DEPOSIT_DATE", FmlField.TYPE_STRING, 9, null, 20, 300);
            this.fmlBuffer[21] = new FmlField("DEPOSIT_BANK_CODE", FmlField.TYPE_STRING, 11, null, 21, 300);
            this.fmlBuffer[22] = new FmlField("DEPOSIT_BNK_BRANCH_CD", FmlField.TYPE_STRING, 11, null, 22, 300);
            this.fmlBuffer[23] = new FmlField("DD_CONTRACT_NO", FmlField.TYPE_STRING, 10, null, 23, 300);
            this.fmlBuffer[24] = new FmlField("PYM_METHOD", FmlField.TYPE_STRING, 3, null, 24, 300);
            this.fmlBuffer[25] = new FmlField("PYM_SUB_METHOD", FmlField.TYPE_STRING, 3, null, 25, 300);
            this.fmlBuffer[26] = new FmlField("BANK_CODE", FmlField.TYPE_STRING, 11, null, 26, 300);
            this.fmlBuffer[27] = new FmlField("BANK_BRANCH_CODE", FmlField.TYPE_STRING, 11, null, 27, 300);
            this.fmlBuffer[28] = new FmlField("BANK_ACCOUNT_NO", FmlField.TYPE_STRING, 21, null, 28, 300);
            this.fmlBuffer[29] = new FmlField("CHECK_NO", FmlField.TYPE_STRING, 16, null, 29, 300);
            this.fmlBuffer[30] = new FmlField("CR_CARD_NO", FmlField.TYPE_STRING, 21, null, 30, 300);
            this.fmlBuffer[31] = new FmlField("DIRCT_DBT_VOUCHER", FmlField.TYPE_INTEGER, -1, null, 31, 300);
            this.fmlBuffer[32] = new FmlField("ORIGINAL_AMT", FmlField.TYPE_DOUBLE, -1, null, 32, 300);
            this.fmlBuffer[33] = new FmlField("ORIGINAL_BAN", FmlField.TYPE_INTEGER, -1, null, 33, 300);
            this.fmlBuffer[34] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 34, 300);
            this.fmlBuffer[35] = new FmlField("AMT_DUE", FmlField.TYPE_DOUBLE, -1, null, 35, 300);
            this.fmlBuffer[36] = new FmlField("SOURCE_TYPE", FmlField.TYPE_BYTE, -1, null, 36, 300);
            this.fmlBuffer[37] = new FmlField("SOURCE_ID", FmlField.TYPE_STRING, 9, null, 37, 300);
            this.fmlBuffer[38] = new FmlField("FILE_SEQ_NO", FmlField.TYPE_DOUBLE, -1, null, 38, 300);
            this.fmlBuffer[39] = new FmlField("BATCH_NO", FmlField.TYPE_INTEGER, -1, null, 39, 300);
            this.fmlBuffer[40] = new FmlField("BATCH_LINE_NO", FmlField.TYPE_INTEGER, -1, null, 40, 300);
            this.fmlBuffer[41] = new FmlField("DEALER_COMP_CODE", FmlField.TYPE_STRING, 6, null, 41, 300);
            this.fmlBuffer[42] = new FmlField("PYM_REFERENCE1", FmlField.TYPE_STRING, 11, null, 42, 300);
            this.fmlBuffer[43] = new FmlField("RECEIPT_ID", FmlField.TYPE_INTEGER, -1, null, 43, 300);
            this.fmlBuffer[44] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 44, 300);
            this.fmlBuffer[45] = new FmlField("RMS_REF_STORE_ID", FmlField.TYPE_STRING, 5, null, 45, 300);
            this.fmlBuffer[46] = new FmlField("RMS_REF_ID", FmlField.TYPE_INTEGER, -1, null, 46, 300);
            this.fmlBuffer[47] = new FmlField("RMS_REF_ACTV_TYPE", FmlField.TYPE_BYTE, -1, null, 47, 300);
            this.fmlBuffer[48] = new FmlField("DESIGNATION", FmlField.TYPE_BYTE, -1, null, 48, 300);
            this.fmlBuffer[49] = new FmlField("CR_CARD_EXP_DATE", FmlField.TYPE_STRING, 9, null, 49, 300);
            this.fmlBuffer[50] = new FmlField("CUSTOMER_PYM_DATE", FmlField.TYPE_STRING, 9, null, 50, 300);
            this.fmlBuffer[51] = new FmlField("DESIGNATED_INV", FmlField.TYPE_STRING, 14, null, 51, 300);
            this.fmlBuffer[52] = new FmlField("PYM_ACT_INFOROWID", FmlField.TYPE_STRING, 19, null, 52, 300);
            this.fmlBuffer[53] = new FmlField("CR_CARD_AUTH_CODE", FmlField.TYPE_STRING, 21, null, 53, 300);
            this.fmlBuffer[54] = new FmlField("CR_CARD_AUTH_TYPE", FmlField.TYPE_BYTE, -1, null, 54, 300);
            this.fmlBuffer[55] = new FmlField("CR_CARD_REF_NO", FmlField.TYPE_INTEGER, -1, null, 55, 300);
            this.fmlBuffer[56] = new FmlField("VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 56, 300);
            this.fmlBuffer[57] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 57, 300);
            this.fmlBuffer[58] = new FmlField("PYM_AMT", FmlField.TYPE_DOUBLE, -1, null, 58, 300);
            this.fmlBuffer[59] = new FmlField("PYM_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 59, 300);
            this.fmlBuffer[60] = new FmlField("PREPAYMENT_IND", FmlField.TYPE_BYTE, -1, null, 60, 300);
            this.fmlBuffer[61] = new FmlField("OUTPUT_VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 61, 1);
            this.fmlBuffer[62] = new FmlField("PAYMENT_MODE", FmlField.TYPE_BYTE, -1, null, 62, 1);
        } else {
            throw new FMLManipulationException("Current version (" + this.getNinjaVersion() + ") not supported by ArCrMPymOutput class");
        }
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'FIRST_DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'FIRST_DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FIRST_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'SECOND_DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'SECOND_DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SECOND_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(0));
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(0));
    }

    /**
     * Retrieves the value of the 'TRANSACTION_MODE' field in the FML buffer.
     *
     * @return Value of 'TRANSACTION_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRANSACTION_MODE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[6].getValue(0)));
    }

    /**
     * Retrieves the value of the 'RUN_DATE' field in the FML buffer.
     *
     * @return Value of 'RUN_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RUN_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(0));
    }

    /**
     * Retrieves the value of the 'MARKET_CODE' field in the FML buffer.
     *
     * @return Value of 'MARKET_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MARKET_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(0));
    }

    /**
     * Retrieves the value of the 'SVC_STATUS' field in the FML buffer.
     *
     * @return Value of 'SVC_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SVC_STATUS() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[9].getValue(0)));
    }

    /**
     * Retrieves the value of the 'LAST_UPDATE_DATE' field in the FML buffer.
     *
     * @return Value of 'LAST_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_UPDATE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(0));
    }

    /**
     * Retrieves the value of the 'LAST_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Value of 'LAST_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_UPDATE_STAMP() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[11].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ENV_CODE' field in the FML buffer.
     *
     * @return Value of 'ENV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ENV_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(0));
    }

    /**
     * Retrieves the value of the 'SESSION_ID' field in the FML buffer.
     *
     * @return Value of 'SESSION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SESSION_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[13].getValue(0));
    }

    /**
     * Retrieves the value of the 'ONLINE_TRX_NO' field in the FML buffer.
     *
     * @return Value of 'ONLINE_TRX_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ONLINE_TRX_NO() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[14].getValue(0));
    }

    /**
     * Retrieves the value of the 'GROUP_TRX_ID' field in the FML buffer.
     *
     * @return Value of 'GROUP_TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GROUP_TRX_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[15].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[16].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_INFOROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_INFOROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_INFOROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_INFOROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_INFOROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_INFOROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DEPOSIT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEPOSIT_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT_BANK_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DEPOSIT_BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEPOSIT_BANK_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT_BANK_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT_BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_BANK_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'DEPOSIT_BNK_BRANCH_CD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DEPOSIT_BNK_BRANCH_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEPOSIT_BNK_BRANCH_CD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEPOSIT_BNK_BRANCH_CD' field in the FML buffer.
     *
     * @return Number of values defined for 'DEPOSIT_BNK_BRANCH_CD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEPOSIT_BNK_BRANCH_CD_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'DD_CONTRACT_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DD_CONTRACT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DD_CONTRACT_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DD_CONTRACT_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'DD_CONTRACT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DD_CONTRACT_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_METHOD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_METHOD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_METHOD' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_METHOD_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_SUB_METHOD' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_SUB_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_SUB_METHOD(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_SUB_METHOD' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_SUB_METHOD' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_SUB_METHOD_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'BANK_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BANK_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BANK_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BANK_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BANK_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'BANK_BRANCH_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BANK_BRANCH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BANK_BRANCH_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BANK_BRANCH_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'BANK_BRANCH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BANK_BRANCH_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'BANK_ACCOUNT_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BANK_ACCOUNT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BANK_ACCOUNT_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BANK_ACCOUNT_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BANK_ACCOUNT_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BANK_ACCOUNT_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'CHECK_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CHECK_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CHECK_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHECK_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CHECK_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHECK_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CR_CARD_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'DIRCT_DBT_VOUCHER' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DIRCT_DBT_VOUCHER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DIRCT_DBT_VOUCHER(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[31].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DIRCT_DBT_VOUCHER' field in the FML buffer.
     *
     * @return Number of values defined for 'DIRCT_DBT_VOUCHER' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DIRCT_DBT_VOUCHER_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'ORIGINAL_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'ORIGINAL_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ORIGINAL_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORIGINAL_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'ORIGINAL_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORIGINAL_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'ORIGINAL_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'ORIGINAL_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ORIGINAL_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[33].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ORIGINAL_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'ORIGINAL_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ORIGINAL_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[34].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'AMT_DUE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'AMT_DUE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_AMT_DUE(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'AMT_DUE' field in the FML buffer.
     *
     * @return Number of values defined for 'AMT_DUE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_AMT_DUE_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'SOURCE_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'SOURCE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOURCE_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[36].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SOURCE_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'SOURCE_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOURCE_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'SOURCE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'SOURCE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOURCE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[37].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOURCE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'SOURCE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOURCE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'FILE_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'FILE_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_FILE_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[38].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FILE_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'FILE_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FILE_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'BATCH_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BATCH_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BATCH_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[39].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BATCH_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BATCH_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BATCH_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'BATCH_LINE_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BATCH_LINE_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BATCH_LINE_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[40].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BATCH_LINE_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'BATCH_LINE_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BATCH_LINE_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'DEALER_COMP_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DEALER_COMP_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DEALER_COMP_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[41].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DEALER_COMP_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DEALER_COMP_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DEALER_COMP_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_REFERENCE1' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_REFERENCE1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_REFERENCE1(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[42].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_REFERENCE1' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_REFERENCE1' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_REFERENCE1_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'RECEIPT_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'RECEIPT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_RECEIPT_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[43].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RECEIPT_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RECEIPT_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RECEIPT_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'CONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[44].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_REF_STORE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'RMS_REF_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_REF_STORE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RMS_REF_STORE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_REF_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_REF_STORE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_REF_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'RMS_REF_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_RMS_REF_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RMS_REF_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_REF_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_REF_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_REF_ACTV_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'RMS_REF_ACTV_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_REF_ACTV_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[47].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'RMS_REF_ACTV_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_REF_ACTV_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_REF_ACTV_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[47].getCount());
    }

    /**
     * Retrieves the value of the 'DESIGNATION' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DESIGNATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DESIGNATION(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[48].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DESIGNATION' field in the FML buffer.
     *
     * @return Number of values defined for 'DESIGNATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DESIGNATION_size() throws FMLManipulationException {
        return (this.fmlBuffer[48].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_EXP_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CR_CARD_EXP_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_EXP_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[49].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_EXP_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_EXP_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_EXP_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[49].getCount());
    }

    /**
     * Retrieves the value of the 'CUSTOMER_PYM_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CUSTOMER_PYM_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CUSTOMER_PYM_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[50].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CUSTOMER_PYM_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CUSTOMER_PYM_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CUSTOMER_PYM_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[50].getCount());
    }

    /**
     * Retrieves the value of the 'DESIGNATED_INV' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'DESIGNATED_INV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DESIGNATED_INV(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[51].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DESIGNATED_INV' field in the FML buffer.
     *
     * @return Number of values defined for 'DESIGNATED_INV' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DESIGNATED_INV_size() throws FMLManipulationException {
        return (this.fmlBuffer[51].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_ACT_INFOROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_ACT_INFOROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PYM_ACT_INFOROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[52].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_ACT_INFOROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_ACT_INFOROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_ACT_INFOROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[52].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_AUTH_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CR_CARD_AUTH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_AUTH_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[53].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_AUTH_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_AUTH_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_AUTH_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[53].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_AUTH_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CR_CARD_AUTH_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CR_CARD_AUTH_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[54].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_AUTH_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_AUTH_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_AUTH_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[54].getCount());
    }

    /**
     * Retrieves the value of the 'CR_CARD_REF_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'CR_CARD_REF_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CR_CARD_REF_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[55].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CR_CARD_REF_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CR_CARD_REF_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CR_CARD_REF_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[55].getCount());
    }

    /**
     * Retrieves the value of the 'VOUCHER_NUM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_VOUCHER_NUM(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[56].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'VOUCHER_NUM' field in the FML buffer.
     *
     * @return Number of values defined for 'VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_VOUCHER_NUM_size() throws FMLManipulationException {
        return (this.fmlBuffer[56].getCount());
    }

    /**
     * Retrieves the value of the 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BL_IGNORE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[57].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BL_IGNORE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[57].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_PYM_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[58].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[58].getCount());
    }

    /**
     * Retrieves the value of the 'PYM_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PYM_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_PYM_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[59].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PYM_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'PYM_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PYM_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[59].getCount());
    }

    /**
     * Retrieves the value of the 'PREPAYMENT_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 2000).
     * @return Value of 'PREPAYMENT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PREPAYMENT_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[60].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'PREPAYMENT_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'PREPAYMENT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PREPAYMENT_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[60].getCount());
    }

    /**
     * Retrieves the value of the 'OUTPUT_VOUCHER_NUM' field in the FML buffer.
     *
     * @return Value of 'OUTPUT_VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OUTPUT_VOUCHER_NUM() throws FMLManipulationException {
        return ((String) this.fmlBuffer[61].getValue(0));
    }

    /**
     * Retrieves the value of the 'PAYMENT_MODE' field in the FML buffer.
     *
     * @return Value of 'PAYMENT_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PAYMENT_MODE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[62].getValue(0)));
    }
}