package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class ArPymActLsOutput extends ServiceOutput {

    /**
     * Creates a new instance of ArPymActLsOutput.
     *
     * @throws FMLManipulationException
     */
    public ArPymActLsOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public ArPymActLsOutput() {
    }

    /**
     * Creates a new instance of ArPymActLsOutput.
     *
     * @param ds Output dataset from ArPymActLs service.
     * @throws FMLManipulationException
     */
    public ArPymActLsOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[33];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 3, 600);
        this.fmlBuffer[4] = new FmlField("BAN", FmlField.TYPE_INTEGER, -1, null, 4, 600);
        this.fmlBuffer[5] = new FmlField("ENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 5, 600);
        this.fmlBuffer[6] = new FmlField("ACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 6, 600);
        this.fmlBuffer[7] = new FmlField("ACTV_CODE", FmlField.TYPE_STRING, 5, null, 7, 600);
        this.fmlBuffer[8] = new FmlField("ACTV_REASON_CODE", FmlField.TYPE_STRING, 7, null, 8, 600);
        this.fmlBuffer[9] = new FmlField("ACTV_DATE", FmlField.TYPE_STRING, 9, null, 9, 600);
        this.fmlBuffer[10] = new FmlField("ACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 10, 600);
        this.fmlBuffer[11] = new FmlField("ACTV_BILL_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 11, 600);
        this.fmlBuffer[12] = new FmlField("DCK_CHG_GROUP_ID", FmlField.TYPE_INTEGER, -1, null, 12, 600);
        this.fmlBuffer[13] = new FmlField("FNT_BAN", FmlField.TYPE_INTEGER, -1, null, 13, 600);
        this.fmlBuffer[14] = new FmlField("EXCEPTION_RSN_CODE", FmlField.TYPE_STRING, 5, null, 14, 600);
        this.fmlBuffer[15] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 15, 600);
        this.fmlBuffer[16] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 16, 600);
        this.fmlBuffer[17] = new FmlField("VOUCHER_NUM", FmlField.TYPE_STRING, 14, null, 17, 600);
        this.fmlBuffer[18] = new FmlField("USER_ID", FmlField.TYPE_INTEGER, -1, null, 18, 600);
        this.fmlBuffer[19] = new FmlField("METHOD_SHORT_DESC", FmlField.TYPE_STRING, 9, null, 19, 600);
        this.fmlBuffer[20] = new FmlField("METHOD_DESC", FmlField.TYPE_STRING, 31, null, 20, 600);
        this.fmlBuffer[21] = new FmlField("BCK_SHORT_DSC", FmlField.TYPE_STRING, 9, null, 21, 600);
        this.fmlBuffer[22] = new FmlField("BCK_DSC", FmlField.TYPE_STRING, 31, null, 22, 600);
        this.fmlBuffer[23] = new FmlField("REFUND_SHORT_DESC", FmlField.TYPE_STRING, 9, null, 23, 600);
        this.fmlBuffer[24] = new FmlField("REFUND_DESC", FmlField.TYPE_STRING, 31, null, 24, 600);
        this.fmlBuffer[25] = new FmlField("EXC_SHORT_DESC", FmlField.TYPE_STRING, 9, null, 25, 600);
        this.fmlBuffer[26] = new FmlField("EXC_DESC", FmlField.TYPE_STRING, 31, null, 26, 600);
        this.fmlBuffer[27] = new FmlField("BILL_DATE", FmlField.TYPE_STRING, 9, null, 27, 600);
        this.fmlBuffer[28] = new FmlField("DCI_ERROR_CODE", FmlField.TYPE_INTEGER, -1, null, 28, 1);
        this.fmlBuffer[29] = new FmlField("DCI_ERROR_TYPE", FmlField.TYPE_SHORT, -1, null, 29, 1);
        this.fmlBuffer[30] = new FmlField("DCI_ERROR_TEXT", FmlField.TYPE_STRING, 81, null, 30, 1);
        this.fmlBuffer[31] = new FmlField("DCI_ROW_COUNT", FmlField.TYPE_INTEGER, -1, null, 31, 1);
        this.fmlBuffer[32] = new FmlField("DCI_MORE_ROWS", FmlField.TYPE_SHORT, -1, null, 32, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[1].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ENT_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ENT_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[6].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_REASON_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_REASON_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_REASON_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_REASON_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_REASON_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ACTV_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ACTV_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[10].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_BILL_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'ACTV_BILL_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_BILL_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[11].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_BILL_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_BILL_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_BILL_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'DCK_CHG_GROUP_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'DCK_CHG_GROUP_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCK_CHG_GROUP_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DCK_CHG_GROUP_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'DCK_CHG_GROUP_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DCK_CHG_GROUP_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'FNT_BAN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'FNT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FNT_BAN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FNT_BAN' field in the FML buffer.
     *
     * @return Number of values defined for 'FNT_BAN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FNT_BAN_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'EXCEPTION_RSN_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXCEPTION_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXCEPTION_RSN_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXCEPTION_RSN_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'EXCEPTION_RSN_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXCEPTION_RSN_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'CONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[15].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BL_IGNORE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[16].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BL_IGNORE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'VOUCHER_NUM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_VOUCHER_NUM(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'VOUCHER_NUM' field in the FML buffer.
     *
     * @return Number of values defined for 'VOUCHER_NUM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_VOUCHER_NUM_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'USER_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'USER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_USER_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[18].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'METHOD_SHORT_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'METHOD_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_METHOD_SHORT_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'METHOD_SHORT_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'METHOD_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_METHOD_SHORT_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'METHOD_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'METHOD_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_METHOD_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'METHOD_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'METHOD_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_METHOD_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'BCK_SHORT_DSC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BCK_SHORT_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BCK_SHORT_DSC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BCK_SHORT_DSC' field in the FML buffer.
     *
     * @return Number of values defined for 'BCK_SHORT_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BCK_SHORT_DSC_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'BCK_DSC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BCK_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BCK_DSC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BCK_DSC' field in the FML buffer.
     *
     * @return Number of values defined for 'BCK_DSC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BCK_DSC_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'REFUND_SHORT_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'REFUND_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REFUND_SHORT_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REFUND_SHORT_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'REFUND_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REFUND_SHORT_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'REFUND_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'REFUND_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REFUND_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REFUND_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'REFUND_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REFUND_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'EXC_SHORT_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXC_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXC_SHORT_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXC_SHORT_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'EXC_SHORT_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXC_SHORT_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'EXC_DESC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'EXC_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EXC_DESC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EXC_DESC' field in the FML buffer.
     *
     * @return Number of values defined for 'EXC_DESC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EXC_DESC_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'BILL_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 600).
     * @return Value of 'BILL_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILL_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BILL_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'BILL_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILL_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_CODE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_CODE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[28].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TYPE' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ERROR_TYPE() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[29].getValue(0)));
    }

    /**
     * Retrieves the value of the 'DCI_ERROR_TEXT' field in the FML buffer.
     *
     * @return Value of 'DCI_ERROR_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DCI_ERROR_TEXT() throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_ROW_COUNT' field in the FML buffer.
     *
     * @return Value of 'DCI_ROW_COUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_ROW_COUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[31].getValue(0));
    }

    /**
     * Retrieves the value of the 'DCI_MORE_ROWS' field in the FML buffer.
     *
     * @return Value of 'DCI_MORE_ROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DCI_MORE_ROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[32].getValue(0)));
    }
}