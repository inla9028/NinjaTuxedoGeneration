package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class ArAdjCrgOutput extends ServiceOutput {

    /**
     * Creates a new instance of ArAdjCrgOutput.
     *
     * @throws FMLManipulationException
     */
    public ArAdjCrgOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public ArAdjCrgOutput() {
    }

    /**
     * Creates a new instance of ArAdjCrgOutput.
     *
     * @param ds Output dataset from ArAdjCrg service.
     * @throws FMLManipulationException
     */
    public ArAdjCrgOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[48];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("FIRST_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("SECOND_DIRECTIVE", FmlField.TYPE_INTEGER, -1, null, 3, 1);
        this.fmlBuffer[4] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 4, 1);
        this.fmlBuffer[5] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 5, 1);
        this.fmlBuffer[6] = new FmlField("TRANSACTION_MODE", FmlField.TYPE_BYTE, -1, null, 6, 1);
        this.fmlBuffer[7] = new FmlField("RUN_DATE", FmlField.TYPE_STRING, 9, null, 7, 1);
        this.fmlBuffer[8] = new FmlField("MARKET_CODE", FmlField.TYPE_STRING, 4, null, 8, 1);
        this.fmlBuffer[9] = new FmlField("SVC_STATUS", FmlField.TYPE_BYTE, -1, null, 9, 1);
        this.fmlBuffer[10] = new FmlField("LAST_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 10, 1);
        this.fmlBuffer[11] = new FmlField("LAST_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 11, 1);
        this.fmlBuffer[12] = new FmlField("ENV_CODE", FmlField.TYPE_STRING, 11, null, 12, 1);
        this.fmlBuffer[13] = new FmlField("SESSION_ID", FmlField.TYPE_INTEGER, -1, null, 13, 1);
        this.fmlBuffer[14] = new FmlField("ONLINE_TRX_NO", FmlField.TYPE_INTEGER, -1, null, 14, 1);
        this.fmlBuffer[15] = new FmlField("GROUP_TRX_ID", FmlField.TYPE_INTEGER, -1, null, 15, 1);
        this.fmlBuffer[16] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 16, 1);
        this.fmlBuffer[17] = new FmlField("ENT_SEQ_NO", FmlField.TYPE_INTEGER, -1, null, 17, 70);
        this.fmlBuffer[18] = new FmlField("ACTV_SEQ_NO", FmlField.TYPE_SHORT, -1, null, 18, 70);
        this.fmlBuffer[19] = new FmlField("CRD_DBT_IND", FmlField.TYPE_BYTE, -1, null, 19, 70);
        this.fmlBuffer[20] = new FmlField("EFFECTIVE_DATE", FmlField.TYPE_STRING, 9, null, 20, 70);
        this.fmlBuffer[21] = new FmlField("CRD_DBT_CODE", FmlField.TYPE_STRING, 7, null, 21, 70);
        this.fmlBuffer[22] = new FmlField("FEATURE_CODE", FmlField.TYPE_STRING, 7, null, 22, 70);
        this.fmlBuffer[23] = new FmlField("BILL_FIXED_TEXT", FmlField.TYPE_STRING, 61, null, 23, 70);
        this.fmlBuffer[24] = new FmlField("USER_TEXT", FmlField.TYPE_STRING, 501, null, 24, 70);
        this.fmlBuffer[25] = new FmlField("SUBSCRIBER_NO", FmlField.TYPE_STRING, 21, null, 25, 70);
        this.fmlBuffer[26] = new FmlField("SOC", FmlField.TYPE_STRING, 10, null, 26, 70);
        this.fmlBuffer[27] = new FmlField("FTR_REVENUE_CODE", FmlField.TYPE_STRING, 4, null, 27, 70);
        this.fmlBuffer[28] = new FmlField("PRIOD_CVRG_ST_DATE", FmlField.TYPE_STRING, 9, null, 28, 70);
        this.fmlBuffer[29] = new FmlField("PRIOD_CVRG_ND_DATE", FmlField.TYPE_STRING, 9, null, 29, 70);
        this.fmlBuffer[30] = new FmlField("CREATION_DATE", FmlField.TYPE_STRING, 9, null, 30, 70);
        this.fmlBuffer[31] = new FmlField("CRD_DBT_SOURCE_CODE", FmlField.TYPE_BYTE, -1, null, 31, 70);
        this.fmlBuffer[32] = new FmlField("ACTV_AMT", FmlField.TYPE_DOUBLE, -1, null, 32, 70);
        this.fmlBuffer[33] = new FmlField("APPLIED_CREDIT_AMT", FmlField.TYPE_DOUBLE, -1, null, 33, 70);
        this.fmlBuffer[34] = new FmlField("BALANCE_IMPACT", FmlField.TYPE_BYTE, -1, null, 34, 70);
        this.fmlBuffer[35] = new FmlField("BILL_CLOSE_DATE", FmlField.TYPE_STRING, 9, null, 35, 70);
        this.fmlBuffer[36] = new FmlField("CHG_MEMO_ID", FmlField.TYPE_INTEGER, -1, null, 36, 70);
        this.fmlBuffer[37] = new FmlField("ADJ_MEMO_ID", FmlField.TYPE_INTEGER, -1, null, 37, 70);
        this.fmlBuffer[38] = new FmlField("ADJ_CHARGE_ID", FmlField.TYPE_INTEGER, -1, null, 38, 70);
        this.fmlBuffer[39] = new FmlField("BL_IGNORE_IND", FmlField.TYPE_BYTE, -1, null, 39, 70);
        this.fmlBuffer[40] = new FmlField("ADJ_REVERSED", FmlField.TYPE_BYTE, -1, null, 40, 70);
        this.fmlBuffer[41] = new FmlField("NO_OF_INSTALL_FROM", FmlField.TYPE_SHORT, -1, null, 41, 70);
        this.fmlBuffer[42] = new FmlField("NO_OF_INSTALL_TO", FmlField.TYPE_SHORT, -1, null, 42, 70);
        this.fmlBuffer[43] = new FmlField("TOTAL_NO_OF_INSTALL", FmlField.TYPE_SHORT, -1, null, 43, 70);
        this.fmlBuffer[44] = new FmlField("RMS_INV_ACTV_TYPE", FmlField.TYPE_BYTE, -1, null, 44, 70);
        this.fmlBuffer[45] = new FmlField("RMS_INV_STORE_ID", FmlField.TYPE_STRING, 5, null, 45, 70);
        this.fmlBuffer[46] = new FmlField("RMS_INV_ID", FmlField.TYPE_INTEGER, -1, null, 46, 70);
        this.fmlBuffer[47] = new FmlField("OUTPUT_VOUCHER_NO", FmlField.TYPE_STRING, 14, null, 47, 1);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[1].getValue(0));
    }

    /**
     * Retrieves the value of the 'FIRST_DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'FIRST_DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_FIRST_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'SECOND_DIRECTIVE' field in the FML buffer.
     *
     * @return Value of 'SECOND_DIRECTIVE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SECOND_DIRECTIVE() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[3].getValue(0));
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(0));
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID() throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(0));
    }

    /**
     * Retrieves the value of the 'TRANSACTION_MODE' field in the FML buffer.
     *
     * @return Value of 'TRANSACTION_MODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TRANSACTION_MODE() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[6].getValue(0)));
    }

    /**
     * Retrieves the value of the 'RUN_DATE' field in the FML buffer.
     *
     * @return Value of 'RUN_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RUN_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[7].getValue(0));
    }

    /**
     * Retrieves the value of the 'MARKET_CODE' field in the FML buffer.
     *
     * @return Value of 'MARKET_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_MARKET_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(0));
    }

    /**
     * Retrieves the value of the 'SVC_STATUS' field in the FML buffer.
     *
     * @return Value of 'SVC_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SVC_STATUS() throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[9].getValue(0)));
    }

    /**
     * Retrieves the value of the 'LAST_UPDATE_DATE' field in the FML buffer.
     *
     * @return Value of 'LAST_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_UPDATE_DATE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[10].getValue(0));
    }

    /**
     * Retrieves the value of the 'LAST_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Value of 'LAST_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_UPDATE_STAMP() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[11].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ENV_CODE' field in the FML buffer.
     *
     * @return Value of 'ENV_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ENV_CODE() throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(0));
    }

    /**
     * Retrieves the value of the 'SESSION_ID' field in the FML buffer.
     *
     * @return Value of 'SESSION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SESSION_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[13].getValue(0));
    }

    /**
     * Retrieves the value of the 'ONLINE_TRX_NO' field in the FML buffer.
     *
     * @return Value of 'ONLINE_TRX_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ONLINE_TRX_NO() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[14].getValue(0));
    }

    /**
     * Retrieves the value of the 'GROUP_TRX_ID' field in the FML buffer.
     *
     * @return Value of 'GROUP_TRX_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GROUP_TRX_ID() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[15].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[16].getValue(0));
    }

    /**
     * Retrieves the value of the 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ENT_SEQ_NO(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ENT_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ENT_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ENT_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ACTV_SEQ_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[18].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ACTV_SEQ_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_SEQ_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_SEQ_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'CRD_DBT_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'CRD_DBT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CRD_DBT_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[19].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CRD_DBT_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'CRD_DBT_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CRD_DBT_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_EFFECTIVE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'EFFECTIVE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'EFFECTIVE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_EFFECTIVE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'CRD_DBT_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'CRD_DBT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CRD_DBT_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[21].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CRD_DBT_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'CRD_DBT_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CRD_DBT_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'FEATURE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'FEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FEATURE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[22].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FEATURE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'FEATURE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FEATURE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }

    /**
     * Retrieves the value of the 'BILL_FIXED_TEXT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'BILL_FIXED_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILL_FIXED_TEXT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[23].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BILL_FIXED_TEXT' field in the FML buffer.
     *
     * @return Number of values defined for 'BILL_FIXED_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILL_FIXED_TEXT_size() throws FMLManipulationException {
        return (this.fmlBuffer[23].getCount());
    }

    /**
     * Retrieves the value of the 'USER_TEXT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'USER_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_USER_TEXT(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[24].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'USER_TEXT' field in the FML buffer.
     *
     * @return Number of values defined for 'USER_TEXT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_USER_TEXT_size() throws FMLManipulationException {
        return (this.fmlBuffer[24].getCount());
    }

    /**
     * Retrieves the value of the 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SUBSCRIBER_NO(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[25].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SUBSCRIBER_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SUBSCRIBER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SUBSCRIBER_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[25].getCount());
    }

    /**
     * Retrieves the value of the 'SOC' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SOC(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[26].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SOC' field in the FML buffer.
     *
     * @return Number of values defined for 'SOC' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SOC_size() throws FMLManipulationException {
        return (this.fmlBuffer[26].getCount());
    }

    /**
     * Retrieves the value of the 'FTR_REVENUE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'FTR_REVENUE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_FTR_REVENUE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[27].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'FTR_REVENUE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'FTR_REVENUE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_FTR_REVENUE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[27].getCount());
    }

    /**
     * Retrieves the value of the 'PRIOD_CVRG_ST_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'PRIOD_CVRG_ST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRIOD_CVRG_ST_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[28].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRIOD_CVRG_ST_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'PRIOD_CVRG_ST_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRIOD_CVRG_ST_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[28].getCount());
    }

    /**
     * Retrieves the value of the 'PRIOD_CVRG_ND_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'PRIOD_CVRG_ND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRIOD_CVRG_ND_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[29].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRIOD_CVRG_ND_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'PRIOD_CVRG_ND_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRIOD_CVRG_ND_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[29].getCount());
    }

    /**
     * Retrieves the value of the 'CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[30].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[30].getCount());
    }

    /**
     * Retrieves the value of the 'CRD_DBT_SOURCE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'CRD_DBT_SOURCE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CRD_DBT_SOURCE_CODE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[31].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CRD_DBT_SOURCE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'CRD_DBT_SOURCE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CRD_DBT_SOURCE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[31].getCount());
    }

    /**
     * Retrieves the value of the 'ACTV_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_ACTV_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[32].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ACTV_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'ACTV_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ACTV_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[32].getCount());
    }

    /**
     * Retrieves the value of the 'APPLIED_CREDIT_AMT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'APPLIED_CREDIT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Double get_APPLIED_CREDIT_AMT(int nIndex) throws FMLManipulationException {
        return ((Double) this.fmlBuffer[33].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'APPLIED_CREDIT_AMT' field in the FML buffer.
     *
     * @return Number of values defined for 'APPLIED_CREDIT_AMT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_APPLIED_CREDIT_AMT_size() throws FMLManipulationException {
        return (this.fmlBuffer[33].getCount());
    }

    /**
     * Retrieves the value of the 'BALANCE_IMPACT' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'BALANCE_IMPACT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BALANCE_IMPACT(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[34].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BALANCE_IMPACT' field in the FML buffer.
     *
     * @return Number of values defined for 'BALANCE_IMPACT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BALANCE_IMPACT_size() throws FMLManipulationException {
        return (this.fmlBuffer[34].getCount());
    }

    /**
     * Retrieves the value of the 'BILL_CLOSE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'BILL_CLOSE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BILL_CLOSE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[35].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'BILL_CLOSE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'BILL_CLOSE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BILL_CLOSE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[35].getCount());
    }

    /**
     * Retrieves the value of the 'CHG_MEMO_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'CHG_MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CHG_MEMO_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[36].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CHG_MEMO_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'CHG_MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CHG_MEMO_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[36].getCount());
    }

    /**
     * Retrieves the value of the 'ADJ_MEMO_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'ADJ_MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADJ_MEMO_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[37].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADJ_MEMO_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADJ_MEMO_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADJ_MEMO_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[37].getCount());
    }

    /**
     * Retrieves the value of the 'ADJ_CHARGE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'ADJ_CHARGE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ADJ_CHARGE_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[38].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ADJ_CHARGE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'ADJ_CHARGE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADJ_CHARGE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[38].getCount());
    }

    /**
     * Retrieves the value of the 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_BL_IGNORE_IND(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[39].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'BL_IGNORE_IND' field in the FML buffer.
     *
     * @return Number of values defined for 'BL_IGNORE_IND' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_BL_IGNORE_IND_size() throws FMLManipulationException {
        return (this.fmlBuffer[39].getCount());
    }

    /**
     * Retrieves the value of the 'ADJ_REVERSED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'ADJ_REVERSED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ADJ_REVERSED(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[40].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'ADJ_REVERSED' field in the FML buffer.
     *
     * @return Number of values defined for 'ADJ_REVERSED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ADJ_REVERSED_size() throws FMLManipulationException {
        return (this.fmlBuffer[40].getCount());
    }

    /**
     * Retrieves the value of the 'NO_OF_INSTALL_FROM' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'NO_OF_INSTALL_FROM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NO_OF_INSTALL_FROM(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[41].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NO_OF_INSTALL_FROM' field in the FML buffer.
     *
     * @return Number of values defined for 'NO_OF_INSTALL_FROM' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NO_OF_INSTALL_FROM_size() throws FMLManipulationException {
        return (this.fmlBuffer[41].getCount());
    }

    /**
     * Retrieves the value of the 'NO_OF_INSTALL_TO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'NO_OF_INSTALL_TO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_NO_OF_INSTALL_TO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[42].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'NO_OF_INSTALL_TO' field in the FML buffer.
     *
     * @return Number of values defined for 'NO_OF_INSTALL_TO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NO_OF_INSTALL_TO_size() throws FMLManipulationException {
        return (this.fmlBuffer[42].getCount());
    }

    /**
     * Retrieves the value of the 'TOTAL_NO_OF_INSTALL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'TOTAL_NO_OF_INSTALL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_TOTAL_NO_OF_INSTALL(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[43].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TOTAL_NO_OF_INSTALL' field in the FML buffer.
     *
     * @return Number of values defined for 'TOTAL_NO_OF_INSTALL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TOTAL_NO_OF_INSTALL_size() throws FMLManipulationException {
        return (this.fmlBuffer[43].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_INV_ACTV_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'RMS_INV_ACTV_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_INV_ACTV_TYPE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[44].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'RMS_INV_ACTV_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_INV_ACTV_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_INV_ACTV_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[44].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_INV_STORE_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'RMS_INV_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_RMS_INV_STORE_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[45].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RMS_INV_STORE_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_INV_STORE_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_INV_STORE_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[45].getCount());
    }

    /**
     * Retrieves the value of the 'RMS_INV_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 70).
     * @return Value of 'RMS_INV_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_RMS_INV_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[46].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'RMS_INV_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'RMS_INV_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_RMS_INV_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[46].getCount());
    }

    /**
     * Retrieves the value of the 'OUTPUT_VOUCHER_NO' field in the FML buffer.
     *
     * @return Value of 'OUTPUT_VOUCHER_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_OUTPUT_VOUCHER_NO() throws FMLManipulationException {
        return ((String) this.fmlBuffer[47].getValue(0));
    }
}