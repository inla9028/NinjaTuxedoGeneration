package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsGetCtnNmOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsGetCtnNmOutput.
     *
     * @throws FMLManipulationException
     */
    public CsGetCtnNmOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsGetCtnNmOutput() {
    }

    /**
     * Creates a new instance of CsGetCtnNmOutput.
     *
     * @param ds Output dataset from CsGetCtnNm service.
     * @throws FMLManipulationException
     */
    public CsGetCtnNmOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[23];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("ROWID", FmlField.TYPE_STRING, 19, null, 3, 50);
        this.fmlBuffer[4] = new FmlField("CTN", FmlField.TYPE_STRING, 21, null, 4, 50);
        this.fmlBuffer[5] = new FmlField("SYS_CREATION_DATE", FmlField.TYPE_STRING, 15, null, 5, 50);
        this.fmlBuffer[6] = new FmlField("SYS_UPDATE_DATE", FmlField.TYPE_STRING, 15, null, 6, 50);
        this.fmlBuffer[7] = new FmlField("OPERATOR_ID", FmlField.TYPE_INTEGER, -1, null, 7, 50);
        this.fmlBuffer[8] = new FmlField("APPLICATION_ID", FmlField.TYPE_STRING, 7, null, 8, 50);
        this.fmlBuffer[9] = new FmlField("DL_SERVICE_CODE", FmlField.TYPE_STRING, 6, null, 9, 50);
        this.fmlBuffer[10] = new FmlField("DL_UPDATE_STAMP", FmlField.TYPE_SHORT, -1, null, 10, 50);
        this.fmlBuffer[11] = new FmlField("LAST_TRX_DATE", FmlField.TYPE_STRING, 15, null, 11, 50);
        this.fmlBuffer[12] = new FmlField("LAST_TRX_CODE", FmlField.TYPE_STRING, 4, null, 12, 50);
        this.fmlBuffer[13] = new FmlField("LAST_TRX_UID", FmlField.TYPE_INTEGER, -1, null, 13, 50);
        this.fmlBuffer[14] = new FmlField("CTN_STATUS", FmlField.TYPE_STRING, 3, null, 14, 50);
        this.fmlBuffer[15] = new FmlField("NL", FmlField.TYPE_STRING, 4, null, 15, 50);
        this.fmlBuffer[16] = new FmlField("NGP", FmlField.TYPE_STRING, 4, null, 16, 50);
        this.fmlBuffer[17] = new FmlField("SPECIAL_TRX_DATE", FmlField.TYPE_STRING, 15, null, 17, 50);
        this.fmlBuffer[18] = new FmlField("TN_IN_USE", FmlField.TYPE_BYTE, -1, null, 18, 50);
        this.fmlBuffer[19] = new FmlField("REASON", FmlField.TYPE_STRING, 31, null, 19, 50);
        this.fmlBuffer[20] = new FmlField("PNI", FmlField.TYPE_STRING, 11, null, 20, 50);
        this.fmlBuffer[21] = new FmlField("SPECIAL_TRX_NO", FmlField.TYPE_SHORT, -1, null, 21, 50);
        this.fmlBuffer[22] = new FmlField("CONV_RUN_NO", FmlField.TYPE_SHORT, -1, null, 22, 50);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[1].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'ROWID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_ROWID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'ROWID' field in the FML buffer.
     *
     * @return Number of values defined for 'ROWID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_ROWID_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'CTN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CTN(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_CREATION_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_CREATION_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_CREATION_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_CREATION_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SYS_UPDATE_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SYS_UPDATE_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SYS_UPDATE_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SYS_UPDATE_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'OPERATOR_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_OPERATOR_ID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'OPERATOR_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'OPERATOR_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_OPERATOR_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }

    /**
     * Retrieves the value of the 'APPLICATION_ID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_APPLICATION_ID(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[8].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'APPLICATION_ID' field in the FML buffer.
     *
     * @return Number of values defined for 'APPLICATION_ID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_APPLICATION_ID_size() throws FMLManipulationException {
        return (this.fmlBuffer[8].getCount());
    }

    /**
     * Retrieves the value of the 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_DL_SERVICE_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[9].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'DL_SERVICE_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'DL_SERVICE_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DL_SERVICE_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[9].getCount());
    }

    /**
     * Retrieves the value of the 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_DL_UPDATE_STAMP(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[10].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'DL_UPDATE_STAMP' field in the FML buffer.
     *
     * @return Number of values defined for 'DL_UPDATE_STAMP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_DL_UPDATE_STAMP_size() throws FMLManipulationException {
        return (this.fmlBuffer[10].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'LAST_TRX_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_TRX_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[11].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[11].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_CODE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'LAST_TRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_LAST_TRX_CODE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[12].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_CODE' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_CODE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_CODE_size() throws FMLManipulationException {
        return (this.fmlBuffer[12].getCount());
    }

    /**
     * Retrieves the value of the 'LAST_TRX_UID' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'LAST_TRX_UID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_LAST_TRX_UID(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[13].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'LAST_TRX_UID' field in the FML buffer.
     *
     * @return Number of values defined for 'LAST_TRX_UID' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_LAST_TRX_UID_size() throws FMLManipulationException {
        return (this.fmlBuffer[13].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_STATUS' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CTN_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_CTN_STATUS(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[14].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_STATUS' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_STATUS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_STATUS_size() throws FMLManipulationException {
        return (this.fmlBuffer[14].getCount());
    }

    /**
     * Retrieves the value of the 'NL' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NL(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[15].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NL' field in the FML buffer.
     *
     * @return Number of values defined for 'NL' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NL_size() throws FMLManipulationException {
        return (this.fmlBuffer[15].getCount());
    }

    /**
     * Retrieves the value of the 'NGP' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'NGP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_NGP(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[16].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'NGP' field in the FML buffer.
     *
     * @return Number of values defined for 'NGP' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_NGP_size() throws FMLManipulationException {
        return (this.fmlBuffer[16].getCount());
    }

    /**
     * Retrieves the value of the 'SPECIAL_TRX_DATE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SPECIAL_TRX_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_SPECIAL_TRX_DATE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[17].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'SPECIAL_TRX_DATE' field in the FML buffer.
     *
     * @return Number of values defined for 'SPECIAL_TRX_DATE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SPECIAL_TRX_DATE_size() throws FMLManipulationException {
        return (this.fmlBuffer[17].getCount());
    }

    /**
     * Retrieves the value of the 'TN_IN_USE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'TN_IN_USE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_TN_IN_USE(int nIndex) throws FMLManipulationException {
        return (TypeConverter.byteToString((Byte) this.fmlBuffer[18].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'TN_IN_USE' field in the FML buffer.
     *
     * @return Number of values defined for 'TN_IN_USE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_TN_IN_USE_size() throws FMLManipulationException {
        return (this.fmlBuffer[18].getCount());
    }

    /**
     * Retrieves the value of the 'REASON' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_REASON(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[19].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'REASON' field in the FML buffer.
     *
     * @return Number of values defined for 'REASON' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_REASON_size() throws FMLManipulationException {
        return (this.fmlBuffer[19].getCount());
    }

    /**
     * Retrieves the value of the 'PNI' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'PNI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PNI(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[20].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PNI' field in the FML buffer.
     *
     * @return Number of values defined for 'PNI' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PNI_size() throws FMLManipulationException {
        return (this.fmlBuffer[20].getCount());
    }

    /**
     * Retrieves the value of the 'SPECIAL_TRX_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'SPECIAL_TRX_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_SPECIAL_TRX_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[21].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'SPECIAL_TRX_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'SPECIAL_TRX_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_SPECIAL_TRX_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[21].getCount());
    }

    /**
     * Retrieves the value of the 'CONV_RUN_NO' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 50).
     * @return Value of 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CONV_RUN_NO(int nIndex) throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[22].getValue(nIndex)));
    }

    /**
     * Retrieves number of values defined for 'CONV_RUN_NO' field in the FML buffer.
     *
     * @return Number of values defined for 'CONV_RUN_NO' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CONV_RUN_NO_size() throws FMLManipulationException {
        return (this.fmlBuffer[22].getCount());
    }
}