package no.netcom.ninja.core.system.tuxedo.service.parameters;

import bea.jolt.pool.Result;
import no.netcom.ninja.core.system.tuxedo.exception.FMLManipulationException;
import no.netcom.ninja.core.util.TypeConverter;

/**
 * @author  Ninja - Generated by Ninja tools
 */
public class CsCtnStCntOutput extends ServiceOutput {

    /**
     * Creates a new instance of CsCtnStCntOutput.
     *
     * @throws FMLManipulationException
     */
    public CsCtnStCntOutput(int nApplicationStatus) throws FMLManipulationException {
        createFmlBuffer();
        setApplicationCode(nApplicationStatus);
    }

    public CsCtnStCntOutput() {
    }

    /**
     * Creates a new instance of CsCtnStCntOutput.
     *
     * @param ds Output dataset from CsCtnStCnt service.
     * @throws FMLManipulationException
     */
    public CsCtnStCntOutput(Result ds) throws FMLManipulationException {
        createFmlBuffer();
        populateFmlBuffer(ds);
    }

    /**
     * Populates the FML buffer.
     *
     * @throws FMLManipulationException
     */
    private void createFmlBuffer() throws FMLManipulationException {
        this.fmlBuffer = new FmlField[8];
        this.fmlBuffer[0] = new FmlField("GENERATION", FmlField.TYPE_INTEGER, -1, null, 0, 1);
        this.fmlBuffer[1] = new FmlField("MOREROWS", FmlField.TYPE_SHORT, -1, null, 1, 1);
        this.fmlBuffer[2] = new FmlField("ROWCOUNT", FmlField.TYPE_INTEGER, -1, null, 2, 1);
        this.fmlBuffer[3] = new FmlField("PRODUCT_TYPE", FmlField.TYPE_STRING, 4, null, 3, 10);
        this.fmlBuffer[4] = new FmlField("CTN_RESERVED", FmlField.TYPE_INTEGER, -1, null, 4, 10);
        this.fmlBuffer[5] = new FmlField("CTN_OPEN", FmlField.TYPE_INTEGER, -1, null, 5, 10);
        this.fmlBuffer[6] = new FmlField("CTN_SUSPENDED", FmlField.TYPE_INTEGER, -1, null, 6, 10);
        this.fmlBuffer[7] = new FmlField("CTN_CANCELLED", FmlField.TYPE_INTEGER, -1, null, 7, 10);
    }

    /**
     * Retrieves the value of the 'GENERATION' field in the FML buffer.
     *
     * @return Value of 'GENERATION' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_GENERATION() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[0].getValue(0));
    }

    /**
     * Retrieves the value of the 'MOREROWS' field in the FML buffer.
     *
     * @return Value of 'MOREROWS' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_MOREROWS() throws FMLManipulationException {
        return (TypeConverter.shortToInteger((Short) this.fmlBuffer[1].getValue(0)));
    }

    /**
     * Retrieves the value of the 'ROWCOUNT' field in the FML buffer.
     *
     * @return Value of 'ROWCOUNT' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_ROWCOUNT() throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[2].getValue(0));
    }

    /**
     * Retrieves the value of the 'PRODUCT_TYPE' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 10).
     * @return Value of 'PRODUCT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public String get_PRODUCT_TYPE(int nIndex) throws FMLManipulationException {
        return ((String) this.fmlBuffer[3].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'PRODUCT_TYPE' field in the FML buffer.
     *
     * @return Number of values defined for 'PRODUCT_TYPE' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_PRODUCT_TYPE_size() throws FMLManipulationException {
        return (this.fmlBuffer[3].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_RESERVED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 10).
     * @return Value of 'CTN_RESERVED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CTN_RESERVED(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[4].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_RESERVED' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_RESERVED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_RESERVED_size() throws FMLManipulationException {
        return (this.fmlBuffer[4].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_OPEN' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 10).
     * @return Value of 'CTN_OPEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CTN_OPEN(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[5].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_OPEN' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_OPEN' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_OPEN_size() throws FMLManipulationException {
        return (this.fmlBuffer[5].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_SUSPENDED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 10).
     * @return Value of 'CTN_SUSPENDED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CTN_SUSPENDED(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[6].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_SUSPENDED' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_SUSPENDED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_SUSPENDED_size() throws FMLManipulationException {
        return (this.fmlBuffer[6].getCount());
    }

    /**
     * Retrieves the value of the 'CTN_CANCELLED' field in the FML buffer.
     *
     * @param nIndex Sequence of value to be returned (valid values: 0 to 10).
     * @return Value of 'CTN_CANCELLED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public Integer get_CTN_CANCELLED(int nIndex) throws FMLManipulationException {
        return ((Integer) this.fmlBuffer[7].getValue(nIndex));
    }

    /**
     * Retrieves number of values defined for 'CTN_CANCELLED' field in the FML buffer.
     *
     * @return Number of values defined for 'CTN_CANCELLED' field in FML buffer.
     * @throws FMLManipulationException
     */
    public int get_CTN_CANCELLED_size() throws FMLManipulationException {
        return (this.fmlBuffer[7].getCount());
    }
}